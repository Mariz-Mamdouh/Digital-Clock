
Real Clock.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003810  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001654  0800391c  0800391c  0001391c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004f70  08004f70  0002006c  2**0
                  CONTENTS
  4 .ARM          00000000  08004f70  08004f70  0002006c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004f70  08004f70  0002006c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004f70  08004f70  00014f70  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004f74  08004f74  00014f74  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000006c  20000000  08004f78  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001d8  2000006c  08004fe4  0002006c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000244  08004fe4  00020244  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002006c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020095  2**0
                  CONTENTS, READONLY
 13 .debug_info   00007581  00000000  00000000  000200d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001c33  00000000  00000000  00027659  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000880  00000000  00000000  00029290  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000063b  00000000  00000000  00029b10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00017907  00000000  00000000  0002a14b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000a4a0  00000000  00000000  00041a52  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00083c30  00000000  00000000  0004bef2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00002584  00000000  00000000  000cfb24  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006e  00000000  00000000  000d20a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000006c 	.word	0x2000006c
 8000128:	00000000 	.word	0x00000000
 800012c:	08003904 	.word	0x08003904

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000070 	.word	0x20000070
 8000148:	08003904 	.word	0x08003904

0800014c <ST7735_Select>:
    ST7735_NORON  ,    DELAY, //  3: Normal display on, no args, w/delay
      10,                     //     10 ms delay
    ST7735_DISPON ,    DELAY, //  4: Main screen turn on, no args w/delay
      100 };                  //     100 ms delay

static void ST7735_Select() {
 800014c:	b580      	push	{r7, lr}
 800014e:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(ST7735_CS_GPIO_Port, ST7735_CS_Pin, GPIO_PIN_RESET);
 8000150:	2200      	movs	r2, #0
 8000152:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000156:	4802      	ldr	r0, [pc, #8]	; (8000160 <ST7735_Select+0x14>)
 8000158:	f001 f980 	bl	800145c <HAL_GPIO_WritePin>
}
 800015c:	bf00      	nop
 800015e:	bd80      	pop	{r7, pc}
 8000160:	40010800 	.word	0x40010800

08000164 <ST7735_Unselect>:

void ST7735_Unselect() {
 8000164:	b580      	push	{r7, lr}
 8000166:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(ST7735_CS_GPIO_Port, ST7735_CS_Pin, GPIO_PIN_SET);
 8000168:	2201      	movs	r2, #1
 800016a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800016e:	4802      	ldr	r0, [pc, #8]	; (8000178 <ST7735_Unselect+0x14>)
 8000170:	f001 f974 	bl	800145c <HAL_GPIO_WritePin>
}
 8000174:	bf00      	nop
 8000176:	bd80      	pop	{r7, pc}
 8000178:	40010800 	.word	0x40010800

0800017c <ST7735_Reset>:

static void ST7735_Reset() {
 800017c:	b580      	push	{r7, lr}
 800017e:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(ST7735_RES_GPIO_Port, ST7735_RES_Pin, GPIO_PIN_RESET);
 8000180:	2200      	movs	r2, #0
 8000182:	2104      	movs	r1, #4
 8000184:	4806      	ldr	r0, [pc, #24]	; (80001a0 <ST7735_Reset+0x24>)
 8000186:	f001 f969 	bl	800145c <HAL_GPIO_WritePin>
    HAL_Delay(5);
 800018a:	2005      	movs	r0, #5
 800018c:	f000 feda 	bl	8000f44 <HAL_Delay>
    HAL_GPIO_WritePin(ST7735_RES_GPIO_Port, ST7735_RES_Pin, GPIO_PIN_SET);
 8000190:	2201      	movs	r2, #1
 8000192:	2104      	movs	r1, #4
 8000194:	4802      	ldr	r0, [pc, #8]	; (80001a0 <ST7735_Reset+0x24>)
 8000196:	f001 f961 	bl	800145c <HAL_GPIO_WritePin>
}
 800019a:	bf00      	nop
 800019c:	bd80      	pop	{r7, pc}
 800019e:	bf00      	nop
 80001a0:	40010800 	.word	0x40010800

080001a4 <ST7735_WriteCommand>:

static void ST7735_WriteCommand(uint8_t cmd) {
 80001a4:	b580      	push	{r7, lr}
 80001a6:	b082      	sub	sp, #8
 80001a8:	af00      	add	r7, sp, #0
 80001aa:	4603      	mov	r3, r0
 80001ac:	71fb      	strb	r3, [r7, #7]
    HAL_GPIO_WritePin(ST7735_DC_GPIO_Port, ST7735_DC_Pin, GPIO_PIN_RESET);
 80001ae:	2200      	movs	r2, #0
 80001b0:	2102      	movs	r1, #2
 80001b2:	4807      	ldr	r0, [pc, #28]	; (80001d0 <ST7735_WriteCommand+0x2c>)
 80001b4:	f001 f952 	bl	800145c <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&ST7735_SPI_PORT, &cmd, sizeof(cmd), HAL_MAX_DELAY);
 80001b8:	1df9      	adds	r1, r7, #7
 80001ba:	f04f 33ff 	mov.w	r3, #4294967295
 80001be:	2201      	movs	r2, #1
 80001c0:	4804      	ldr	r0, [pc, #16]	; (80001d4 <ST7735_WriteCommand+0x30>)
 80001c2:	f002 fd03 	bl	8002bcc <HAL_SPI_Transmit>
}
 80001c6:	bf00      	nop
 80001c8:	3708      	adds	r7, #8
 80001ca:	46bd      	mov	sp, r7
 80001cc:	bd80      	pop	{r7, pc}
 80001ce:	bf00      	nop
 80001d0:	40010800 	.word	0x40010800
 80001d4:	2000009c 	.word	0x2000009c

080001d8 <ST7735_WriteData>:

static void ST7735_WriteData(uint8_t* buff, size_t buff_size) {
 80001d8:	b580      	push	{r7, lr}
 80001da:	b082      	sub	sp, #8
 80001dc:	af00      	add	r7, sp, #0
 80001de:	6078      	str	r0, [r7, #4]
 80001e0:	6039      	str	r1, [r7, #0]
    HAL_GPIO_WritePin(ST7735_DC_GPIO_Port, ST7735_DC_Pin, GPIO_PIN_SET);
 80001e2:	2201      	movs	r2, #1
 80001e4:	2102      	movs	r1, #2
 80001e6:	4807      	ldr	r0, [pc, #28]	; (8000204 <ST7735_WriteData+0x2c>)
 80001e8:	f001 f938 	bl	800145c <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&ST7735_SPI_PORT, buff, buff_size, HAL_MAX_DELAY);
 80001ec:	683b      	ldr	r3, [r7, #0]
 80001ee:	b29a      	uxth	r2, r3
 80001f0:	f04f 33ff 	mov.w	r3, #4294967295
 80001f4:	6879      	ldr	r1, [r7, #4]
 80001f6:	4804      	ldr	r0, [pc, #16]	; (8000208 <ST7735_WriteData+0x30>)
 80001f8:	f002 fce8 	bl	8002bcc <HAL_SPI_Transmit>
}
 80001fc:	bf00      	nop
 80001fe:	3708      	adds	r7, #8
 8000200:	46bd      	mov	sp, r7
 8000202:	bd80      	pop	{r7, pc}
 8000204:	40010800 	.word	0x40010800
 8000208:	2000009c 	.word	0x2000009c

0800020c <ST7735_ExecuteCommandList>:

static void ST7735_ExecuteCommandList(const uint8_t *addr) {
 800020c:	b580      	push	{r7, lr}
 800020e:	b084      	sub	sp, #16
 8000210:	af00      	add	r7, sp, #0
 8000212:	6078      	str	r0, [r7, #4]
    uint8_t numCommands, numArgs;
    uint16_t ms;

    numCommands = *addr++;
 8000214:	687b      	ldr	r3, [r7, #4]
 8000216:	1c5a      	adds	r2, r3, #1
 8000218:	607a      	str	r2, [r7, #4]
 800021a:	781b      	ldrb	r3, [r3, #0]
 800021c:	73fb      	strb	r3, [r7, #15]
    while(numCommands--) {
 800021e:	e034      	b.n	800028a <ST7735_ExecuteCommandList+0x7e>
        uint8_t cmd = *addr++;
 8000220:	687b      	ldr	r3, [r7, #4]
 8000222:	1c5a      	adds	r2, r3, #1
 8000224:	607a      	str	r2, [r7, #4]
 8000226:	781b      	ldrb	r3, [r3, #0]
 8000228:	72fb      	strb	r3, [r7, #11]
        ST7735_WriteCommand(cmd);
 800022a:	7afb      	ldrb	r3, [r7, #11]
 800022c:	4618      	mov	r0, r3
 800022e:	f7ff ffb9 	bl	80001a4 <ST7735_WriteCommand>

        numArgs = *addr++;
 8000232:	687b      	ldr	r3, [r7, #4]
 8000234:	1c5a      	adds	r2, r3, #1
 8000236:	607a      	str	r2, [r7, #4]
 8000238:	781b      	ldrb	r3, [r3, #0]
 800023a:	72bb      	strb	r3, [r7, #10]
        // If high bit set, delay follows args
        ms = numArgs & DELAY;
 800023c:	7abb      	ldrb	r3, [r7, #10]
 800023e:	b29b      	uxth	r3, r3
 8000240:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000244:	81bb      	strh	r3, [r7, #12]
        numArgs &= ~DELAY;
 8000246:	7abb      	ldrb	r3, [r7, #10]
 8000248:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800024c:	72bb      	strb	r3, [r7, #10]
        if(numArgs) {
 800024e:	7abb      	ldrb	r3, [r7, #10]
 8000250:	2b00      	cmp	r3, #0
 8000252:	d008      	beq.n	8000266 <ST7735_ExecuteCommandList+0x5a>
            ST7735_WriteData((uint8_t*)addr, numArgs);
 8000254:	7abb      	ldrb	r3, [r7, #10]
 8000256:	4619      	mov	r1, r3
 8000258:	6878      	ldr	r0, [r7, #4]
 800025a:	f7ff ffbd 	bl	80001d8 <ST7735_WriteData>
            addr += numArgs;
 800025e:	7abb      	ldrb	r3, [r7, #10]
 8000260:	687a      	ldr	r2, [r7, #4]
 8000262:	4413      	add	r3, r2
 8000264:	607b      	str	r3, [r7, #4]
        }

        if(ms) {
 8000266:	89bb      	ldrh	r3, [r7, #12]
 8000268:	2b00      	cmp	r3, #0
 800026a:	d00e      	beq.n	800028a <ST7735_ExecuteCommandList+0x7e>
            ms = *addr++;
 800026c:	687b      	ldr	r3, [r7, #4]
 800026e:	1c5a      	adds	r2, r3, #1
 8000270:	607a      	str	r2, [r7, #4]
 8000272:	781b      	ldrb	r3, [r3, #0]
 8000274:	81bb      	strh	r3, [r7, #12]
            if(ms == 255) ms = 500;
 8000276:	89bb      	ldrh	r3, [r7, #12]
 8000278:	2bff      	cmp	r3, #255	; 0xff
 800027a:	d102      	bne.n	8000282 <ST7735_ExecuteCommandList+0x76>
 800027c:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000280:	81bb      	strh	r3, [r7, #12]
            HAL_Delay(ms);
 8000282:	89bb      	ldrh	r3, [r7, #12]
 8000284:	4618      	mov	r0, r3
 8000286:	f000 fe5d 	bl	8000f44 <HAL_Delay>
    while(numCommands--) {
 800028a:	7bfb      	ldrb	r3, [r7, #15]
 800028c:	1e5a      	subs	r2, r3, #1
 800028e:	73fa      	strb	r2, [r7, #15]
 8000290:	2b00      	cmp	r3, #0
 8000292:	d1c5      	bne.n	8000220 <ST7735_ExecuteCommandList+0x14>
        }
    }
}
 8000294:	bf00      	nop
 8000296:	bf00      	nop
 8000298:	3710      	adds	r7, #16
 800029a:	46bd      	mov	sp, r7
 800029c:	bd80      	pop	{r7, pc}

0800029e <ST7735_SetAddressWindow>:

static void ST7735_SetAddressWindow(uint8_t x0, uint8_t y0, uint8_t x1, uint8_t y1) {
 800029e:	b590      	push	{r4, r7, lr}
 80002a0:	b085      	sub	sp, #20
 80002a2:	af00      	add	r7, sp, #0
 80002a4:	4604      	mov	r4, r0
 80002a6:	4608      	mov	r0, r1
 80002a8:	4611      	mov	r1, r2
 80002aa:	461a      	mov	r2, r3
 80002ac:	4623      	mov	r3, r4
 80002ae:	71fb      	strb	r3, [r7, #7]
 80002b0:	4603      	mov	r3, r0
 80002b2:	71bb      	strb	r3, [r7, #6]
 80002b4:	460b      	mov	r3, r1
 80002b6:	717b      	strb	r3, [r7, #5]
 80002b8:	4613      	mov	r3, r2
 80002ba:	713b      	strb	r3, [r7, #4]
    // column address set
    ST7735_WriteCommand(ST7735_CASET);
 80002bc:	202a      	movs	r0, #42	; 0x2a
 80002be:	f7ff ff71 	bl	80001a4 <ST7735_WriteCommand>
    uint8_t data[] = { 0x00, x0 + ST7735_XSTART, 0x00, x1 + ST7735_XSTART };
 80002c2:	2300      	movs	r3, #0
 80002c4:	733b      	strb	r3, [r7, #12]
 80002c6:	79fb      	ldrb	r3, [r7, #7]
 80002c8:	737b      	strb	r3, [r7, #13]
 80002ca:	2300      	movs	r3, #0
 80002cc:	73bb      	strb	r3, [r7, #14]
 80002ce:	797b      	ldrb	r3, [r7, #5]
 80002d0:	73fb      	strb	r3, [r7, #15]
    ST7735_WriteData(data, sizeof(data));
 80002d2:	f107 030c 	add.w	r3, r7, #12
 80002d6:	2104      	movs	r1, #4
 80002d8:	4618      	mov	r0, r3
 80002da:	f7ff ff7d 	bl	80001d8 <ST7735_WriteData>

    // row address set
    ST7735_WriteCommand(ST7735_RASET);
 80002de:	202b      	movs	r0, #43	; 0x2b
 80002e0:	f7ff ff60 	bl	80001a4 <ST7735_WriteCommand>
    data[1] = y0 + ST7735_YSTART;
 80002e4:	79bb      	ldrb	r3, [r7, #6]
 80002e6:	737b      	strb	r3, [r7, #13]
    data[3] = y1 + ST7735_YSTART;
 80002e8:	793b      	ldrb	r3, [r7, #4]
 80002ea:	73fb      	strb	r3, [r7, #15]
    ST7735_WriteData(data, sizeof(data));
 80002ec:	f107 030c 	add.w	r3, r7, #12
 80002f0:	2104      	movs	r1, #4
 80002f2:	4618      	mov	r0, r3
 80002f4:	f7ff ff70 	bl	80001d8 <ST7735_WriteData>

    // write to RAM
    ST7735_WriteCommand(ST7735_RAMWR);
 80002f8:	202c      	movs	r0, #44	; 0x2c
 80002fa:	f7ff ff53 	bl	80001a4 <ST7735_WriteCommand>
}
 80002fe:	bf00      	nop
 8000300:	3714      	adds	r7, #20
 8000302:	46bd      	mov	sp, r7
 8000304:	bd90      	pop	{r4, r7, pc}
	...

08000308 <ST7735_Init>:

void ST7735_Init() {
 8000308:	b580      	push	{r7, lr}
 800030a:	af00      	add	r7, sp, #0
    ST7735_Select();
 800030c:	f7ff ff1e 	bl	800014c <ST7735_Select>
    ST7735_Reset();
 8000310:	f7ff ff34 	bl	800017c <ST7735_Reset>
    ST7735_ExecuteCommandList(init_cmds1);
 8000314:	4806      	ldr	r0, [pc, #24]	; (8000330 <ST7735_Init+0x28>)
 8000316:	f7ff ff79 	bl	800020c <ST7735_ExecuteCommandList>
    ST7735_ExecuteCommandList(init_cmds2);
 800031a:	4806      	ldr	r0, [pc, #24]	; (8000334 <ST7735_Init+0x2c>)
 800031c:	f7ff ff76 	bl	800020c <ST7735_ExecuteCommandList>
    ST7735_ExecuteCommandList(init_cmds3);
 8000320:	4805      	ldr	r0, [pc, #20]	; (8000338 <ST7735_Init+0x30>)
 8000322:	f7ff ff73 	bl	800020c <ST7735_ExecuteCommandList>
    ST7735_Unselect();
 8000326:	f7ff ff1d 	bl	8000164 <ST7735_Unselect>
}
 800032a:	bf00      	nop
 800032c:	bd80      	pop	{r7, pc}
 800032e:	bf00      	nop
 8000330:	080039bc 	.word	0x080039bc
 8000334:	080039f8 	.word	0x080039f8
 8000338:	08003a08 	.word	0x08003a08

0800033c <ST7735_WriteChar>:
    ST7735_WriteData(data, sizeof(data));

    ST7735_Unselect();
}

static void ST7735_WriteChar(uint16_t x, uint16_t y, char ch, FontDef font, uint16_t color, uint16_t bgcolor) {
 800033c:	b082      	sub	sp, #8
 800033e:	b590      	push	{r4, r7, lr}
 8000340:	b089      	sub	sp, #36	; 0x24
 8000342:	af00      	add	r7, sp, #0
 8000344:	637b      	str	r3, [r7, #52]	; 0x34
 8000346:	4603      	mov	r3, r0
 8000348:	80fb      	strh	r3, [r7, #6]
 800034a:	460b      	mov	r3, r1
 800034c:	80bb      	strh	r3, [r7, #4]
 800034e:	4613      	mov	r3, r2
 8000350:	70fb      	strb	r3, [r7, #3]
    uint32_t i, b, j;

    ST7735_SetAddressWindow(x, y, x+font.width-1, y+font.height-1);
 8000352:	88fb      	ldrh	r3, [r7, #6]
 8000354:	b2d8      	uxtb	r0, r3
 8000356:	88bb      	ldrh	r3, [r7, #4]
 8000358:	b2d9      	uxtb	r1, r3
 800035a:	88fb      	ldrh	r3, [r7, #6]
 800035c:	b2da      	uxtb	r2, r3
 800035e:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8000362:	4413      	add	r3, r2
 8000364:	b2db      	uxtb	r3, r3
 8000366:	3b01      	subs	r3, #1
 8000368:	b2dc      	uxtb	r4, r3
 800036a:	88bb      	ldrh	r3, [r7, #4]
 800036c:	b2da      	uxtb	r2, r3
 800036e:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8000372:	4413      	add	r3, r2
 8000374:	b2db      	uxtb	r3, r3
 8000376:	3b01      	subs	r3, #1
 8000378:	b2db      	uxtb	r3, r3
 800037a:	4622      	mov	r2, r4
 800037c:	f7ff ff8f 	bl	800029e <ST7735_SetAddressWindow>

    for(i = 0; i < font.height; i++) {
 8000380:	2300      	movs	r3, #0
 8000382:	61fb      	str	r3, [r7, #28]
 8000384:	e043      	b.n	800040e <ST7735_WriteChar+0xd2>
        b = font.data[(ch - 32) * font.height + i];
 8000386:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8000388:	78fb      	ldrb	r3, [r7, #3]
 800038a:	3b20      	subs	r3, #32
 800038c:	f897 1035 	ldrb.w	r1, [r7, #53]	; 0x35
 8000390:	fb01 f303 	mul.w	r3, r1, r3
 8000394:	4619      	mov	r1, r3
 8000396:	69fb      	ldr	r3, [r7, #28]
 8000398:	440b      	add	r3, r1
 800039a:	005b      	lsls	r3, r3, #1
 800039c:	4413      	add	r3, r2
 800039e:	881b      	ldrh	r3, [r3, #0]
 80003a0:	617b      	str	r3, [r7, #20]
        for(j = 0; j < font.width; j++) {
 80003a2:	2300      	movs	r3, #0
 80003a4:	61bb      	str	r3, [r7, #24]
 80003a6:	e029      	b.n	80003fc <ST7735_WriteChar+0xc0>
            if((b << j) & 0x8000)  {
 80003a8:	697a      	ldr	r2, [r7, #20]
 80003aa:	69bb      	ldr	r3, [r7, #24]
 80003ac:	fa02 f303 	lsl.w	r3, r2, r3
 80003b0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80003b4:	2b00      	cmp	r3, #0
 80003b6:	d00e      	beq.n	80003d6 <ST7735_WriteChar+0x9a>
                uint8_t data[] = { color >> 8, color & 0xFF };
 80003b8:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80003ba:	0a1b      	lsrs	r3, r3, #8
 80003bc:	b29b      	uxth	r3, r3
 80003be:	b2db      	uxtb	r3, r3
 80003c0:	743b      	strb	r3, [r7, #16]
 80003c2:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80003c4:	b2db      	uxtb	r3, r3
 80003c6:	747b      	strb	r3, [r7, #17]
                ST7735_WriteData(data, sizeof(data));
 80003c8:	f107 0310 	add.w	r3, r7, #16
 80003cc:	2102      	movs	r1, #2
 80003ce:	4618      	mov	r0, r3
 80003d0:	f7ff ff02 	bl	80001d8 <ST7735_WriteData>
 80003d4:	e00f      	b.n	80003f6 <ST7735_WriteChar+0xba>
            } else {
                uint8_t data[] = { bgcolor >> 8, bgcolor & 0xFF };
 80003d6:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80003da:	0a1b      	lsrs	r3, r3, #8
 80003dc:	b29b      	uxth	r3, r3
 80003de:	b2db      	uxtb	r3, r3
 80003e0:	733b      	strb	r3, [r7, #12]
 80003e2:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80003e6:	b2db      	uxtb	r3, r3
 80003e8:	737b      	strb	r3, [r7, #13]
                ST7735_WriteData(data, sizeof(data));
 80003ea:	f107 030c 	add.w	r3, r7, #12
 80003ee:	2102      	movs	r1, #2
 80003f0:	4618      	mov	r0, r3
 80003f2:	f7ff fef1 	bl	80001d8 <ST7735_WriteData>
        for(j = 0; j < font.width; j++) {
 80003f6:	69bb      	ldr	r3, [r7, #24]
 80003f8:	3301      	adds	r3, #1
 80003fa:	61bb      	str	r3, [r7, #24]
 80003fc:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8000400:	461a      	mov	r2, r3
 8000402:	69bb      	ldr	r3, [r7, #24]
 8000404:	4293      	cmp	r3, r2
 8000406:	d3cf      	bcc.n	80003a8 <ST7735_WriteChar+0x6c>
    for(i = 0; i < font.height; i++) {
 8000408:	69fb      	ldr	r3, [r7, #28]
 800040a:	3301      	adds	r3, #1
 800040c:	61fb      	str	r3, [r7, #28]
 800040e:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8000412:	461a      	mov	r2, r3
 8000414:	69fb      	ldr	r3, [r7, #28]
 8000416:	4293      	cmp	r3, r2
 8000418:	d3b5      	bcc.n	8000386 <ST7735_WriteChar+0x4a>
            }
        }
    }
}
 800041a:	bf00      	nop
 800041c:	bf00      	nop
 800041e:	3724      	adds	r7, #36	; 0x24
 8000420:	46bd      	mov	sp, r7
 8000422:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8000426:	b002      	add	sp, #8
 8000428:	4770      	bx	lr

0800042a <ST7735_WriteString>:
        }
    }
}
*/

void ST7735_WriteString(uint16_t x, uint16_t y, const char* str, FontDef font, uint16_t color, uint16_t bgcolor) {
 800042a:	b082      	sub	sp, #8
 800042c:	b580      	push	{r7, lr}
 800042e:	b086      	sub	sp, #24
 8000430:	af04      	add	r7, sp, #16
 8000432:	603a      	str	r2, [r7, #0]
 8000434:	617b      	str	r3, [r7, #20]
 8000436:	4603      	mov	r3, r0
 8000438:	80fb      	strh	r3, [r7, #6]
 800043a:	460b      	mov	r3, r1
 800043c:	80bb      	strh	r3, [r7, #4]
    ST7735_Select();
 800043e:	f7ff fe85 	bl	800014c <ST7735_Select>

    while(*str) {
 8000442:	e02d      	b.n	80004a0 <ST7735_WriteString+0x76>
        if(x + font.width >= ST7735_WIDTH) {
 8000444:	88fb      	ldrh	r3, [r7, #6]
 8000446:	7d3a      	ldrb	r2, [r7, #20]
 8000448:	4413      	add	r3, r2
 800044a:	2b7f      	cmp	r3, #127	; 0x7f
 800044c:	dd13      	ble.n	8000476 <ST7735_WriteString+0x4c>
            x = 0;
 800044e:	2300      	movs	r3, #0
 8000450:	80fb      	strh	r3, [r7, #6]
            y += font.height;
 8000452:	7d7b      	ldrb	r3, [r7, #21]
 8000454:	b29a      	uxth	r2, r3
 8000456:	88bb      	ldrh	r3, [r7, #4]
 8000458:	4413      	add	r3, r2
 800045a:	80bb      	strh	r3, [r7, #4]
            if(y + font.height >= ST7735_HEIGHT) {
 800045c:	88bb      	ldrh	r3, [r7, #4]
 800045e:	7d7a      	ldrb	r2, [r7, #21]
 8000460:	4413      	add	r3, r2
 8000462:	2b9f      	cmp	r3, #159	; 0x9f
 8000464:	dc21      	bgt.n	80004aa <ST7735_WriteString+0x80>
                break;
            }

            if(*str == ' ') {
 8000466:	683b      	ldr	r3, [r7, #0]
 8000468:	781b      	ldrb	r3, [r3, #0]
 800046a:	2b20      	cmp	r3, #32
 800046c:	d103      	bne.n	8000476 <ST7735_WriteString+0x4c>
                // skip spaces in the beginning of the new line
                str++;
 800046e:	683b      	ldr	r3, [r7, #0]
 8000470:	3301      	adds	r3, #1
 8000472:	603b      	str	r3, [r7, #0]
                continue;
 8000474:	e014      	b.n	80004a0 <ST7735_WriteString+0x76>
            }
        }

        ST7735_WriteChar(x, y, *str, font, color, bgcolor);
 8000476:	683b      	ldr	r3, [r7, #0]
 8000478:	781a      	ldrb	r2, [r3, #0]
 800047a:	88b9      	ldrh	r1, [r7, #4]
 800047c:	88f8      	ldrh	r0, [r7, #6]
 800047e:	8c3b      	ldrh	r3, [r7, #32]
 8000480:	9302      	str	r3, [sp, #8]
 8000482:	8bbb      	ldrh	r3, [r7, #28]
 8000484:	9301      	str	r3, [sp, #4]
 8000486:	69bb      	ldr	r3, [r7, #24]
 8000488:	9300      	str	r3, [sp, #0]
 800048a:	697b      	ldr	r3, [r7, #20]
 800048c:	f7ff ff56 	bl	800033c <ST7735_WriteChar>
        x += font.width;
 8000490:	7d3b      	ldrb	r3, [r7, #20]
 8000492:	b29a      	uxth	r2, r3
 8000494:	88fb      	ldrh	r3, [r7, #6]
 8000496:	4413      	add	r3, r2
 8000498:	80fb      	strh	r3, [r7, #6]
        str++;
 800049a:	683b      	ldr	r3, [r7, #0]
 800049c:	3301      	adds	r3, #1
 800049e:	603b      	str	r3, [r7, #0]
    while(*str) {
 80004a0:	683b      	ldr	r3, [r7, #0]
 80004a2:	781b      	ldrb	r3, [r3, #0]
 80004a4:	2b00      	cmp	r3, #0
 80004a6:	d1cd      	bne.n	8000444 <ST7735_WriteString+0x1a>
 80004a8:	e000      	b.n	80004ac <ST7735_WriteString+0x82>
                break;
 80004aa:	bf00      	nop
    }

    ST7735_Unselect();
 80004ac:	f7ff fe5a 	bl	8000164 <ST7735_Unselect>
}
 80004b0:	bf00      	nop
 80004b2:	3708      	adds	r7, #8
 80004b4:	46bd      	mov	sp, r7
 80004b6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80004ba:	b002      	add	sp, #8
 80004bc:	4770      	bx	lr
	...

080004c0 <ST7735_FillRectangle>:

void ST7735_FillRectangle(uint16_t x, uint16_t y, uint16_t w, uint16_t h, uint16_t color) {
 80004c0:	b590      	push	{r4, r7, lr}
 80004c2:	b085      	sub	sp, #20
 80004c4:	af00      	add	r7, sp, #0
 80004c6:	4604      	mov	r4, r0
 80004c8:	4608      	mov	r0, r1
 80004ca:	4611      	mov	r1, r2
 80004cc:	461a      	mov	r2, r3
 80004ce:	4623      	mov	r3, r4
 80004d0:	80fb      	strh	r3, [r7, #6]
 80004d2:	4603      	mov	r3, r0
 80004d4:	80bb      	strh	r3, [r7, #4]
 80004d6:	460b      	mov	r3, r1
 80004d8:	807b      	strh	r3, [r7, #2]
 80004da:	4613      	mov	r3, r2
 80004dc:	803b      	strh	r3, [r7, #0]
    // clipping
    if((x >= ST7735_WIDTH) || (y >= ST7735_HEIGHT)) return;
 80004de:	88fb      	ldrh	r3, [r7, #6]
 80004e0:	2b7f      	cmp	r3, #127	; 0x7f
 80004e2:	d857      	bhi.n	8000594 <ST7735_FillRectangle+0xd4>
 80004e4:	88bb      	ldrh	r3, [r7, #4]
 80004e6:	2b9f      	cmp	r3, #159	; 0x9f
 80004e8:	d854      	bhi.n	8000594 <ST7735_FillRectangle+0xd4>
    if((x + w - 1) >= ST7735_WIDTH) w = ST7735_WIDTH - x;
 80004ea:	88fa      	ldrh	r2, [r7, #6]
 80004ec:	887b      	ldrh	r3, [r7, #2]
 80004ee:	4413      	add	r3, r2
 80004f0:	2b80      	cmp	r3, #128	; 0x80
 80004f2:	dd03      	ble.n	80004fc <ST7735_FillRectangle+0x3c>
 80004f4:	88fb      	ldrh	r3, [r7, #6]
 80004f6:	f1c3 0380 	rsb	r3, r3, #128	; 0x80
 80004fa:	807b      	strh	r3, [r7, #2]
    if((y + h - 1) >= ST7735_HEIGHT) h = ST7735_HEIGHT - y;
 80004fc:	88ba      	ldrh	r2, [r7, #4]
 80004fe:	883b      	ldrh	r3, [r7, #0]
 8000500:	4413      	add	r3, r2
 8000502:	2ba0      	cmp	r3, #160	; 0xa0
 8000504:	dd03      	ble.n	800050e <ST7735_FillRectangle+0x4e>
 8000506:	88bb      	ldrh	r3, [r7, #4]
 8000508:	f1c3 03a0 	rsb	r3, r3, #160	; 0xa0
 800050c:	803b      	strh	r3, [r7, #0]

    ST7735_Select();
 800050e:	f7ff fe1d 	bl	800014c <ST7735_Select>
    ST7735_SetAddressWindow(x, y, x+w-1, y+h-1);
 8000512:	88fb      	ldrh	r3, [r7, #6]
 8000514:	b2d8      	uxtb	r0, r3
 8000516:	88bb      	ldrh	r3, [r7, #4]
 8000518:	b2d9      	uxtb	r1, r3
 800051a:	88fb      	ldrh	r3, [r7, #6]
 800051c:	b2da      	uxtb	r2, r3
 800051e:	887b      	ldrh	r3, [r7, #2]
 8000520:	b2db      	uxtb	r3, r3
 8000522:	4413      	add	r3, r2
 8000524:	b2db      	uxtb	r3, r3
 8000526:	3b01      	subs	r3, #1
 8000528:	b2dc      	uxtb	r4, r3
 800052a:	88bb      	ldrh	r3, [r7, #4]
 800052c:	b2da      	uxtb	r2, r3
 800052e:	883b      	ldrh	r3, [r7, #0]
 8000530:	b2db      	uxtb	r3, r3
 8000532:	4413      	add	r3, r2
 8000534:	b2db      	uxtb	r3, r3
 8000536:	3b01      	subs	r3, #1
 8000538:	b2db      	uxtb	r3, r3
 800053a:	4622      	mov	r2, r4
 800053c:	f7ff feaf 	bl	800029e <ST7735_SetAddressWindow>

    uint8_t data[] = { color >> 8, color & 0xFF };
 8000540:	8c3b      	ldrh	r3, [r7, #32]
 8000542:	0a1b      	lsrs	r3, r3, #8
 8000544:	b29b      	uxth	r3, r3
 8000546:	b2db      	uxtb	r3, r3
 8000548:	733b      	strb	r3, [r7, #12]
 800054a:	8c3b      	ldrh	r3, [r7, #32]
 800054c:	b2db      	uxtb	r3, r3
 800054e:	737b      	strb	r3, [r7, #13]
    HAL_GPIO_WritePin(ST7735_DC_GPIO_Port, ST7735_DC_Pin, GPIO_PIN_SET);
 8000550:	2201      	movs	r2, #1
 8000552:	2102      	movs	r1, #2
 8000554:	4811      	ldr	r0, [pc, #68]	; (800059c <ST7735_FillRectangle+0xdc>)
 8000556:	f000 ff81 	bl	800145c <HAL_GPIO_WritePin>
    for(y = h; y > 0; y--) {
 800055a:	883b      	ldrh	r3, [r7, #0]
 800055c:	80bb      	strh	r3, [r7, #4]
 800055e:	e013      	b.n	8000588 <ST7735_FillRectangle+0xc8>
        for(x = w; x > 0; x--) {
 8000560:	887b      	ldrh	r3, [r7, #2]
 8000562:	80fb      	strh	r3, [r7, #6]
 8000564:	e00a      	b.n	800057c <ST7735_FillRectangle+0xbc>
            HAL_SPI_Transmit(&ST7735_SPI_PORT, data, sizeof(data), HAL_MAX_DELAY);
 8000566:	f107 010c 	add.w	r1, r7, #12
 800056a:	f04f 33ff 	mov.w	r3, #4294967295
 800056e:	2202      	movs	r2, #2
 8000570:	480b      	ldr	r0, [pc, #44]	; (80005a0 <ST7735_FillRectangle+0xe0>)
 8000572:	f002 fb2b 	bl	8002bcc <HAL_SPI_Transmit>
        for(x = w; x > 0; x--) {
 8000576:	88fb      	ldrh	r3, [r7, #6]
 8000578:	3b01      	subs	r3, #1
 800057a:	80fb      	strh	r3, [r7, #6]
 800057c:	88fb      	ldrh	r3, [r7, #6]
 800057e:	2b00      	cmp	r3, #0
 8000580:	d1f1      	bne.n	8000566 <ST7735_FillRectangle+0xa6>
    for(y = h; y > 0; y--) {
 8000582:	88bb      	ldrh	r3, [r7, #4]
 8000584:	3b01      	subs	r3, #1
 8000586:	80bb      	strh	r3, [r7, #4]
 8000588:	88bb      	ldrh	r3, [r7, #4]
 800058a:	2b00      	cmp	r3, #0
 800058c:	d1e8      	bne.n	8000560 <ST7735_FillRectangle+0xa0>
        }
    }

    ST7735_Unselect();
 800058e:	f7ff fde9 	bl	8000164 <ST7735_Unselect>
 8000592:	e000      	b.n	8000596 <ST7735_FillRectangle+0xd6>
    if((x >= ST7735_WIDTH) || (y >= ST7735_HEIGHT)) return;
 8000594:	bf00      	nop
}
 8000596:	3714      	adds	r7, #20
 8000598:	46bd      	mov	sp, r7
 800059a:	bd90      	pop	{r4, r7, pc}
 800059c:	40010800 	.word	0x40010800
 80005a0:	2000009c 	.word	0x2000009c

080005a4 <ST7735_FillScreen>:

    free(line);
    ST7735_Unselect();
}

void ST7735_FillScreen(uint16_t color) {
 80005a4:	b580      	push	{r7, lr}
 80005a6:	b084      	sub	sp, #16
 80005a8:	af02      	add	r7, sp, #8
 80005aa:	4603      	mov	r3, r0
 80005ac:	80fb      	strh	r3, [r7, #6]
    ST7735_FillRectangle(0, 0, ST7735_WIDTH, ST7735_HEIGHT, color);
 80005ae:	88fb      	ldrh	r3, [r7, #6]
 80005b0:	9300      	str	r3, [sp, #0]
 80005b2:	23a0      	movs	r3, #160	; 0xa0
 80005b4:	2280      	movs	r2, #128	; 0x80
 80005b6:	2100      	movs	r1, #0
 80005b8:	2000      	movs	r0, #0
 80005ba:	f7ff ff81 	bl	80004c0 <ST7735_FillRectangle>
}
 80005be:	bf00      	nop
 80005c0:	3708      	adds	r7, #8
 80005c2:	46bd      	mov	sp, r7
 80005c4:	bd80      	pop	{r7, pc}
	...

080005c8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005c8:	b580      	push	{r7, lr}
 80005ca:	b08a      	sub	sp, #40	; 0x28
 80005cc:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005ce:	f000 fc57 	bl	8000e80 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005d2:	f000 fa11 	bl	80009f8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005d6:	f000 fae5 	bl	8000ba4 <MX_GPIO_Init>
  MX_SPI1_Init();
 80005da:	f000 faab 	bl	8000b34 <MX_SPI1_Init>
  MX_RTC_Init();
 80005de:	f000 fa5f 	bl	8000aa0 <MX_RTC_Init>

  /* USER CODE BEGIN 2 */

  ST7735_Init();
 80005e2:	f7ff fe91 	bl	8000308 <ST7735_Init>
  ST7735_FillScreen(ST7735_BLACK);
 80005e6:	2000      	movs	r0, #0
 80005e8:	f7ff ffdc 	bl	80005a4 <ST7735_FillScreen>
  ST7735_WriteString(20,15,"Digital Clock",Font_7x10,ST7735_WHITE,ST7735_BLACK);
 80005ec:	4bb0      	ldr	r3, [pc, #704]	; (80008b0 <main+0x2e8>)
 80005ee:	2200      	movs	r2, #0
 80005f0:	9202      	str	r2, [sp, #8]
 80005f2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80005f6:	9201      	str	r2, [sp, #4]
 80005f8:	685a      	ldr	r2, [r3, #4]
 80005fa:	9200      	str	r2, [sp, #0]
 80005fc:	681b      	ldr	r3, [r3, #0]
 80005fe:	4aad      	ldr	r2, [pc, #692]	; (80008b4 <main+0x2ec>)
 8000600:	210f      	movs	r1, #15
 8000602:	2014      	movs	r0, #20
 8000604:	f7ff ff11 	bl	800042a <ST7735_WriteString>

  	char str_Time[] = "";
 8000608:	2300      	movs	r3, #0
 800060a:	753b      	strb	r3, [r7, #20]
    char str_Year[] = "";
 800060c:	2300      	movs	r3, #0
 800060e:	743b      	strb	r3, [r7, #16]
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	   /* USER CODE BEGIN 3 */
	  HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 8000610:	f107 0308 	add.w	r3, r7, #8
 8000614:	2200      	movs	r2, #0
 8000616:	4619      	mov	r1, r3
 8000618:	48a7      	ldr	r0, [pc, #668]	; (80008b8 <main+0x2f0>)
 800061a:	f001 fdcf 	bl	80021bc <HAL_RTC_GetTime>
	  sprintf(str_Time,"%02d:%02d:%02d",sTime.Hours,sTime.Minutes,sTime.Seconds);
 800061e:	7a3b      	ldrb	r3, [r7, #8]
 8000620:	461a      	mov	r2, r3
 8000622:	7a7b      	ldrb	r3, [r7, #9]
 8000624:	4619      	mov	r1, r3
 8000626:	7abb      	ldrb	r3, [r7, #10]
 8000628:	f107 0014 	add.w	r0, r7, #20
 800062c:	9300      	str	r3, [sp, #0]
 800062e:	460b      	mov	r3, r1
 8000630:	49a2      	ldr	r1, [pc, #648]	; (80008bc <main+0x2f4>)
 8000632:	f002 fd61 	bl	80030f8 <siprintf>
	  ST7735_WriteString(20,40,str_Time,Font_11x18,ST7735_RED,ST7735_BLACK);
 8000636:	4ba2      	ldr	r3, [pc, #648]	; (80008c0 <main+0x2f8>)
 8000638:	f107 0114 	add.w	r1, r7, #20
 800063c:	2200      	movs	r2, #0
 800063e:	9202      	str	r2, [sp, #8]
 8000640:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 8000644:	9201      	str	r2, [sp, #4]
 8000646:	685a      	ldr	r2, [r3, #4]
 8000648:	9200      	str	r2, [sp, #0]
 800064a:	681b      	ldr	r3, [r3, #0]
 800064c:	460a      	mov	r2, r1
 800064e:	2128      	movs	r1, #40	; 0x28
 8000650:	2014      	movs	r0, #20
 8000652:	f7ff feea 	bl	800042a <ST7735_WriteString>


	  HAL_RTC_GetDate(&hrtc, &sDate, RTC_FORMAT_BIN);
 8000656:	1d3b      	adds	r3, r7, #4
 8000658:	2200      	movs	r2, #0
 800065a:	4619      	mov	r1, r3
 800065c:	4896      	ldr	r0, [pc, #600]	; (80008b8 <main+0x2f0>)
 800065e:	f001 ff3b 	bl	80024d8 <HAL_RTC_GetDate>
	  sprintf(date,"%02d",sDate.Date);
 8000662:	79bb      	ldrb	r3, [r7, #6]
 8000664:	461a      	mov	r2, r3
 8000666:	f107 030c 	add.w	r3, r7, #12
 800066a:	4996      	ldr	r1, [pc, #600]	; (80008c4 <main+0x2fc>)
 800066c:	4618      	mov	r0, r3
 800066e:	f002 fd43 	bl	80030f8 <siprintf>
	  sprintf(str_Year,"%02d",2000+sDate.Year);
 8000672:	79fb      	ldrb	r3, [r7, #7]
 8000674:	f503 62fa 	add.w	r2, r3, #2000	; 0x7d0
 8000678:	f107 0310 	add.w	r3, r7, #16
 800067c:	4991      	ldr	r1, [pc, #580]	; (80008c4 <main+0x2fc>)
 800067e:	4618      	mov	r0, r3
 8000680:	f002 fd3a 	bl	80030f8 <siprintf>
	  ST7735_WriteString(10,75,date,Font_11x18,ST7735_CYAN,ST7735_BLACK);
 8000684:	4b8e      	ldr	r3, [pc, #568]	; (80008c0 <main+0x2f8>)
 8000686:	f107 010c 	add.w	r1, r7, #12
 800068a:	2200      	movs	r2, #0
 800068c:	9202      	str	r2, [sp, #8]
 800068e:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8000692:	9201      	str	r2, [sp, #4]
 8000694:	685a      	ldr	r2, [r3, #4]
 8000696:	9200      	str	r2, [sp, #0]
 8000698:	681b      	ldr	r3, [r3, #0]
 800069a:	460a      	mov	r2, r1
 800069c:	214b      	movs	r1, #75	; 0x4b
 800069e:	200a      	movs	r0, #10
 80006a0:	f7ff fec3 	bl	800042a <ST7735_WriteString>
	  ST7735_WriteString(80,75,str_Year,Font_11x18,ST7735_CYAN,ST7735_BLACK);
 80006a4:	4b86      	ldr	r3, [pc, #536]	; (80008c0 <main+0x2f8>)
 80006a6:	f107 0110 	add.w	r1, r7, #16
 80006aa:	2200      	movs	r2, #0
 80006ac:	9202      	str	r2, [sp, #8]
 80006ae:	f240 72ff 	movw	r2, #2047	; 0x7ff
 80006b2:	9201      	str	r2, [sp, #4]
 80006b4:	685a      	ldr	r2, [r3, #4]
 80006b6:	9200      	str	r2, [sp, #0]
 80006b8:	681b      	ldr	r3, [r3, #0]
 80006ba:	460a      	mov	r2, r1
 80006bc:	214b      	movs	r1, #75	; 0x4b
 80006be:	2050      	movs	r0, #80	; 0x50
 80006c0:	f7ff feb3 	bl	800042a <ST7735_WriteString>

	  switch (sDate.Month)
 80006c4:	797b      	ldrb	r3, [r7, #5]
 80006c6:	3b01      	subs	r3, #1
 80006c8:	2b11      	cmp	r3, #17
 80006ca:	f200 80db 	bhi.w	8000884 <main+0x2bc>
 80006ce:	a201      	add	r2, pc, #4	; (adr r2, 80006d4 <main+0x10c>)
 80006d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80006d4:	0800071d 	.word	0x0800071d
 80006d8:	0800073b 	.word	0x0800073b
 80006dc:	08000759 	.word	0x08000759
 80006e0:	08000777 	.word	0x08000777
 80006e4:	08000795 	.word	0x08000795
 80006e8:	080007b3 	.word	0x080007b3
 80006ec:	080007d1 	.word	0x080007d1
 80006f0:	080007ef 	.word	0x080007ef
 80006f4:	0800080d 	.word	0x0800080d
 80006f8:	08000885 	.word	0x08000885
 80006fc:	08000885 	.word	0x08000885
 8000700:	08000885 	.word	0x08000885
 8000704:	08000885 	.word	0x08000885
 8000708:	08000885 	.word	0x08000885
 800070c:	08000885 	.word	0x08000885
 8000710:	0800082b 	.word	0x0800082b
 8000714:	08000849 	.word	0x08000849
 8000718:	08000867 	.word	0x08000867
		{
			case RTC_MONTH_JANUARY:
				ST7735_WriteString(40,75,"Jan",Font_11x18,ST7735_CYAN,ST7735_BLACK);
 800071c:	4b68      	ldr	r3, [pc, #416]	; (80008c0 <main+0x2f8>)
 800071e:	2200      	movs	r2, #0
 8000720:	9202      	str	r2, [sp, #8]
 8000722:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8000726:	9201      	str	r2, [sp, #4]
 8000728:	685a      	ldr	r2, [r3, #4]
 800072a:	9200      	str	r2, [sp, #0]
 800072c:	681b      	ldr	r3, [r3, #0]
 800072e:	4a66      	ldr	r2, [pc, #408]	; (80008c8 <main+0x300>)
 8000730:	214b      	movs	r1, #75	; 0x4b
 8000732:	2028      	movs	r0, #40	; 0x28
 8000734:	f7ff fe79 	bl	800042a <ST7735_WriteString>
				break;
 8000738:	e0a5      	b.n	8000886 <main+0x2be>
			case RTC_MONTH_FEBRUARY:
				ST7735_WriteString(40,75,"Feb",Font_11x18,ST7735_CYAN,ST7735_BLACK);
 800073a:	4b61      	ldr	r3, [pc, #388]	; (80008c0 <main+0x2f8>)
 800073c:	2200      	movs	r2, #0
 800073e:	9202      	str	r2, [sp, #8]
 8000740:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8000744:	9201      	str	r2, [sp, #4]
 8000746:	685a      	ldr	r2, [r3, #4]
 8000748:	9200      	str	r2, [sp, #0]
 800074a:	681b      	ldr	r3, [r3, #0]
 800074c:	4a5f      	ldr	r2, [pc, #380]	; (80008cc <main+0x304>)
 800074e:	214b      	movs	r1, #75	; 0x4b
 8000750:	2028      	movs	r0, #40	; 0x28
 8000752:	f7ff fe6a 	bl	800042a <ST7735_WriteString>
				break;
 8000756:	e096      	b.n	8000886 <main+0x2be>
			case RTC_MONTH_MARCH:
				ST7735_WriteString(40,75,"Mar",Font_11x18,ST7735_CYAN,ST7735_BLACK);
 8000758:	4b59      	ldr	r3, [pc, #356]	; (80008c0 <main+0x2f8>)
 800075a:	2200      	movs	r2, #0
 800075c:	9202      	str	r2, [sp, #8]
 800075e:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8000762:	9201      	str	r2, [sp, #4]
 8000764:	685a      	ldr	r2, [r3, #4]
 8000766:	9200      	str	r2, [sp, #0]
 8000768:	681b      	ldr	r3, [r3, #0]
 800076a:	4a59      	ldr	r2, [pc, #356]	; (80008d0 <main+0x308>)
 800076c:	214b      	movs	r1, #75	; 0x4b
 800076e:	2028      	movs	r0, #40	; 0x28
 8000770:	f7ff fe5b 	bl	800042a <ST7735_WriteString>
				break;
 8000774:	e087      	b.n	8000886 <main+0x2be>
			case RTC_MONTH_APRIL:
				ST7735_WriteString(40,75,"Apr",Font_11x18,ST7735_CYAN,ST7735_BLACK);
 8000776:	4b52      	ldr	r3, [pc, #328]	; (80008c0 <main+0x2f8>)
 8000778:	2200      	movs	r2, #0
 800077a:	9202      	str	r2, [sp, #8]
 800077c:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8000780:	9201      	str	r2, [sp, #4]
 8000782:	685a      	ldr	r2, [r3, #4]
 8000784:	9200      	str	r2, [sp, #0]
 8000786:	681b      	ldr	r3, [r3, #0]
 8000788:	4a52      	ldr	r2, [pc, #328]	; (80008d4 <main+0x30c>)
 800078a:	214b      	movs	r1, #75	; 0x4b
 800078c:	2028      	movs	r0, #40	; 0x28
 800078e:	f7ff fe4c 	bl	800042a <ST7735_WriteString>
				break;
 8000792:	e078      	b.n	8000886 <main+0x2be>
			case RTC_MONTH_MAY:
				ST7735_WriteString(40,75,"May",Font_11x18,ST7735_CYAN,ST7735_BLACK);
 8000794:	4b4a      	ldr	r3, [pc, #296]	; (80008c0 <main+0x2f8>)
 8000796:	2200      	movs	r2, #0
 8000798:	9202      	str	r2, [sp, #8]
 800079a:	f240 72ff 	movw	r2, #2047	; 0x7ff
 800079e:	9201      	str	r2, [sp, #4]
 80007a0:	685a      	ldr	r2, [r3, #4]
 80007a2:	9200      	str	r2, [sp, #0]
 80007a4:	681b      	ldr	r3, [r3, #0]
 80007a6:	4a4c      	ldr	r2, [pc, #304]	; (80008d8 <main+0x310>)
 80007a8:	214b      	movs	r1, #75	; 0x4b
 80007aa:	2028      	movs	r0, #40	; 0x28
 80007ac:	f7ff fe3d 	bl	800042a <ST7735_WriteString>
				break;
 80007b0:	e069      	b.n	8000886 <main+0x2be>
			case RTC_MONTH_JUNE:
				ST7735_WriteString(40,75,"Jun",Font_11x18,ST7735_CYAN,ST7735_BLACK);
 80007b2:	4b43      	ldr	r3, [pc, #268]	; (80008c0 <main+0x2f8>)
 80007b4:	2200      	movs	r2, #0
 80007b6:	9202      	str	r2, [sp, #8]
 80007b8:	f240 72ff 	movw	r2, #2047	; 0x7ff
 80007bc:	9201      	str	r2, [sp, #4]
 80007be:	685a      	ldr	r2, [r3, #4]
 80007c0:	9200      	str	r2, [sp, #0]
 80007c2:	681b      	ldr	r3, [r3, #0]
 80007c4:	4a45      	ldr	r2, [pc, #276]	; (80008dc <main+0x314>)
 80007c6:	214b      	movs	r1, #75	; 0x4b
 80007c8:	2028      	movs	r0, #40	; 0x28
 80007ca:	f7ff fe2e 	bl	800042a <ST7735_WriteString>
				break;
 80007ce:	e05a      	b.n	8000886 <main+0x2be>
			case RTC_MONTH_JULY:
				ST7735_WriteString(40,75,"Jul",Font_11x18,ST7735_CYAN,ST7735_BLACK);
 80007d0:	4b3b      	ldr	r3, [pc, #236]	; (80008c0 <main+0x2f8>)
 80007d2:	2200      	movs	r2, #0
 80007d4:	9202      	str	r2, [sp, #8]
 80007d6:	f240 72ff 	movw	r2, #2047	; 0x7ff
 80007da:	9201      	str	r2, [sp, #4]
 80007dc:	685a      	ldr	r2, [r3, #4]
 80007de:	9200      	str	r2, [sp, #0]
 80007e0:	681b      	ldr	r3, [r3, #0]
 80007e2:	4a3f      	ldr	r2, [pc, #252]	; (80008e0 <main+0x318>)
 80007e4:	214b      	movs	r1, #75	; 0x4b
 80007e6:	2028      	movs	r0, #40	; 0x28
 80007e8:	f7ff fe1f 	bl	800042a <ST7735_WriteString>
				break;
 80007ec:	e04b      	b.n	8000886 <main+0x2be>
			case RTC_MONTH_AUGUST:
				ST7735_WriteString(40,75,"Aug",Font_11x18,ST7735_CYAN,ST7735_BLACK);
 80007ee:	4b34      	ldr	r3, [pc, #208]	; (80008c0 <main+0x2f8>)
 80007f0:	2200      	movs	r2, #0
 80007f2:	9202      	str	r2, [sp, #8]
 80007f4:	f240 72ff 	movw	r2, #2047	; 0x7ff
 80007f8:	9201      	str	r2, [sp, #4]
 80007fa:	685a      	ldr	r2, [r3, #4]
 80007fc:	9200      	str	r2, [sp, #0]
 80007fe:	681b      	ldr	r3, [r3, #0]
 8000800:	4a38      	ldr	r2, [pc, #224]	; (80008e4 <main+0x31c>)
 8000802:	214b      	movs	r1, #75	; 0x4b
 8000804:	2028      	movs	r0, #40	; 0x28
 8000806:	f7ff fe10 	bl	800042a <ST7735_WriteString>
				break;
 800080a:	e03c      	b.n	8000886 <main+0x2be>
			case RTC_MONTH_SEPTEMBER:
				ST7735_WriteString(40,75,"Sept",Font_11x18,ST7735_CYAN,ST7735_BLACK);
 800080c:	4b2c      	ldr	r3, [pc, #176]	; (80008c0 <main+0x2f8>)
 800080e:	2200      	movs	r2, #0
 8000810:	9202      	str	r2, [sp, #8]
 8000812:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8000816:	9201      	str	r2, [sp, #4]
 8000818:	685a      	ldr	r2, [r3, #4]
 800081a:	9200      	str	r2, [sp, #0]
 800081c:	681b      	ldr	r3, [r3, #0]
 800081e:	4a32      	ldr	r2, [pc, #200]	; (80008e8 <main+0x320>)
 8000820:	214b      	movs	r1, #75	; 0x4b
 8000822:	2028      	movs	r0, #40	; 0x28
 8000824:	f7ff fe01 	bl	800042a <ST7735_WriteString>
				break;
 8000828:	e02d      	b.n	8000886 <main+0x2be>
			case RTC_MONTH_OCTOBER:
				ST7735_WriteString(40,75,"Oct",Font_11x18,ST7735_CYAN,ST7735_BLACK);
 800082a:	4b25      	ldr	r3, [pc, #148]	; (80008c0 <main+0x2f8>)
 800082c:	2200      	movs	r2, #0
 800082e:	9202      	str	r2, [sp, #8]
 8000830:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8000834:	9201      	str	r2, [sp, #4]
 8000836:	685a      	ldr	r2, [r3, #4]
 8000838:	9200      	str	r2, [sp, #0]
 800083a:	681b      	ldr	r3, [r3, #0]
 800083c:	4a2b      	ldr	r2, [pc, #172]	; (80008ec <main+0x324>)
 800083e:	214b      	movs	r1, #75	; 0x4b
 8000840:	2028      	movs	r0, #40	; 0x28
 8000842:	f7ff fdf2 	bl	800042a <ST7735_WriteString>
				break;
 8000846:	e01e      	b.n	8000886 <main+0x2be>
			case RTC_MONTH_NOVEMBER:
				ST7735_WriteString(40,75,"Nov",Font_11x18,ST7735_CYAN,ST7735_BLACK);
 8000848:	4b1d      	ldr	r3, [pc, #116]	; (80008c0 <main+0x2f8>)
 800084a:	2200      	movs	r2, #0
 800084c:	9202      	str	r2, [sp, #8]
 800084e:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8000852:	9201      	str	r2, [sp, #4]
 8000854:	685a      	ldr	r2, [r3, #4]
 8000856:	9200      	str	r2, [sp, #0]
 8000858:	681b      	ldr	r3, [r3, #0]
 800085a:	4a25      	ldr	r2, [pc, #148]	; (80008f0 <main+0x328>)
 800085c:	214b      	movs	r1, #75	; 0x4b
 800085e:	2028      	movs	r0, #40	; 0x28
 8000860:	f7ff fde3 	bl	800042a <ST7735_WriteString>
				break;
 8000864:	e00f      	b.n	8000886 <main+0x2be>
			case RTC_MONTH_DECEMBER:
				ST7735_WriteString(40,75,"Dec",Font_11x18,ST7735_CYAN,ST7735_BLACK);
 8000866:	4b16      	ldr	r3, [pc, #88]	; (80008c0 <main+0x2f8>)
 8000868:	2200      	movs	r2, #0
 800086a:	9202      	str	r2, [sp, #8]
 800086c:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8000870:	9201      	str	r2, [sp, #4]
 8000872:	685a      	ldr	r2, [r3, #4]
 8000874:	9200      	str	r2, [sp, #0]
 8000876:	681b      	ldr	r3, [r3, #0]
 8000878:	4a1e      	ldr	r2, [pc, #120]	; (80008f4 <main+0x32c>)
 800087a:	214b      	movs	r1, #75	; 0x4b
 800087c:	2028      	movs	r0, #40	; 0x28
 800087e:	f7ff fdd4 	bl	800042a <ST7735_WriteString>
				break;
 8000882:	e000      	b.n	8000886 <main+0x2be>
			default:
				break;
 8000884:	bf00      	nop
		}

	  switch (sDate.WeekDay)
 8000886:	793b      	ldrb	r3, [r7, #4]
 8000888:	2b06      	cmp	r3, #6
 800088a:	f200 809e 	bhi.w	80009ca <main+0x402>
 800088e:	a201      	add	r2, pc, #4	; (adr r2, 8000894 <main+0x2cc>)
 8000890:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000894:	080009ad 	.word	0x080009ad
 8000898:	080008f9 	.word	0x080008f9
 800089c:	08000917 	.word	0x08000917
 80008a0:	08000935 	.word	0x08000935
 80008a4:	08000953 	.word	0x08000953
 80008a8:	08000971 	.word	0x08000971
 80008ac:	0800098f 	.word	0x0800098f
 80008b0:	20000000 	.word	0x20000000
 80008b4:	0800391c 	.word	0x0800391c
 80008b8:	20000088 	.word	0x20000088
 80008bc:	0800392c 	.word	0x0800392c
 80008c0:	20000008 	.word	0x20000008
 80008c4:	0800393c 	.word	0x0800393c
 80008c8:	08003944 	.word	0x08003944
 80008cc:	08003948 	.word	0x08003948
 80008d0:	0800394c 	.word	0x0800394c
 80008d4:	08003950 	.word	0x08003950
 80008d8:	08003954 	.word	0x08003954
 80008dc:	08003958 	.word	0x08003958
 80008e0:	0800395c 	.word	0x0800395c
 80008e4:	08003960 	.word	0x08003960
 80008e8:	08003964 	.word	0x08003964
 80008ec:	0800396c 	.word	0x0800396c
 80008f0:	08003970 	.word	0x08003970
 80008f4:	08003974 	.word	0x08003974
	   	{
	   		case RTC_WEEKDAY_MONDAY:
	   			ST7735_WriteString(25,110,"Monday",Font_11x18,ST7735_YELLOW,ST7735_BLACK);
 80008f8:	4b37      	ldr	r3, [pc, #220]	; (80009d8 <main+0x410>)
 80008fa:	2200      	movs	r2, #0
 80008fc:	9202      	str	r2, [sp, #8]
 80008fe:	f64f 72e0 	movw	r2, #65504	; 0xffe0
 8000902:	9201      	str	r2, [sp, #4]
 8000904:	685a      	ldr	r2, [r3, #4]
 8000906:	9200      	str	r2, [sp, #0]
 8000908:	681b      	ldr	r3, [r3, #0]
 800090a:	4a34      	ldr	r2, [pc, #208]	; (80009dc <main+0x414>)
 800090c:	216e      	movs	r1, #110	; 0x6e
 800090e:	2019      	movs	r0, #25
 8000910:	f7ff fd8b 	bl	800042a <ST7735_WriteString>
	   			break;
 8000914:	e05a      	b.n	80009cc <main+0x404>
	   		case RTC_WEEKDAY_TUESDAY:
	   			ST7735_WriteString(25,110,"Tuesday",Font_11x18,ST7735_YELLOW,ST7735_BLACK);
 8000916:	4b30      	ldr	r3, [pc, #192]	; (80009d8 <main+0x410>)
 8000918:	2200      	movs	r2, #0
 800091a:	9202      	str	r2, [sp, #8]
 800091c:	f64f 72e0 	movw	r2, #65504	; 0xffe0
 8000920:	9201      	str	r2, [sp, #4]
 8000922:	685a      	ldr	r2, [r3, #4]
 8000924:	9200      	str	r2, [sp, #0]
 8000926:	681b      	ldr	r3, [r3, #0]
 8000928:	4a2d      	ldr	r2, [pc, #180]	; (80009e0 <main+0x418>)
 800092a:	216e      	movs	r1, #110	; 0x6e
 800092c:	2019      	movs	r0, #25
 800092e:	f7ff fd7c 	bl	800042a <ST7735_WriteString>
	   			break;
 8000932:	e04b      	b.n	80009cc <main+0x404>
	   		case RTC_WEEKDAY_WEDNESDAY:
	   		 	ST7735_WriteString(25,110,"Wednesday",Font_11x18,ST7735_YELLOW,ST7735_BLACK);
 8000934:	4b28      	ldr	r3, [pc, #160]	; (80009d8 <main+0x410>)
 8000936:	2200      	movs	r2, #0
 8000938:	9202      	str	r2, [sp, #8]
 800093a:	f64f 72e0 	movw	r2, #65504	; 0xffe0
 800093e:	9201      	str	r2, [sp, #4]
 8000940:	685a      	ldr	r2, [r3, #4]
 8000942:	9200      	str	r2, [sp, #0]
 8000944:	681b      	ldr	r3, [r3, #0]
 8000946:	4a27      	ldr	r2, [pc, #156]	; (80009e4 <main+0x41c>)
 8000948:	216e      	movs	r1, #110	; 0x6e
 800094a:	2019      	movs	r0, #25
 800094c:	f7ff fd6d 	bl	800042a <ST7735_WriteString>
	   		 	break;
 8000950:	e03c      	b.n	80009cc <main+0x404>
	  		case RTC_WEEKDAY_THURSDAY:
	  			ST7735_WriteString(25,110,"Thursday",Font_11x18,ST7735_YELLOW,ST7735_BLACK);
 8000952:	4b21      	ldr	r3, [pc, #132]	; (80009d8 <main+0x410>)
 8000954:	2200      	movs	r2, #0
 8000956:	9202      	str	r2, [sp, #8]
 8000958:	f64f 72e0 	movw	r2, #65504	; 0xffe0
 800095c:	9201      	str	r2, [sp, #4]
 800095e:	685a      	ldr	r2, [r3, #4]
 8000960:	9200      	str	r2, [sp, #0]
 8000962:	681b      	ldr	r3, [r3, #0]
 8000964:	4a20      	ldr	r2, [pc, #128]	; (80009e8 <main+0x420>)
 8000966:	216e      	movs	r1, #110	; 0x6e
 8000968:	2019      	movs	r0, #25
 800096a:	f7ff fd5e 	bl	800042a <ST7735_WriteString>
	  			break;
 800096e:	e02d      	b.n	80009cc <main+0x404>
	  		case RTC_WEEKDAY_FRIDAY:
	  			ST7735_WriteString(25,110,"Friday",Font_11x18,ST7735_YELLOW,ST7735_BLACK);
 8000970:	4b19      	ldr	r3, [pc, #100]	; (80009d8 <main+0x410>)
 8000972:	2200      	movs	r2, #0
 8000974:	9202      	str	r2, [sp, #8]
 8000976:	f64f 72e0 	movw	r2, #65504	; 0xffe0
 800097a:	9201      	str	r2, [sp, #4]
 800097c:	685a      	ldr	r2, [r3, #4]
 800097e:	9200      	str	r2, [sp, #0]
 8000980:	681b      	ldr	r3, [r3, #0]
 8000982:	4a1a      	ldr	r2, [pc, #104]	; (80009ec <main+0x424>)
 8000984:	216e      	movs	r1, #110	; 0x6e
 8000986:	2019      	movs	r0, #25
 8000988:	f7ff fd4f 	bl	800042a <ST7735_WriteString>
	  			break;
 800098c:	e01e      	b.n	80009cc <main+0x404>
	  		case RTC_WEEKDAY_SATURDAY:
	  			ST7735_WriteString(25,110,"Saturday",Font_11x18,ST7735_YELLOW,ST7735_BLACK);
 800098e:	4b12      	ldr	r3, [pc, #72]	; (80009d8 <main+0x410>)
 8000990:	2200      	movs	r2, #0
 8000992:	9202      	str	r2, [sp, #8]
 8000994:	f64f 72e0 	movw	r2, #65504	; 0xffe0
 8000998:	9201      	str	r2, [sp, #4]
 800099a:	685a      	ldr	r2, [r3, #4]
 800099c:	9200      	str	r2, [sp, #0]
 800099e:	681b      	ldr	r3, [r3, #0]
 80009a0:	4a13      	ldr	r2, [pc, #76]	; (80009f0 <main+0x428>)
 80009a2:	216e      	movs	r1, #110	; 0x6e
 80009a4:	2019      	movs	r0, #25
 80009a6:	f7ff fd40 	bl	800042a <ST7735_WriteString>
	  			break;
 80009aa:	e00f      	b.n	80009cc <main+0x404>
	  		case RTC_WEEKDAY_SUNDAY:
	  			ST7735_WriteString(25,110,"Sunday",Font_11x18,ST7735_YELLOW,ST7735_BLACK);
 80009ac:	4b0a      	ldr	r3, [pc, #40]	; (80009d8 <main+0x410>)
 80009ae:	2200      	movs	r2, #0
 80009b0:	9202      	str	r2, [sp, #8]
 80009b2:	f64f 72e0 	movw	r2, #65504	; 0xffe0
 80009b6:	9201      	str	r2, [sp, #4]
 80009b8:	685a      	ldr	r2, [r3, #4]
 80009ba:	9200      	str	r2, [sp, #0]
 80009bc:	681b      	ldr	r3, [r3, #0]
 80009be:	4a0d      	ldr	r2, [pc, #52]	; (80009f4 <main+0x42c>)
 80009c0:	216e      	movs	r1, #110	; 0x6e
 80009c2:	2019      	movs	r0, #25
 80009c4:	f7ff fd31 	bl	800042a <ST7735_WriteString>
	  			break;
 80009c8:	e000      	b.n	80009cc <main+0x404>
	  		default:
	  			break;
 80009ca:	bf00      	nop
	   	}

	  HAL_Delay(500);
 80009cc:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80009d0:	f000 fab8 	bl	8000f44 <HAL_Delay>
  {
 80009d4:	e61c      	b.n	8000610 <main+0x48>
 80009d6:	bf00      	nop
 80009d8:	20000008 	.word	0x20000008
 80009dc:	08003978 	.word	0x08003978
 80009e0:	08003980 	.word	0x08003980
 80009e4:	08003988 	.word	0x08003988
 80009e8:	08003994 	.word	0x08003994
 80009ec:	080039a0 	.word	0x080039a0
 80009f0:	080039a8 	.word	0x080039a8
 80009f4:	080039b4 	.word	0x080039b4

080009f8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80009f8:	b580      	push	{r7, lr}
 80009fa:	b094      	sub	sp, #80	; 0x50
 80009fc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80009fe:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000a02:	2228      	movs	r2, #40	; 0x28
 8000a04:	2100      	movs	r1, #0
 8000a06:	4618      	mov	r0, r3
 8000a08:	f002 fb96 	bl	8003138 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a0c:	f107 0314 	add.w	r3, r7, #20
 8000a10:	2200      	movs	r2, #0
 8000a12:	601a      	str	r2, [r3, #0]
 8000a14:	605a      	str	r2, [r3, #4]
 8000a16:	609a      	str	r2, [r3, #8]
 8000a18:	60da      	str	r2, [r3, #12]
 8000a1a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000a1c:	1d3b      	adds	r3, r7, #4
 8000a1e:	2200      	movs	r2, #0
 8000a20:	601a      	str	r2, [r3, #0]
 8000a22:	605a      	str	r2, [r3, #4]
 8000a24:	609a      	str	r2, [r3, #8]
 8000a26:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 8000a28:	230a      	movs	r3, #10
 8000a2a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000a2c:	2301      	movs	r3, #1
 8000a2e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000a30:	2310      	movs	r3, #16
 8000a32:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000a34:	2301      	movs	r3, #1
 8000a36:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000a38:	2300      	movs	r3, #0
 8000a3a:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a3c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000a40:	4618      	mov	r0, r3
 8000a42:	f000 fd2f 	bl	80014a4 <HAL_RCC_OscConfig>
 8000a46:	4603      	mov	r3, r0
 8000a48:	2b00      	cmp	r3, #0
 8000a4a:	d001      	beq.n	8000a50 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000a4c:	f000 f8f4 	bl	8000c38 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a50:	230f      	movs	r3, #15
 8000a52:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000a54:	2300      	movs	r3, #0
 8000a56:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a58:	2300      	movs	r3, #0
 8000a5a:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000a5c:	2300      	movs	r3, #0
 8000a5e:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000a60:	2300      	movs	r3, #0
 8000a62:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000a64:	f107 0314 	add.w	r3, r7, #20
 8000a68:	2100      	movs	r1, #0
 8000a6a:	4618      	mov	r0, r3
 8000a6c:	f000 ff9c 	bl	80019a8 <HAL_RCC_ClockConfig>
 8000a70:	4603      	mov	r3, r0
 8000a72:	2b00      	cmp	r3, #0
 8000a74:	d001      	beq.n	8000a7a <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000a76:	f000 f8df 	bl	8000c38 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8000a7a:	2301      	movs	r3, #1
 8000a7c:	607b      	str	r3, [r7, #4]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8000a7e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000a82:	60bb      	str	r3, [r7, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000a84:	1d3b      	adds	r3, r7, #4
 8000a86:	4618      	mov	r0, r3
 8000a88:	f001 f908 	bl	8001c9c <HAL_RCCEx_PeriphCLKConfig>
 8000a8c:	4603      	mov	r3, r0
 8000a8e:	2b00      	cmp	r3, #0
 8000a90:	d001      	beq.n	8000a96 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8000a92:	f000 f8d1 	bl	8000c38 <Error_Handler>
  }
}
 8000a96:	bf00      	nop
 8000a98:	3750      	adds	r7, #80	; 0x50
 8000a9a:	46bd      	mov	sp, r7
 8000a9c:	bd80      	pop	{r7, pc}
	...

08000aa0 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8000aa0:	b580      	push	{r7, lr}
 8000aa2:	b082      	sub	sp, #8
 8000aa4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8000aa6:	1d3b      	adds	r3, r7, #4
 8000aa8:	2100      	movs	r1, #0
 8000aaa:	460a      	mov	r2, r1
 8000aac:	801a      	strh	r2, [r3, #0]
 8000aae:	460a      	mov	r2, r1
 8000ab0:	709a      	strb	r2, [r3, #2]
  RTC_DateTypeDef DateToUpdate = {0};
 8000ab2:	2300      	movs	r3, #0
 8000ab4:	603b      	str	r3, [r7, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000ab6:	4b1d      	ldr	r3, [pc, #116]	; (8000b2c <MX_RTC_Init+0x8c>)
 8000ab8:	4a1d      	ldr	r2, [pc, #116]	; (8000b30 <MX_RTC_Init+0x90>)
 8000aba:	601a      	str	r2, [r3, #0]
  hrtc.Init.AsynchPrediv = RTC_AUTO_1_SECOND;
 8000abc:	4b1b      	ldr	r3, [pc, #108]	; (8000b2c <MX_RTC_Init+0x8c>)
 8000abe:	f04f 32ff 	mov.w	r2, #4294967295
 8000ac2:	605a      	str	r2, [r3, #4]
  hrtc.Init.OutPut = RTC_OUTPUTSOURCE_ALARM;
 8000ac4:	4b19      	ldr	r3, [pc, #100]	; (8000b2c <MX_RTC_Init+0x8c>)
 8000ac6:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000aca:	609a      	str	r2, [r3, #8]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000acc:	4817      	ldr	r0, [pc, #92]	; (8000b2c <MX_RTC_Init+0x8c>)
 8000ace:	f001 fa51 	bl	8001f74 <HAL_RTC_Init>
 8000ad2:	4603      	mov	r3, r0
 8000ad4:	2b00      	cmp	r3, #0
 8000ad6:	d001      	beq.n	8000adc <MX_RTC_Init+0x3c>
  {
    Error_Handler();
 8000ad8:	f000 f8ae 	bl	8000c38 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x7;
 8000adc:	2307      	movs	r3, #7
 8000ade:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x51;
 8000ae0:	2351      	movs	r3, #81	; 0x51
 8000ae2:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x40;
 8000ae4:	2340      	movs	r3, #64	; 0x40
 8000ae6:	71bb      	strb	r3, [r7, #6]

  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8000ae8:	1d3b      	adds	r3, r7, #4
 8000aea:	2201      	movs	r2, #1
 8000aec:	4619      	mov	r1, r3
 8000aee:	480f      	ldr	r0, [pc, #60]	; (8000b2c <MX_RTC_Init+0x8c>)
 8000af0:	f001 facc 	bl	800208c <HAL_RTC_SetTime>
 8000af4:	4603      	mov	r3, r0
 8000af6:	2b00      	cmp	r3, #0
 8000af8:	d001      	beq.n	8000afe <MX_RTC_Init+0x5e>
  {
    Error_Handler();
 8000afa:	f000 f89d 	bl	8000c38 <Error_Handler>
  }
  DateToUpdate.WeekDay = RTC_WEEKDAY_TUESDAY;
 8000afe:	2302      	movs	r3, #2
 8000b00:	703b      	strb	r3, [r7, #0]
  DateToUpdate.Month = RTC_MONTH_MARCH;
 8000b02:	2303      	movs	r3, #3
 8000b04:	707b      	strb	r3, [r7, #1]
  DateToUpdate.Date = 0x19;
 8000b06:	2319      	movs	r3, #25
 8000b08:	70bb      	strb	r3, [r7, #2]
  DateToUpdate.Year = 0x24;
 8000b0a:	2324      	movs	r3, #36	; 0x24
 8000b0c:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &DateToUpdate, RTC_FORMAT_BCD) != HAL_OK)
 8000b0e:	463b      	mov	r3, r7
 8000b10:	2201      	movs	r2, #1
 8000b12:	4619      	mov	r1, r3
 8000b14:	4805      	ldr	r0, [pc, #20]	; (8000b2c <MX_RTC_Init+0x8c>)
 8000b16:	f001 fc29 	bl	800236c <HAL_RTC_SetDate>
 8000b1a:	4603      	mov	r3, r0
 8000b1c:	2b00      	cmp	r3, #0
 8000b1e:	d001      	beq.n	8000b24 <MX_RTC_Init+0x84>
  {
    Error_Handler();
 8000b20:	f000 f88a 	bl	8000c38 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8000b24:	bf00      	nop
 8000b26:	3708      	adds	r7, #8
 8000b28:	46bd      	mov	sp, r7
 8000b2a:	bd80      	pop	{r7, pc}
 8000b2c:	20000088 	.word	0x20000088
 8000b30:	40002800 	.word	0x40002800

08000b34 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000b34:	b580      	push	{r7, lr}
 8000b36:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000b38:	4b18      	ldr	r3, [pc, #96]	; (8000b9c <MX_SPI1_Init+0x68>)
 8000b3a:	4a19      	ldr	r2, [pc, #100]	; (8000ba0 <MX_SPI1_Init+0x6c>)
 8000b3c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000b3e:	4b17      	ldr	r3, [pc, #92]	; (8000b9c <MX_SPI1_Init+0x68>)
 8000b40:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000b44:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_1LINE;
 8000b46:	4b15      	ldr	r3, [pc, #84]	; (8000b9c <MX_SPI1_Init+0x68>)
 8000b48:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000b4c:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000b4e:	4b13      	ldr	r3, [pc, #76]	; (8000b9c <MX_SPI1_Init+0x68>)
 8000b50:	2200      	movs	r2, #0
 8000b52:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000b54:	4b11      	ldr	r3, [pc, #68]	; (8000b9c <MX_SPI1_Init+0x68>)
 8000b56:	2200      	movs	r2, #0
 8000b58:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000b5a:	4b10      	ldr	r3, [pc, #64]	; (8000b9c <MX_SPI1_Init+0x68>)
 8000b5c:	2200      	movs	r2, #0
 8000b5e:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000b60:	4b0e      	ldr	r3, [pc, #56]	; (8000b9c <MX_SPI1_Init+0x68>)
 8000b62:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000b66:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8000b68:	4b0c      	ldr	r3, [pc, #48]	; (8000b9c <MX_SPI1_Init+0x68>)
 8000b6a:	2220      	movs	r2, #32
 8000b6c:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000b6e:	4b0b      	ldr	r3, [pc, #44]	; (8000b9c <MX_SPI1_Init+0x68>)
 8000b70:	2200      	movs	r2, #0
 8000b72:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000b74:	4b09      	ldr	r3, [pc, #36]	; (8000b9c <MX_SPI1_Init+0x68>)
 8000b76:	2200      	movs	r2, #0
 8000b78:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000b7a:	4b08      	ldr	r3, [pc, #32]	; (8000b9c <MX_SPI1_Init+0x68>)
 8000b7c:	2200      	movs	r2, #0
 8000b7e:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000b80:	4b06      	ldr	r3, [pc, #24]	; (8000b9c <MX_SPI1_Init+0x68>)
 8000b82:	220a      	movs	r2, #10
 8000b84:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000b86:	4805      	ldr	r0, [pc, #20]	; (8000b9c <MX_SPI1_Init+0x68>)
 8000b88:	f001 ff9c 	bl	8002ac4 <HAL_SPI_Init>
 8000b8c:	4603      	mov	r3, r0
 8000b8e:	2b00      	cmp	r3, #0
 8000b90:	d001      	beq.n	8000b96 <MX_SPI1_Init+0x62>
  {
    Error_Handler();
 8000b92:	f000 f851 	bl	8000c38 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000b96:	bf00      	nop
 8000b98:	bd80      	pop	{r7, pc}
 8000b9a:	bf00      	nop
 8000b9c:	2000009c 	.word	0x2000009c
 8000ba0:	40013000 	.word	0x40013000

08000ba4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000ba4:	b580      	push	{r7, lr}
 8000ba6:	b088      	sub	sp, #32
 8000ba8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000baa:	f107 0310 	add.w	r3, r7, #16
 8000bae:	2200      	movs	r2, #0
 8000bb0:	601a      	str	r2, [r3, #0]
 8000bb2:	605a      	str	r2, [r3, #4]
 8000bb4:	609a      	str	r2, [r3, #8]
 8000bb6:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000bb8:	4b1d      	ldr	r3, [pc, #116]	; (8000c30 <MX_GPIO_Init+0x8c>)
 8000bba:	699b      	ldr	r3, [r3, #24]
 8000bbc:	4a1c      	ldr	r2, [pc, #112]	; (8000c30 <MX_GPIO_Init+0x8c>)
 8000bbe:	f043 0310 	orr.w	r3, r3, #16
 8000bc2:	6193      	str	r3, [r2, #24]
 8000bc4:	4b1a      	ldr	r3, [pc, #104]	; (8000c30 <MX_GPIO_Init+0x8c>)
 8000bc6:	699b      	ldr	r3, [r3, #24]
 8000bc8:	f003 0310 	and.w	r3, r3, #16
 8000bcc:	60fb      	str	r3, [r7, #12]
 8000bce:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000bd0:	4b17      	ldr	r3, [pc, #92]	; (8000c30 <MX_GPIO_Init+0x8c>)
 8000bd2:	699b      	ldr	r3, [r3, #24]
 8000bd4:	4a16      	ldr	r2, [pc, #88]	; (8000c30 <MX_GPIO_Init+0x8c>)
 8000bd6:	f043 0320 	orr.w	r3, r3, #32
 8000bda:	6193      	str	r3, [r2, #24]
 8000bdc:	4b14      	ldr	r3, [pc, #80]	; (8000c30 <MX_GPIO_Init+0x8c>)
 8000bde:	699b      	ldr	r3, [r3, #24]
 8000be0:	f003 0320 	and.w	r3, r3, #32
 8000be4:	60bb      	str	r3, [r7, #8]
 8000be6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000be8:	4b11      	ldr	r3, [pc, #68]	; (8000c30 <MX_GPIO_Init+0x8c>)
 8000bea:	699b      	ldr	r3, [r3, #24]
 8000bec:	4a10      	ldr	r2, [pc, #64]	; (8000c30 <MX_GPIO_Init+0x8c>)
 8000bee:	f043 0304 	orr.w	r3, r3, #4
 8000bf2:	6193      	str	r3, [r2, #24]
 8000bf4:	4b0e      	ldr	r3, [pc, #56]	; (8000c30 <MX_GPIO_Init+0x8c>)
 8000bf6:	699b      	ldr	r3, [r3, #24]
 8000bf8:	f003 0304 	and.w	r3, r3, #4
 8000bfc:	607b      	str	r3, [r7, #4]
 8000bfe:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1|GPIO_PIN_2, GPIO_PIN_RESET);
 8000c00:	2200      	movs	r2, #0
 8000c02:	2106      	movs	r1, #6
 8000c04:	480b      	ldr	r0, [pc, #44]	; (8000c34 <MX_GPIO_Init+0x90>)
 8000c06:	f000 fc29 	bl	800145c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA1 PA2 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2;
 8000c0a:	2306      	movs	r3, #6
 8000c0c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c0e:	2301      	movs	r3, #1
 8000c10:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c12:	2300      	movs	r3, #0
 8000c14:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c16:	2302      	movs	r3, #2
 8000c18:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c1a:	f107 0310 	add.w	r3, r7, #16
 8000c1e:	4619      	mov	r1, r3
 8000c20:	4804      	ldr	r0, [pc, #16]	; (8000c34 <MX_GPIO_Init+0x90>)
 8000c22:	f000 fa97 	bl	8001154 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000c26:	bf00      	nop
 8000c28:	3720      	adds	r7, #32
 8000c2a:	46bd      	mov	sp, r7
 8000c2c:	bd80      	pop	{r7, pc}
 8000c2e:	bf00      	nop
 8000c30:	40021000 	.word	0x40021000
 8000c34:	40010800 	.word	0x40010800

08000c38 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c38:	b480      	push	{r7}
 8000c3a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c3c:	b672      	cpsid	i
}
 8000c3e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c40:	e7fe      	b.n	8000c40 <Error_Handler+0x8>
	...

08000c44 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c44:	b480      	push	{r7}
 8000c46:	b085      	sub	sp, #20
 8000c48:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000c4a:	4b15      	ldr	r3, [pc, #84]	; (8000ca0 <HAL_MspInit+0x5c>)
 8000c4c:	699b      	ldr	r3, [r3, #24]
 8000c4e:	4a14      	ldr	r2, [pc, #80]	; (8000ca0 <HAL_MspInit+0x5c>)
 8000c50:	f043 0301 	orr.w	r3, r3, #1
 8000c54:	6193      	str	r3, [r2, #24]
 8000c56:	4b12      	ldr	r3, [pc, #72]	; (8000ca0 <HAL_MspInit+0x5c>)
 8000c58:	699b      	ldr	r3, [r3, #24]
 8000c5a:	f003 0301 	and.w	r3, r3, #1
 8000c5e:	60bb      	str	r3, [r7, #8]
 8000c60:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c62:	4b0f      	ldr	r3, [pc, #60]	; (8000ca0 <HAL_MspInit+0x5c>)
 8000c64:	69db      	ldr	r3, [r3, #28]
 8000c66:	4a0e      	ldr	r2, [pc, #56]	; (8000ca0 <HAL_MspInit+0x5c>)
 8000c68:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c6c:	61d3      	str	r3, [r2, #28]
 8000c6e:	4b0c      	ldr	r3, [pc, #48]	; (8000ca0 <HAL_MspInit+0x5c>)
 8000c70:	69db      	ldr	r3, [r3, #28]
 8000c72:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c76:	607b      	str	r3, [r7, #4]
 8000c78:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000c7a:	4b0a      	ldr	r3, [pc, #40]	; (8000ca4 <HAL_MspInit+0x60>)
 8000c7c:	685b      	ldr	r3, [r3, #4]
 8000c7e:	60fb      	str	r3, [r7, #12]
 8000c80:	68fb      	ldr	r3, [r7, #12]
 8000c82:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000c86:	60fb      	str	r3, [r7, #12]
 8000c88:	68fb      	ldr	r3, [r7, #12]
 8000c8a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000c8e:	60fb      	str	r3, [r7, #12]
 8000c90:	4a04      	ldr	r2, [pc, #16]	; (8000ca4 <HAL_MspInit+0x60>)
 8000c92:	68fb      	ldr	r3, [r7, #12]
 8000c94:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c96:	bf00      	nop
 8000c98:	3714      	adds	r7, #20
 8000c9a:	46bd      	mov	sp, r7
 8000c9c:	bc80      	pop	{r7}
 8000c9e:	4770      	bx	lr
 8000ca0:	40021000 	.word	0x40021000
 8000ca4:	40010000 	.word	0x40010000

08000ca8 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8000ca8:	b580      	push	{r7, lr}
 8000caa:	b084      	sub	sp, #16
 8000cac:	af00      	add	r7, sp, #0
 8000cae:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	681b      	ldr	r3, [r3, #0]
 8000cb4:	4a0b      	ldr	r2, [pc, #44]	; (8000ce4 <HAL_RTC_MspInit+0x3c>)
 8000cb6:	4293      	cmp	r3, r2
 8000cb8:	d110      	bne.n	8000cdc <HAL_RTC_MspInit+0x34>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    HAL_PWR_EnableBkUpAccess();
 8000cba:	f000 fbe7 	bl	800148c <HAL_PWR_EnableBkUpAccess>
    /* Enable BKP CLK enable for backup registers */
    __HAL_RCC_BKP_CLK_ENABLE();
 8000cbe:	4b0a      	ldr	r3, [pc, #40]	; (8000ce8 <HAL_RTC_MspInit+0x40>)
 8000cc0:	69db      	ldr	r3, [r3, #28]
 8000cc2:	4a09      	ldr	r2, [pc, #36]	; (8000ce8 <HAL_RTC_MspInit+0x40>)
 8000cc4:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8000cc8:	61d3      	str	r3, [r2, #28]
 8000cca:	4b07      	ldr	r3, [pc, #28]	; (8000ce8 <HAL_RTC_MspInit+0x40>)
 8000ccc:	69db      	ldr	r3, [r3, #28]
 8000cce:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8000cd2:	60fb      	str	r3, [r7, #12]
 8000cd4:	68fb      	ldr	r3, [r7, #12]
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8000cd6:	4b05      	ldr	r3, [pc, #20]	; (8000cec <HAL_RTC_MspInit+0x44>)
 8000cd8:	2201      	movs	r2, #1
 8000cda:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8000cdc:	bf00      	nop
 8000cde:	3710      	adds	r7, #16
 8000ce0:	46bd      	mov	sp, r7
 8000ce2:	bd80      	pop	{r7, pc}
 8000ce4:	40002800 	.word	0x40002800
 8000ce8:	40021000 	.word	0x40021000
 8000cec:	4242043c 	.word	0x4242043c

08000cf0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000cf0:	b580      	push	{r7, lr}
 8000cf2:	b088      	sub	sp, #32
 8000cf4:	af00      	add	r7, sp, #0
 8000cf6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cf8:	f107 0310 	add.w	r3, r7, #16
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	601a      	str	r2, [r3, #0]
 8000d00:	605a      	str	r2, [r3, #4]
 8000d02:	609a      	str	r2, [r3, #8]
 8000d04:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 8000d06:	687b      	ldr	r3, [r7, #4]
 8000d08:	681b      	ldr	r3, [r3, #0]
 8000d0a:	4a15      	ldr	r2, [pc, #84]	; (8000d60 <HAL_SPI_MspInit+0x70>)
 8000d0c:	4293      	cmp	r3, r2
 8000d0e:	d123      	bne.n	8000d58 <HAL_SPI_MspInit+0x68>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000d10:	4b14      	ldr	r3, [pc, #80]	; (8000d64 <HAL_SPI_MspInit+0x74>)
 8000d12:	699b      	ldr	r3, [r3, #24]
 8000d14:	4a13      	ldr	r2, [pc, #76]	; (8000d64 <HAL_SPI_MspInit+0x74>)
 8000d16:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000d1a:	6193      	str	r3, [r2, #24]
 8000d1c:	4b11      	ldr	r3, [pc, #68]	; (8000d64 <HAL_SPI_MspInit+0x74>)
 8000d1e:	699b      	ldr	r3, [r3, #24]
 8000d20:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000d24:	60fb      	str	r3, [r7, #12]
 8000d26:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d28:	4b0e      	ldr	r3, [pc, #56]	; (8000d64 <HAL_SPI_MspInit+0x74>)
 8000d2a:	699b      	ldr	r3, [r3, #24]
 8000d2c:	4a0d      	ldr	r2, [pc, #52]	; (8000d64 <HAL_SPI_MspInit+0x74>)
 8000d2e:	f043 0304 	orr.w	r3, r3, #4
 8000d32:	6193      	str	r3, [r2, #24]
 8000d34:	4b0b      	ldr	r3, [pc, #44]	; (8000d64 <HAL_SPI_MspInit+0x74>)
 8000d36:	699b      	ldr	r3, [r3, #24]
 8000d38:	f003 0304 	and.w	r3, r3, #4
 8000d3c:	60bb      	str	r3, [r7, #8]
 8000d3e:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8000d40:	23a0      	movs	r3, #160	; 0xa0
 8000d42:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d44:	2302      	movs	r3, #2
 8000d46:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000d48:	2303      	movs	r3, #3
 8000d4a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d4c:	f107 0310 	add.w	r3, r7, #16
 8000d50:	4619      	mov	r1, r3
 8000d52:	4805      	ldr	r0, [pc, #20]	; (8000d68 <HAL_SPI_MspInit+0x78>)
 8000d54:	f000 f9fe 	bl	8001154 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000d58:	bf00      	nop
 8000d5a:	3720      	adds	r7, #32
 8000d5c:	46bd      	mov	sp, r7
 8000d5e:	bd80      	pop	{r7, pc}
 8000d60:	40013000 	.word	0x40013000
 8000d64:	40021000 	.word	0x40021000
 8000d68:	40010800 	.word	0x40010800

08000d6c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d6c:	b480      	push	{r7}
 8000d6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000d70:	e7fe      	b.n	8000d70 <NMI_Handler+0x4>

08000d72 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d72:	b480      	push	{r7}
 8000d74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d76:	e7fe      	b.n	8000d76 <HardFault_Handler+0x4>

08000d78 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d78:	b480      	push	{r7}
 8000d7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d7c:	e7fe      	b.n	8000d7c <MemManage_Handler+0x4>

08000d7e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d7e:	b480      	push	{r7}
 8000d80:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d82:	e7fe      	b.n	8000d82 <BusFault_Handler+0x4>

08000d84 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d84:	b480      	push	{r7}
 8000d86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d88:	e7fe      	b.n	8000d88 <UsageFault_Handler+0x4>

08000d8a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d8a:	b480      	push	{r7}
 8000d8c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000d8e:	bf00      	nop
 8000d90:	46bd      	mov	sp, r7
 8000d92:	bc80      	pop	{r7}
 8000d94:	4770      	bx	lr

08000d96 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d96:	b480      	push	{r7}
 8000d98:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d9a:	bf00      	nop
 8000d9c:	46bd      	mov	sp, r7
 8000d9e:	bc80      	pop	{r7}
 8000da0:	4770      	bx	lr

08000da2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000da2:	b480      	push	{r7}
 8000da4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000da6:	bf00      	nop
 8000da8:	46bd      	mov	sp, r7
 8000daa:	bc80      	pop	{r7}
 8000dac:	4770      	bx	lr

08000dae <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000dae:	b580      	push	{r7, lr}
 8000db0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000db2:	f000 f8ab 	bl	8000f0c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000db6:	bf00      	nop
 8000db8:	bd80      	pop	{r7, pc}
	...

08000dbc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000dbc:	b580      	push	{r7, lr}
 8000dbe:	b086      	sub	sp, #24
 8000dc0:	af00      	add	r7, sp, #0
 8000dc2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000dc4:	4a14      	ldr	r2, [pc, #80]	; (8000e18 <_sbrk+0x5c>)
 8000dc6:	4b15      	ldr	r3, [pc, #84]	; (8000e1c <_sbrk+0x60>)
 8000dc8:	1ad3      	subs	r3, r2, r3
 8000dca:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000dcc:	697b      	ldr	r3, [r7, #20]
 8000dce:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000dd0:	4b13      	ldr	r3, [pc, #76]	; (8000e20 <_sbrk+0x64>)
 8000dd2:	681b      	ldr	r3, [r3, #0]
 8000dd4:	2b00      	cmp	r3, #0
 8000dd6:	d102      	bne.n	8000dde <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000dd8:	4b11      	ldr	r3, [pc, #68]	; (8000e20 <_sbrk+0x64>)
 8000dda:	4a12      	ldr	r2, [pc, #72]	; (8000e24 <_sbrk+0x68>)
 8000ddc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000dde:	4b10      	ldr	r3, [pc, #64]	; (8000e20 <_sbrk+0x64>)
 8000de0:	681a      	ldr	r2, [r3, #0]
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	4413      	add	r3, r2
 8000de6:	693a      	ldr	r2, [r7, #16]
 8000de8:	429a      	cmp	r2, r3
 8000dea:	d207      	bcs.n	8000dfc <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000dec:	f002 f9bc 	bl	8003168 <__errno>
 8000df0:	4603      	mov	r3, r0
 8000df2:	220c      	movs	r2, #12
 8000df4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000df6:	f04f 33ff 	mov.w	r3, #4294967295
 8000dfa:	e009      	b.n	8000e10 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000dfc:	4b08      	ldr	r3, [pc, #32]	; (8000e20 <_sbrk+0x64>)
 8000dfe:	681b      	ldr	r3, [r3, #0]
 8000e00:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000e02:	4b07      	ldr	r3, [pc, #28]	; (8000e20 <_sbrk+0x64>)
 8000e04:	681a      	ldr	r2, [r3, #0]
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	4413      	add	r3, r2
 8000e0a:	4a05      	ldr	r2, [pc, #20]	; (8000e20 <_sbrk+0x64>)
 8000e0c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000e0e:	68fb      	ldr	r3, [r7, #12]
}
 8000e10:	4618      	mov	r0, r3
 8000e12:	3718      	adds	r7, #24
 8000e14:	46bd      	mov	sp, r7
 8000e16:	bd80      	pop	{r7, pc}
 8000e18:	20005000 	.word	0x20005000
 8000e1c:	00000400 	.word	0x00000400
 8000e20:	200000f4 	.word	0x200000f4
 8000e24:	20000248 	.word	0x20000248

08000e28 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000e28:	b480      	push	{r7}
 8000e2a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000e2c:	bf00      	nop
 8000e2e:	46bd      	mov	sp, r7
 8000e30:	bc80      	pop	{r7}
 8000e32:	4770      	bx	lr

08000e34 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000e34:	f7ff fff8 	bl	8000e28 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000e38:	480b      	ldr	r0, [pc, #44]	; (8000e68 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000e3a:	490c      	ldr	r1, [pc, #48]	; (8000e6c <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000e3c:	4a0c      	ldr	r2, [pc, #48]	; (8000e70 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000e3e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e40:	e002      	b.n	8000e48 <LoopCopyDataInit>

08000e42 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e42:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e44:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e46:	3304      	adds	r3, #4

08000e48 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e48:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e4a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e4c:	d3f9      	bcc.n	8000e42 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e4e:	4a09      	ldr	r2, [pc, #36]	; (8000e74 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000e50:	4c09      	ldr	r4, [pc, #36]	; (8000e78 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000e52:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e54:	e001      	b.n	8000e5a <LoopFillZerobss>

08000e56 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e56:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e58:	3204      	adds	r2, #4

08000e5a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e5a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e5c:	d3fb      	bcc.n	8000e56 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000e5e:	f002 f989 	bl	8003174 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000e62:	f7ff fbb1 	bl	80005c8 <main>
  bx lr
 8000e66:	4770      	bx	lr
  ldr r0, =_sdata
 8000e68:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e6c:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 8000e70:	08004f78 	.word	0x08004f78
  ldr r2, =_sbss
 8000e74:	2000006c 	.word	0x2000006c
  ldr r4, =_ebss
 8000e78:	20000244 	.word	0x20000244

08000e7c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000e7c:	e7fe      	b.n	8000e7c <ADC1_2_IRQHandler>
	...

08000e80 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e80:	b580      	push	{r7, lr}
 8000e82:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000e84:	4b08      	ldr	r3, [pc, #32]	; (8000ea8 <HAL_Init+0x28>)
 8000e86:	681b      	ldr	r3, [r3, #0]
 8000e88:	4a07      	ldr	r2, [pc, #28]	; (8000ea8 <HAL_Init+0x28>)
 8000e8a:	f043 0310 	orr.w	r3, r3, #16
 8000e8e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e90:	2003      	movs	r0, #3
 8000e92:	f000 f92b 	bl	80010ec <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000e96:	200f      	movs	r0, #15
 8000e98:	f000 f808 	bl	8000eac <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000e9c:	f7ff fed2 	bl	8000c44 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000ea0:	2300      	movs	r3, #0
}
 8000ea2:	4618      	mov	r0, r3
 8000ea4:	bd80      	pop	{r7, pc}
 8000ea6:	bf00      	nop
 8000ea8:	40022000 	.word	0x40022000

08000eac <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000eac:	b580      	push	{r7, lr}
 8000eae:	b082      	sub	sp, #8
 8000eb0:	af00      	add	r7, sp, #0
 8000eb2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000eb4:	4b12      	ldr	r3, [pc, #72]	; (8000f00 <HAL_InitTick+0x54>)
 8000eb6:	681a      	ldr	r2, [r3, #0]
 8000eb8:	4b12      	ldr	r3, [pc, #72]	; (8000f04 <HAL_InitTick+0x58>)
 8000eba:	781b      	ldrb	r3, [r3, #0]
 8000ebc:	4619      	mov	r1, r3
 8000ebe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ec2:	fbb3 f3f1 	udiv	r3, r3, r1
 8000ec6:	fbb2 f3f3 	udiv	r3, r2, r3
 8000eca:	4618      	mov	r0, r3
 8000ecc:	f000 f935 	bl	800113a <HAL_SYSTICK_Config>
 8000ed0:	4603      	mov	r3, r0
 8000ed2:	2b00      	cmp	r3, #0
 8000ed4:	d001      	beq.n	8000eda <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000ed6:	2301      	movs	r3, #1
 8000ed8:	e00e      	b.n	8000ef8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	2b0f      	cmp	r3, #15
 8000ede:	d80a      	bhi.n	8000ef6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ee0:	2200      	movs	r2, #0
 8000ee2:	6879      	ldr	r1, [r7, #4]
 8000ee4:	f04f 30ff 	mov.w	r0, #4294967295
 8000ee8:	f000 f90b 	bl	8001102 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000eec:	4a06      	ldr	r2, [pc, #24]	; (8000f08 <HAL_InitTick+0x5c>)
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000ef2:	2300      	movs	r3, #0
 8000ef4:	e000      	b.n	8000ef8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000ef6:	2301      	movs	r3, #1
}
 8000ef8:	4618      	mov	r0, r3
 8000efa:	3708      	adds	r7, #8
 8000efc:	46bd      	mov	sp, r7
 8000efe:	bd80      	pop	{r7, pc}
 8000f00:	20000010 	.word	0x20000010
 8000f04:	20000018 	.word	0x20000018
 8000f08:	20000014 	.word	0x20000014

08000f0c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f0c:	b480      	push	{r7}
 8000f0e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000f10:	4b05      	ldr	r3, [pc, #20]	; (8000f28 <HAL_IncTick+0x1c>)
 8000f12:	781b      	ldrb	r3, [r3, #0]
 8000f14:	461a      	mov	r2, r3
 8000f16:	4b05      	ldr	r3, [pc, #20]	; (8000f2c <HAL_IncTick+0x20>)
 8000f18:	681b      	ldr	r3, [r3, #0]
 8000f1a:	4413      	add	r3, r2
 8000f1c:	4a03      	ldr	r2, [pc, #12]	; (8000f2c <HAL_IncTick+0x20>)
 8000f1e:	6013      	str	r3, [r2, #0]
}
 8000f20:	bf00      	nop
 8000f22:	46bd      	mov	sp, r7
 8000f24:	bc80      	pop	{r7}
 8000f26:	4770      	bx	lr
 8000f28:	20000018 	.word	0x20000018
 8000f2c:	200000f8 	.word	0x200000f8

08000f30 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f30:	b480      	push	{r7}
 8000f32:	af00      	add	r7, sp, #0
  return uwTick;
 8000f34:	4b02      	ldr	r3, [pc, #8]	; (8000f40 <HAL_GetTick+0x10>)
 8000f36:	681b      	ldr	r3, [r3, #0]
}
 8000f38:	4618      	mov	r0, r3
 8000f3a:	46bd      	mov	sp, r7
 8000f3c:	bc80      	pop	{r7}
 8000f3e:	4770      	bx	lr
 8000f40:	200000f8 	.word	0x200000f8

08000f44 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000f44:	b580      	push	{r7, lr}
 8000f46:	b084      	sub	sp, #16
 8000f48:	af00      	add	r7, sp, #0
 8000f4a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000f4c:	f7ff fff0 	bl	8000f30 <HAL_GetTick>
 8000f50:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000f56:	68fb      	ldr	r3, [r7, #12]
 8000f58:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000f5c:	d005      	beq.n	8000f6a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000f5e:	4b0a      	ldr	r3, [pc, #40]	; (8000f88 <HAL_Delay+0x44>)
 8000f60:	781b      	ldrb	r3, [r3, #0]
 8000f62:	461a      	mov	r2, r3
 8000f64:	68fb      	ldr	r3, [r7, #12]
 8000f66:	4413      	add	r3, r2
 8000f68:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000f6a:	bf00      	nop
 8000f6c:	f7ff ffe0 	bl	8000f30 <HAL_GetTick>
 8000f70:	4602      	mov	r2, r0
 8000f72:	68bb      	ldr	r3, [r7, #8]
 8000f74:	1ad3      	subs	r3, r2, r3
 8000f76:	68fa      	ldr	r2, [r7, #12]
 8000f78:	429a      	cmp	r2, r3
 8000f7a:	d8f7      	bhi.n	8000f6c <HAL_Delay+0x28>
  {
  }
}
 8000f7c:	bf00      	nop
 8000f7e:	bf00      	nop
 8000f80:	3710      	adds	r7, #16
 8000f82:	46bd      	mov	sp, r7
 8000f84:	bd80      	pop	{r7, pc}
 8000f86:	bf00      	nop
 8000f88:	20000018 	.word	0x20000018

08000f8c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f8c:	b480      	push	{r7}
 8000f8e:	b085      	sub	sp, #20
 8000f90:	af00      	add	r7, sp, #0
 8000f92:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	f003 0307 	and.w	r3, r3, #7
 8000f9a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000f9c:	4b0c      	ldr	r3, [pc, #48]	; (8000fd0 <__NVIC_SetPriorityGrouping+0x44>)
 8000f9e:	68db      	ldr	r3, [r3, #12]
 8000fa0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000fa2:	68ba      	ldr	r2, [r7, #8]
 8000fa4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000fa8:	4013      	ands	r3, r2
 8000faa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000fac:	68fb      	ldr	r3, [r7, #12]
 8000fae:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000fb0:	68bb      	ldr	r3, [r7, #8]
 8000fb2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000fb4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000fb8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000fbc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000fbe:	4a04      	ldr	r2, [pc, #16]	; (8000fd0 <__NVIC_SetPriorityGrouping+0x44>)
 8000fc0:	68bb      	ldr	r3, [r7, #8]
 8000fc2:	60d3      	str	r3, [r2, #12]
}
 8000fc4:	bf00      	nop
 8000fc6:	3714      	adds	r7, #20
 8000fc8:	46bd      	mov	sp, r7
 8000fca:	bc80      	pop	{r7}
 8000fcc:	4770      	bx	lr
 8000fce:	bf00      	nop
 8000fd0:	e000ed00 	.word	0xe000ed00

08000fd4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000fd4:	b480      	push	{r7}
 8000fd6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000fd8:	4b04      	ldr	r3, [pc, #16]	; (8000fec <__NVIC_GetPriorityGrouping+0x18>)
 8000fda:	68db      	ldr	r3, [r3, #12]
 8000fdc:	0a1b      	lsrs	r3, r3, #8
 8000fde:	f003 0307 	and.w	r3, r3, #7
}
 8000fe2:	4618      	mov	r0, r3
 8000fe4:	46bd      	mov	sp, r7
 8000fe6:	bc80      	pop	{r7}
 8000fe8:	4770      	bx	lr
 8000fea:	bf00      	nop
 8000fec:	e000ed00 	.word	0xe000ed00

08000ff0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ff0:	b480      	push	{r7}
 8000ff2:	b083      	sub	sp, #12
 8000ff4:	af00      	add	r7, sp, #0
 8000ff6:	4603      	mov	r3, r0
 8000ff8:	6039      	str	r1, [r7, #0]
 8000ffa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ffc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001000:	2b00      	cmp	r3, #0
 8001002:	db0a      	blt.n	800101a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001004:	683b      	ldr	r3, [r7, #0]
 8001006:	b2da      	uxtb	r2, r3
 8001008:	490c      	ldr	r1, [pc, #48]	; (800103c <__NVIC_SetPriority+0x4c>)
 800100a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800100e:	0112      	lsls	r2, r2, #4
 8001010:	b2d2      	uxtb	r2, r2
 8001012:	440b      	add	r3, r1
 8001014:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001018:	e00a      	b.n	8001030 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800101a:	683b      	ldr	r3, [r7, #0]
 800101c:	b2da      	uxtb	r2, r3
 800101e:	4908      	ldr	r1, [pc, #32]	; (8001040 <__NVIC_SetPriority+0x50>)
 8001020:	79fb      	ldrb	r3, [r7, #7]
 8001022:	f003 030f 	and.w	r3, r3, #15
 8001026:	3b04      	subs	r3, #4
 8001028:	0112      	lsls	r2, r2, #4
 800102a:	b2d2      	uxtb	r2, r2
 800102c:	440b      	add	r3, r1
 800102e:	761a      	strb	r2, [r3, #24]
}
 8001030:	bf00      	nop
 8001032:	370c      	adds	r7, #12
 8001034:	46bd      	mov	sp, r7
 8001036:	bc80      	pop	{r7}
 8001038:	4770      	bx	lr
 800103a:	bf00      	nop
 800103c:	e000e100 	.word	0xe000e100
 8001040:	e000ed00 	.word	0xe000ed00

08001044 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001044:	b480      	push	{r7}
 8001046:	b089      	sub	sp, #36	; 0x24
 8001048:	af00      	add	r7, sp, #0
 800104a:	60f8      	str	r0, [r7, #12]
 800104c:	60b9      	str	r1, [r7, #8]
 800104e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001050:	68fb      	ldr	r3, [r7, #12]
 8001052:	f003 0307 	and.w	r3, r3, #7
 8001056:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001058:	69fb      	ldr	r3, [r7, #28]
 800105a:	f1c3 0307 	rsb	r3, r3, #7
 800105e:	2b04      	cmp	r3, #4
 8001060:	bf28      	it	cs
 8001062:	2304      	movcs	r3, #4
 8001064:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001066:	69fb      	ldr	r3, [r7, #28]
 8001068:	3304      	adds	r3, #4
 800106a:	2b06      	cmp	r3, #6
 800106c:	d902      	bls.n	8001074 <NVIC_EncodePriority+0x30>
 800106e:	69fb      	ldr	r3, [r7, #28]
 8001070:	3b03      	subs	r3, #3
 8001072:	e000      	b.n	8001076 <NVIC_EncodePriority+0x32>
 8001074:	2300      	movs	r3, #0
 8001076:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001078:	f04f 32ff 	mov.w	r2, #4294967295
 800107c:	69bb      	ldr	r3, [r7, #24]
 800107e:	fa02 f303 	lsl.w	r3, r2, r3
 8001082:	43da      	mvns	r2, r3
 8001084:	68bb      	ldr	r3, [r7, #8]
 8001086:	401a      	ands	r2, r3
 8001088:	697b      	ldr	r3, [r7, #20]
 800108a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800108c:	f04f 31ff 	mov.w	r1, #4294967295
 8001090:	697b      	ldr	r3, [r7, #20]
 8001092:	fa01 f303 	lsl.w	r3, r1, r3
 8001096:	43d9      	mvns	r1, r3
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800109c:	4313      	orrs	r3, r2
         );
}
 800109e:	4618      	mov	r0, r3
 80010a0:	3724      	adds	r7, #36	; 0x24
 80010a2:	46bd      	mov	sp, r7
 80010a4:	bc80      	pop	{r7}
 80010a6:	4770      	bx	lr

080010a8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80010a8:	b580      	push	{r7, lr}
 80010aa:	b082      	sub	sp, #8
 80010ac:	af00      	add	r7, sp, #0
 80010ae:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	3b01      	subs	r3, #1
 80010b4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80010b8:	d301      	bcc.n	80010be <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80010ba:	2301      	movs	r3, #1
 80010bc:	e00f      	b.n	80010de <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80010be:	4a0a      	ldr	r2, [pc, #40]	; (80010e8 <SysTick_Config+0x40>)
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	3b01      	subs	r3, #1
 80010c4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80010c6:	210f      	movs	r1, #15
 80010c8:	f04f 30ff 	mov.w	r0, #4294967295
 80010cc:	f7ff ff90 	bl	8000ff0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80010d0:	4b05      	ldr	r3, [pc, #20]	; (80010e8 <SysTick_Config+0x40>)
 80010d2:	2200      	movs	r2, #0
 80010d4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80010d6:	4b04      	ldr	r3, [pc, #16]	; (80010e8 <SysTick_Config+0x40>)
 80010d8:	2207      	movs	r2, #7
 80010da:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80010dc:	2300      	movs	r3, #0
}
 80010de:	4618      	mov	r0, r3
 80010e0:	3708      	adds	r7, #8
 80010e2:	46bd      	mov	sp, r7
 80010e4:	bd80      	pop	{r7, pc}
 80010e6:	bf00      	nop
 80010e8:	e000e010 	.word	0xe000e010

080010ec <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010ec:	b580      	push	{r7, lr}
 80010ee:	b082      	sub	sp, #8
 80010f0:	af00      	add	r7, sp, #0
 80010f2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80010f4:	6878      	ldr	r0, [r7, #4]
 80010f6:	f7ff ff49 	bl	8000f8c <__NVIC_SetPriorityGrouping>
}
 80010fa:	bf00      	nop
 80010fc:	3708      	adds	r7, #8
 80010fe:	46bd      	mov	sp, r7
 8001100:	bd80      	pop	{r7, pc}

08001102 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001102:	b580      	push	{r7, lr}
 8001104:	b086      	sub	sp, #24
 8001106:	af00      	add	r7, sp, #0
 8001108:	4603      	mov	r3, r0
 800110a:	60b9      	str	r1, [r7, #8]
 800110c:	607a      	str	r2, [r7, #4]
 800110e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001110:	2300      	movs	r3, #0
 8001112:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001114:	f7ff ff5e 	bl	8000fd4 <__NVIC_GetPriorityGrouping>
 8001118:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800111a:	687a      	ldr	r2, [r7, #4]
 800111c:	68b9      	ldr	r1, [r7, #8]
 800111e:	6978      	ldr	r0, [r7, #20]
 8001120:	f7ff ff90 	bl	8001044 <NVIC_EncodePriority>
 8001124:	4602      	mov	r2, r0
 8001126:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800112a:	4611      	mov	r1, r2
 800112c:	4618      	mov	r0, r3
 800112e:	f7ff ff5f 	bl	8000ff0 <__NVIC_SetPriority>
}
 8001132:	bf00      	nop
 8001134:	3718      	adds	r7, #24
 8001136:	46bd      	mov	sp, r7
 8001138:	bd80      	pop	{r7, pc}

0800113a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800113a:	b580      	push	{r7, lr}
 800113c:	b082      	sub	sp, #8
 800113e:	af00      	add	r7, sp, #0
 8001140:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001142:	6878      	ldr	r0, [r7, #4]
 8001144:	f7ff ffb0 	bl	80010a8 <SysTick_Config>
 8001148:	4603      	mov	r3, r0
}
 800114a:	4618      	mov	r0, r3
 800114c:	3708      	adds	r7, #8
 800114e:	46bd      	mov	sp, r7
 8001150:	bd80      	pop	{r7, pc}
	...

08001154 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001154:	b480      	push	{r7}
 8001156:	b08b      	sub	sp, #44	; 0x2c
 8001158:	af00      	add	r7, sp, #0
 800115a:	6078      	str	r0, [r7, #4]
 800115c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800115e:	2300      	movs	r3, #0
 8001160:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001162:	2300      	movs	r3, #0
 8001164:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001166:	e169      	b.n	800143c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001168:	2201      	movs	r2, #1
 800116a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800116c:	fa02 f303 	lsl.w	r3, r2, r3
 8001170:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001172:	683b      	ldr	r3, [r7, #0]
 8001174:	681b      	ldr	r3, [r3, #0]
 8001176:	69fa      	ldr	r2, [r7, #28]
 8001178:	4013      	ands	r3, r2
 800117a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800117c:	69ba      	ldr	r2, [r7, #24]
 800117e:	69fb      	ldr	r3, [r7, #28]
 8001180:	429a      	cmp	r2, r3
 8001182:	f040 8158 	bne.w	8001436 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001186:	683b      	ldr	r3, [r7, #0]
 8001188:	685b      	ldr	r3, [r3, #4]
 800118a:	4a9a      	ldr	r2, [pc, #616]	; (80013f4 <HAL_GPIO_Init+0x2a0>)
 800118c:	4293      	cmp	r3, r2
 800118e:	d05e      	beq.n	800124e <HAL_GPIO_Init+0xfa>
 8001190:	4a98      	ldr	r2, [pc, #608]	; (80013f4 <HAL_GPIO_Init+0x2a0>)
 8001192:	4293      	cmp	r3, r2
 8001194:	d875      	bhi.n	8001282 <HAL_GPIO_Init+0x12e>
 8001196:	4a98      	ldr	r2, [pc, #608]	; (80013f8 <HAL_GPIO_Init+0x2a4>)
 8001198:	4293      	cmp	r3, r2
 800119a:	d058      	beq.n	800124e <HAL_GPIO_Init+0xfa>
 800119c:	4a96      	ldr	r2, [pc, #600]	; (80013f8 <HAL_GPIO_Init+0x2a4>)
 800119e:	4293      	cmp	r3, r2
 80011a0:	d86f      	bhi.n	8001282 <HAL_GPIO_Init+0x12e>
 80011a2:	4a96      	ldr	r2, [pc, #600]	; (80013fc <HAL_GPIO_Init+0x2a8>)
 80011a4:	4293      	cmp	r3, r2
 80011a6:	d052      	beq.n	800124e <HAL_GPIO_Init+0xfa>
 80011a8:	4a94      	ldr	r2, [pc, #592]	; (80013fc <HAL_GPIO_Init+0x2a8>)
 80011aa:	4293      	cmp	r3, r2
 80011ac:	d869      	bhi.n	8001282 <HAL_GPIO_Init+0x12e>
 80011ae:	4a94      	ldr	r2, [pc, #592]	; (8001400 <HAL_GPIO_Init+0x2ac>)
 80011b0:	4293      	cmp	r3, r2
 80011b2:	d04c      	beq.n	800124e <HAL_GPIO_Init+0xfa>
 80011b4:	4a92      	ldr	r2, [pc, #584]	; (8001400 <HAL_GPIO_Init+0x2ac>)
 80011b6:	4293      	cmp	r3, r2
 80011b8:	d863      	bhi.n	8001282 <HAL_GPIO_Init+0x12e>
 80011ba:	4a92      	ldr	r2, [pc, #584]	; (8001404 <HAL_GPIO_Init+0x2b0>)
 80011bc:	4293      	cmp	r3, r2
 80011be:	d046      	beq.n	800124e <HAL_GPIO_Init+0xfa>
 80011c0:	4a90      	ldr	r2, [pc, #576]	; (8001404 <HAL_GPIO_Init+0x2b0>)
 80011c2:	4293      	cmp	r3, r2
 80011c4:	d85d      	bhi.n	8001282 <HAL_GPIO_Init+0x12e>
 80011c6:	2b12      	cmp	r3, #18
 80011c8:	d82a      	bhi.n	8001220 <HAL_GPIO_Init+0xcc>
 80011ca:	2b12      	cmp	r3, #18
 80011cc:	d859      	bhi.n	8001282 <HAL_GPIO_Init+0x12e>
 80011ce:	a201      	add	r2, pc, #4	; (adr r2, 80011d4 <HAL_GPIO_Init+0x80>)
 80011d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80011d4:	0800124f 	.word	0x0800124f
 80011d8:	08001229 	.word	0x08001229
 80011dc:	0800123b 	.word	0x0800123b
 80011e0:	0800127d 	.word	0x0800127d
 80011e4:	08001283 	.word	0x08001283
 80011e8:	08001283 	.word	0x08001283
 80011ec:	08001283 	.word	0x08001283
 80011f0:	08001283 	.word	0x08001283
 80011f4:	08001283 	.word	0x08001283
 80011f8:	08001283 	.word	0x08001283
 80011fc:	08001283 	.word	0x08001283
 8001200:	08001283 	.word	0x08001283
 8001204:	08001283 	.word	0x08001283
 8001208:	08001283 	.word	0x08001283
 800120c:	08001283 	.word	0x08001283
 8001210:	08001283 	.word	0x08001283
 8001214:	08001283 	.word	0x08001283
 8001218:	08001231 	.word	0x08001231
 800121c:	08001245 	.word	0x08001245
 8001220:	4a79      	ldr	r2, [pc, #484]	; (8001408 <HAL_GPIO_Init+0x2b4>)
 8001222:	4293      	cmp	r3, r2
 8001224:	d013      	beq.n	800124e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001226:	e02c      	b.n	8001282 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001228:	683b      	ldr	r3, [r7, #0]
 800122a:	68db      	ldr	r3, [r3, #12]
 800122c:	623b      	str	r3, [r7, #32]
          break;
 800122e:	e029      	b.n	8001284 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001230:	683b      	ldr	r3, [r7, #0]
 8001232:	68db      	ldr	r3, [r3, #12]
 8001234:	3304      	adds	r3, #4
 8001236:	623b      	str	r3, [r7, #32]
          break;
 8001238:	e024      	b.n	8001284 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800123a:	683b      	ldr	r3, [r7, #0]
 800123c:	68db      	ldr	r3, [r3, #12]
 800123e:	3308      	adds	r3, #8
 8001240:	623b      	str	r3, [r7, #32]
          break;
 8001242:	e01f      	b.n	8001284 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001244:	683b      	ldr	r3, [r7, #0]
 8001246:	68db      	ldr	r3, [r3, #12]
 8001248:	330c      	adds	r3, #12
 800124a:	623b      	str	r3, [r7, #32]
          break;
 800124c:	e01a      	b.n	8001284 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800124e:	683b      	ldr	r3, [r7, #0]
 8001250:	689b      	ldr	r3, [r3, #8]
 8001252:	2b00      	cmp	r3, #0
 8001254:	d102      	bne.n	800125c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001256:	2304      	movs	r3, #4
 8001258:	623b      	str	r3, [r7, #32]
          break;
 800125a:	e013      	b.n	8001284 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800125c:	683b      	ldr	r3, [r7, #0]
 800125e:	689b      	ldr	r3, [r3, #8]
 8001260:	2b01      	cmp	r3, #1
 8001262:	d105      	bne.n	8001270 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001264:	2308      	movs	r3, #8
 8001266:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	69fa      	ldr	r2, [r7, #28]
 800126c:	611a      	str	r2, [r3, #16]
          break;
 800126e:	e009      	b.n	8001284 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001270:	2308      	movs	r3, #8
 8001272:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	69fa      	ldr	r2, [r7, #28]
 8001278:	615a      	str	r2, [r3, #20]
          break;
 800127a:	e003      	b.n	8001284 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800127c:	2300      	movs	r3, #0
 800127e:	623b      	str	r3, [r7, #32]
          break;
 8001280:	e000      	b.n	8001284 <HAL_GPIO_Init+0x130>
          break;
 8001282:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001284:	69bb      	ldr	r3, [r7, #24]
 8001286:	2bff      	cmp	r3, #255	; 0xff
 8001288:	d801      	bhi.n	800128e <HAL_GPIO_Init+0x13a>
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	e001      	b.n	8001292 <HAL_GPIO_Init+0x13e>
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	3304      	adds	r3, #4
 8001292:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001294:	69bb      	ldr	r3, [r7, #24]
 8001296:	2bff      	cmp	r3, #255	; 0xff
 8001298:	d802      	bhi.n	80012a0 <HAL_GPIO_Init+0x14c>
 800129a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800129c:	009b      	lsls	r3, r3, #2
 800129e:	e002      	b.n	80012a6 <HAL_GPIO_Init+0x152>
 80012a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012a2:	3b08      	subs	r3, #8
 80012a4:	009b      	lsls	r3, r3, #2
 80012a6:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80012a8:	697b      	ldr	r3, [r7, #20]
 80012aa:	681a      	ldr	r2, [r3, #0]
 80012ac:	210f      	movs	r1, #15
 80012ae:	693b      	ldr	r3, [r7, #16]
 80012b0:	fa01 f303 	lsl.w	r3, r1, r3
 80012b4:	43db      	mvns	r3, r3
 80012b6:	401a      	ands	r2, r3
 80012b8:	6a39      	ldr	r1, [r7, #32]
 80012ba:	693b      	ldr	r3, [r7, #16]
 80012bc:	fa01 f303 	lsl.w	r3, r1, r3
 80012c0:	431a      	orrs	r2, r3
 80012c2:	697b      	ldr	r3, [r7, #20]
 80012c4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80012c6:	683b      	ldr	r3, [r7, #0]
 80012c8:	685b      	ldr	r3, [r3, #4]
 80012ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	f000 80b1 	beq.w	8001436 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80012d4:	4b4d      	ldr	r3, [pc, #308]	; (800140c <HAL_GPIO_Init+0x2b8>)
 80012d6:	699b      	ldr	r3, [r3, #24]
 80012d8:	4a4c      	ldr	r2, [pc, #304]	; (800140c <HAL_GPIO_Init+0x2b8>)
 80012da:	f043 0301 	orr.w	r3, r3, #1
 80012de:	6193      	str	r3, [r2, #24]
 80012e0:	4b4a      	ldr	r3, [pc, #296]	; (800140c <HAL_GPIO_Init+0x2b8>)
 80012e2:	699b      	ldr	r3, [r3, #24]
 80012e4:	f003 0301 	and.w	r3, r3, #1
 80012e8:	60bb      	str	r3, [r7, #8]
 80012ea:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80012ec:	4a48      	ldr	r2, [pc, #288]	; (8001410 <HAL_GPIO_Init+0x2bc>)
 80012ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012f0:	089b      	lsrs	r3, r3, #2
 80012f2:	3302      	adds	r3, #2
 80012f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80012f8:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80012fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012fc:	f003 0303 	and.w	r3, r3, #3
 8001300:	009b      	lsls	r3, r3, #2
 8001302:	220f      	movs	r2, #15
 8001304:	fa02 f303 	lsl.w	r3, r2, r3
 8001308:	43db      	mvns	r3, r3
 800130a:	68fa      	ldr	r2, [r7, #12]
 800130c:	4013      	ands	r3, r2
 800130e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	4a40      	ldr	r2, [pc, #256]	; (8001414 <HAL_GPIO_Init+0x2c0>)
 8001314:	4293      	cmp	r3, r2
 8001316:	d013      	beq.n	8001340 <HAL_GPIO_Init+0x1ec>
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	4a3f      	ldr	r2, [pc, #252]	; (8001418 <HAL_GPIO_Init+0x2c4>)
 800131c:	4293      	cmp	r3, r2
 800131e:	d00d      	beq.n	800133c <HAL_GPIO_Init+0x1e8>
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	4a3e      	ldr	r2, [pc, #248]	; (800141c <HAL_GPIO_Init+0x2c8>)
 8001324:	4293      	cmp	r3, r2
 8001326:	d007      	beq.n	8001338 <HAL_GPIO_Init+0x1e4>
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	4a3d      	ldr	r2, [pc, #244]	; (8001420 <HAL_GPIO_Init+0x2cc>)
 800132c:	4293      	cmp	r3, r2
 800132e:	d101      	bne.n	8001334 <HAL_GPIO_Init+0x1e0>
 8001330:	2303      	movs	r3, #3
 8001332:	e006      	b.n	8001342 <HAL_GPIO_Init+0x1ee>
 8001334:	2304      	movs	r3, #4
 8001336:	e004      	b.n	8001342 <HAL_GPIO_Init+0x1ee>
 8001338:	2302      	movs	r3, #2
 800133a:	e002      	b.n	8001342 <HAL_GPIO_Init+0x1ee>
 800133c:	2301      	movs	r3, #1
 800133e:	e000      	b.n	8001342 <HAL_GPIO_Init+0x1ee>
 8001340:	2300      	movs	r3, #0
 8001342:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001344:	f002 0203 	and.w	r2, r2, #3
 8001348:	0092      	lsls	r2, r2, #2
 800134a:	4093      	lsls	r3, r2
 800134c:	68fa      	ldr	r2, [r7, #12]
 800134e:	4313      	orrs	r3, r2
 8001350:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001352:	492f      	ldr	r1, [pc, #188]	; (8001410 <HAL_GPIO_Init+0x2bc>)
 8001354:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001356:	089b      	lsrs	r3, r3, #2
 8001358:	3302      	adds	r3, #2
 800135a:	68fa      	ldr	r2, [r7, #12]
 800135c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001360:	683b      	ldr	r3, [r7, #0]
 8001362:	685b      	ldr	r3, [r3, #4]
 8001364:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001368:	2b00      	cmp	r3, #0
 800136a:	d006      	beq.n	800137a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800136c:	4b2d      	ldr	r3, [pc, #180]	; (8001424 <HAL_GPIO_Init+0x2d0>)
 800136e:	689a      	ldr	r2, [r3, #8]
 8001370:	492c      	ldr	r1, [pc, #176]	; (8001424 <HAL_GPIO_Init+0x2d0>)
 8001372:	69bb      	ldr	r3, [r7, #24]
 8001374:	4313      	orrs	r3, r2
 8001376:	608b      	str	r3, [r1, #8]
 8001378:	e006      	b.n	8001388 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800137a:	4b2a      	ldr	r3, [pc, #168]	; (8001424 <HAL_GPIO_Init+0x2d0>)
 800137c:	689a      	ldr	r2, [r3, #8]
 800137e:	69bb      	ldr	r3, [r7, #24]
 8001380:	43db      	mvns	r3, r3
 8001382:	4928      	ldr	r1, [pc, #160]	; (8001424 <HAL_GPIO_Init+0x2d0>)
 8001384:	4013      	ands	r3, r2
 8001386:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001388:	683b      	ldr	r3, [r7, #0]
 800138a:	685b      	ldr	r3, [r3, #4]
 800138c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001390:	2b00      	cmp	r3, #0
 8001392:	d006      	beq.n	80013a2 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001394:	4b23      	ldr	r3, [pc, #140]	; (8001424 <HAL_GPIO_Init+0x2d0>)
 8001396:	68da      	ldr	r2, [r3, #12]
 8001398:	4922      	ldr	r1, [pc, #136]	; (8001424 <HAL_GPIO_Init+0x2d0>)
 800139a:	69bb      	ldr	r3, [r7, #24]
 800139c:	4313      	orrs	r3, r2
 800139e:	60cb      	str	r3, [r1, #12]
 80013a0:	e006      	b.n	80013b0 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80013a2:	4b20      	ldr	r3, [pc, #128]	; (8001424 <HAL_GPIO_Init+0x2d0>)
 80013a4:	68da      	ldr	r2, [r3, #12]
 80013a6:	69bb      	ldr	r3, [r7, #24]
 80013a8:	43db      	mvns	r3, r3
 80013aa:	491e      	ldr	r1, [pc, #120]	; (8001424 <HAL_GPIO_Init+0x2d0>)
 80013ac:	4013      	ands	r3, r2
 80013ae:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80013b0:	683b      	ldr	r3, [r7, #0]
 80013b2:	685b      	ldr	r3, [r3, #4]
 80013b4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	d006      	beq.n	80013ca <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80013bc:	4b19      	ldr	r3, [pc, #100]	; (8001424 <HAL_GPIO_Init+0x2d0>)
 80013be:	685a      	ldr	r2, [r3, #4]
 80013c0:	4918      	ldr	r1, [pc, #96]	; (8001424 <HAL_GPIO_Init+0x2d0>)
 80013c2:	69bb      	ldr	r3, [r7, #24]
 80013c4:	4313      	orrs	r3, r2
 80013c6:	604b      	str	r3, [r1, #4]
 80013c8:	e006      	b.n	80013d8 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80013ca:	4b16      	ldr	r3, [pc, #88]	; (8001424 <HAL_GPIO_Init+0x2d0>)
 80013cc:	685a      	ldr	r2, [r3, #4]
 80013ce:	69bb      	ldr	r3, [r7, #24]
 80013d0:	43db      	mvns	r3, r3
 80013d2:	4914      	ldr	r1, [pc, #80]	; (8001424 <HAL_GPIO_Init+0x2d0>)
 80013d4:	4013      	ands	r3, r2
 80013d6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80013d8:	683b      	ldr	r3, [r7, #0]
 80013da:	685b      	ldr	r3, [r3, #4]
 80013dc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80013e0:	2b00      	cmp	r3, #0
 80013e2:	d021      	beq.n	8001428 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80013e4:	4b0f      	ldr	r3, [pc, #60]	; (8001424 <HAL_GPIO_Init+0x2d0>)
 80013e6:	681a      	ldr	r2, [r3, #0]
 80013e8:	490e      	ldr	r1, [pc, #56]	; (8001424 <HAL_GPIO_Init+0x2d0>)
 80013ea:	69bb      	ldr	r3, [r7, #24]
 80013ec:	4313      	orrs	r3, r2
 80013ee:	600b      	str	r3, [r1, #0]
 80013f0:	e021      	b.n	8001436 <HAL_GPIO_Init+0x2e2>
 80013f2:	bf00      	nop
 80013f4:	10320000 	.word	0x10320000
 80013f8:	10310000 	.word	0x10310000
 80013fc:	10220000 	.word	0x10220000
 8001400:	10210000 	.word	0x10210000
 8001404:	10120000 	.word	0x10120000
 8001408:	10110000 	.word	0x10110000
 800140c:	40021000 	.word	0x40021000
 8001410:	40010000 	.word	0x40010000
 8001414:	40010800 	.word	0x40010800
 8001418:	40010c00 	.word	0x40010c00
 800141c:	40011000 	.word	0x40011000
 8001420:	40011400 	.word	0x40011400
 8001424:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001428:	4b0b      	ldr	r3, [pc, #44]	; (8001458 <HAL_GPIO_Init+0x304>)
 800142a:	681a      	ldr	r2, [r3, #0]
 800142c:	69bb      	ldr	r3, [r7, #24]
 800142e:	43db      	mvns	r3, r3
 8001430:	4909      	ldr	r1, [pc, #36]	; (8001458 <HAL_GPIO_Init+0x304>)
 8001432:	4013      	ands	r3, r2
 8001434:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001436:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001438:	3301      	adds	r3, #1
 800143a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800143c:	683b      	ldr	r3, [r7, #0]
 800143e:	681a      	ldr	r2, [r3, #0]
 8001440:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001442:	fa22 f303 	lsr.w	r3, r2, r3
 8001446:	2b00      	cmp	r3, #0
 8001448:	f47f ae8e 	bne.w	8001168 <HAL_GPIO_Init+0x14>
  }
}
 800144c:	bf00      	nop
 800144e:	bf00      	nop
 8001450:	372c      	adds	r7, #44	; 0x2c
 8001452:	46bd      	mov	sp, r7
 8001454:	bc80      	pop	{r7}
 8001456:	4770      	bx	lr
 8001458:	40010400 	.word	0x40010400

0800145c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800145c:	b480      	push	{r7}
 800145e:	b083      	sub	sp, #12
 8001460:	af00      	add	r7, sp, #0
 8001462:	6078      	str	r0, [r7, #4]
 8001464:	460b      	mov	r3, r1
 8001466:	807b      	strh	r3, [r7, #2]
 8001468:	4613      	mov	r3, r2
 800146a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800146c:	787b      	ldrb	r3, [r7, #1]
 800146e:	2b00      	cmp	r3, #0
 8001470:	d003      	beq.n	800147a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001472:	887a      	ldrh	r2, [r7, #2]
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001478:	e003      	b.n	8001482 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800147a:	887b      	ldrh	r3, [r7, #2]
 800147c:	041a      	lsls	r2, r3, #16
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	611a      	str	r2, [r3, #16]
}
 8001482:	bf00      	nop
 8001484:	370c      	adds	r7, #12
 8001486:	46bd      	mov	sp, r7
 8001488:	bc80      	pop	{r7}
 800148a:	4770      	bx	lr

0800148c <HAL_PWR_EnableBkUpAccess>:
  * @note   If the HSE divided by 128 is used as the RTC clock, the
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 800148c:	b480      	push	{r7}
 800148e:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)ENABLE;
 8001490:	4b03      	ldr	r3, [pc, #12]	; (80014a0 <HAL_PWR_EnableBkUpAccess+0x14>)
 8001492:	2201      	movs	r2, #1
 8001494:	601a      	str	r2, [r3, #0]
}
 8001496:	bf00      	nop
 8001498:	46bd      	mov	sp, r7
 800149a:	bc80      	pop	{r7}
 800149c:	4770      	bx	lr
 800149e:	bf00      	nop
 80014a0:	420e0020 	.word	0x420e0020

080014a4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80014a4:	b580      	push	{r7, lr}
 80014a6:	b086      	sub	sp, #24
 80014a8:	af00      	add	r7, sp, #0
 80014aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	d101      	bne.n	80014b6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80014b2:	2301      	movs	r3, #1
 80014b4:	e272      	b.n	800199c <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	f003 0301 	and.w	r3, r3, #1
 80014be:	2b00      	cmp	r3, #0
 80014c0:	f000 8087 	beq.w	80015d2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80014c4:	4b92      	ldr	r3, [pc, #584]	; (8001710 <HAL_RCC_OscConfig+0x26c>)
 80014c6:	685b      	ldr	r3, [r3, #4]
 80014c8:	f003 030c 	and.w	r3, r3, #12
 80014cc:	2b04      	cmp	r3, #4
 80014ce:	d00c      	beq.n	80014ea <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80014d0:	4b8f      	ldr	r3, [pc, #572]	; (8001710 <HAL_RCC_OscConfig+0x26c>)
 80014d2:	685b      	ldr	r3, [r3, #4]
 80014d4:	f003 030c 	and.w	r3, r3, #12
 80014d8:	2b08      	cmp	r3, #8
 80014da:	d112      	bne.n	8001502 <HAL_RCC_OscConfig+0x5e>
 80014dc:	4b8c      	ldr	r3, [pc, #560]	; (8001710 <HAL_RCC_OscConfig+0x26c>)
 80014de:	685b      	ldr	r3, [r3, #4]
 80014e0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80014e4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80014e8:	d10b      	bne.n	8001502 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80014ea:	4b89      	ldr	r3, [pc, #548]	; (8001710 <HAL_RCC_OscConfig+0x26c>)
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d06c      	beq.n	80015d0 <HAL_RCC_OscConfig+0x12c>
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	685b      	ldr	r3, [r3, #4]
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d168      	bne.n	80015d0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80014fe:	2301      	movs	r3, #1
 8001500:	e24c      	b.n	800199c <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	685b      	ldr	r3, [r3, #4]
 8001506:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800150a:	d106      	bne.n	800151a <HAL_RCC_OscConfig+0x76>
 800150c:	4b80      	ldr	r3, [pc, #512]	; (8001710 <HAL_RCC_OscConfig+0x26c>)
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	4a7f      	ldr	r2, [pc, #508]	; (8001710 <HAL_RCC_OscConfig+0x26c>)
 8001512:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001516:	6013      	str	r3, [r2, #0]
 8001518:	e02e      	b.n	8001578 <HAL_RCC_OscConfig+0xd4>
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	685b      	ldr	r3, [r3, #4]
 800151e:	2b00      	cmp	r3, #0
 8001520:	d10c      	bne.n	800153c <HAL_RCC_OscConfig+0x98>
 8001522:	4b7b      	ldr	r3, [pc, #492]	; (8001710 <HAL_RCC_OscConfig+0x26c>)
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	4a7a      	ldr	r2, [pc, #488]	; (8001710 <HAL_RCC_OscConfig+0x26c>)
 8001528:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800152c:	6013      	str	r3, [r2, #0]
 800152e:	4b78      	ldr	r3, [pc, #480]	; (8001710 <HAL_RCC_OscConfig+0x26c>)
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	4a77      	ldr	r2, [pc, #476]	; (8001710 <HAL_RCC_OscConfig+0x26c>)
 8001534:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001538:	6013      	str	r3, [r2, #0]
 800153a:	e01d      	b.n	8001578 <HAL_RCC_OscConfig+0xd4>
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	685b      	ldr	r3, [r3, #4]
 8001540:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001544:	d10c      	bne.n	8001560 <HAL_RCC_OscConfig+0xbc>
 8001546:	4b72      	ldr	r3, [pc, #456]	; (8001710 <HAL_RCC_OscConfig+0x26c>)
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	4a71      	ldr	r2, [pc, #452]	; (8001710 <HAL_RCC_OscConfig+0x26c>)
 800154c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001550:	6013      	str	r3, [r2, #0]
 8001552:	4b6f      	ldr	r3, [pc, #444]	; (8001710 <HAL_RCC_OscConfig+0x26c>)
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	4a6e      	ldr	r2, [pc, #440]	; (8001710 <HAL_RCC_OscConfig+0x26c>)
 8001558:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800155c:	6013      	str	r3, [r2, #0]
 800155e:	e00b      	b.n	8001578 <HAL_RCC_OscConfig+0xd4>
 8001560:	4b6b      	ldr	r3, [pc, #428]	; (8001710 <HAL_RCC_OscConfig+0x26c>)
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	4a6a      	ldr	r2, [pc, #424]	; (8001710 <HAL_RCC_OscConfig+0x26c>)
 8001566:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800156a:	6013      	str	r3, [r2, #0]
 800156c:	4b68      	ldr	r3, [pc, #416]	; (8001710 <HAL_RCC_OscConfig+0x26c>)
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	4a67      	ldr	r2, [pc, #412]	; (8001710 <HAL_RCC_OscConfig+0x26c>)
 8001572:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001576:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	685b      	ldr	r3, [r3, #4]
 800157c:	2b00      	cmp	r3, #0
 800157e:	d013      	beq.n	80015a8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001580:	f7ff fcd6 	bl	8000f30 <HAL_GetTick>
 8001584:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001586:	e008      	b.n	800159a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001588:	f7ff fcd2 	bl	8000f30 <HAL_GetTick>
 800158c:	4602      	mov	r2, r0
 800158e:	693b      	ldr	r3, [r7, #16]
 8001590:	1ad3      	subs	r3, r2, r3
 8001592:	2b64      	cmp	r3, #100	; 0x64
 8001594:	d901      	bls.n	800159a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001596:	2303      	movs	r3, #3
 8001598:	e200      	b.n	800199c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800159a:	4b5d      	ldr	r3, [pc, #372]	; (8001710 <HAL_RCC_OscConfig+0x26c>)
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	d0f0      	beq.n	8001588 <HAL_RCC_OscConfig+0xe4>
 80015a6:	e014      	b.n	80015d2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015a8:	f7ff fcc2 	bl	8000f30 <HAL_GetTick>
 80015ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80015ae:	e008      	b.n	80015c2 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80015b0:	f7ff fcbe 	bl	8000f30 <HAL_GetTick>
 80015b4:	4602      	mov	r2, r0
 80015b6:	693b      	ldr	r3, [r7, #16]
 80015b8:	1ad3      	subs	r3, r2, r3
 80015ba:	2b64      	cmp	r3, #100	; 0x64
 80015bc:	d901      	bls.n	80015c2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80015be:	2303      	movs	r3, #3
 80015c0:	e1ec      	b.n	800199c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80015c2:	4b53      	ldr	r3, [pc, #332]	; (8001710 <HAL_RCC_OscConfig+0x26c>)
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d1f0      	bne.n	80015b0 <HAL_RCC_OscConfig+0x10c>
 80015ce:	e000      	b.n	80015d2 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80015d0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	f003 0302 	and.w	r3, r3, #2
 80015da:	2b00      	cmp	r3, #0
 80015dc:	d063      	beq.n	80016a6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80015de:	4b4c      	ldr	r3, [pc, #304]	; (8001710 <HAL_RCC_OscConfig+0x26c>)
 80015e0:	685b      	ldr	r3, [r3, #4]
 80015e2:	f003 030c 	and.w	r3, r3, #12
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d00b      	beq.n	8001602 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80015ea:	4b49      	ldr	r3, [pc, #292]	; (8001710 <HAL_RCC_OscConfig+0x26c>)
 80015ec:	685b      	ldr	r3, [r3, #4]
 80015ee:	f003 030c 	and.w	r3, r3, #12
 80015f2:	2b08      	cmp	r3, #8
 80015f4:	d11c      	bne.n	8001630 <HAL_RCC_OscConfig+0x18c>
 80015f6:	4b46      	ldr	r3, [pc, #280]	; (8001710 <HAL_RCC_OscConfig+0x26c>)
 80015f8:	685b      	ldr	r3, [r3, #4]
 80015fa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80015fe:	2b00      	cmp	r3, #0
 8001600:	d116      	bne.n	8001630 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001602:	4b43      	ldr	r3, [pc, #268]	; (8001710 <HAL_RCC_OscConfig+0x26c>)
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	f003 0302 	and.w	r3, r3, #2
 800160a:	2b00      	cmp	r3, #0
 800160c:	d005      	beq.n	800161a <HAL_RCC_OscConfig+0x176>
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	691b      	ldr	r3, [r3, #16]
 8001612:	2b01      	cmp	r3, #1
 8001614:	d001      	beq.n	800161a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001616:	2301      	movs	r3, #1
 8001618:	e1c0      	b.n	800199c <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800161a:	4b3d      	ldr	r3, [pc, #244]	; (8001710 <HAL_RCC_OscConfig+0x26c>)
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	695b      	ldr	r3, [r3, #20]
 8001626:	00db      	lsls	r3, r3, #3
 8001628:	4939      	ldr	r1, [pc, #228]	; (8001710 <HAL_RCC_OscConfig+0x26c>)
 800162a:	4313      	orrs	r3, r2
 800162c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800162e:	e03a      	b.n	80016a6 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	691b      	ldr	r3, [r3, #16]
 8001634:	2b00      	cmp	r3, #0
 8001636:	d020      	beq.n	800167a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001638:	4b36      	ldr	r3, [pc, #216]	; (8001714 <HAL_RCC_OscConfig+0x270>)
 800163a:	2201      	movs	r2, #1
 800163c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800163e:	f7ff fc77 	bl	8000f30 <HAL_GetTick>
 8001642:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001644:	e008      	b.n	8001658 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001646:	f7ff fc73 	bl	8000f30 <HAL_GetTick>
 800164a:	4602      	mov	r2, r0
 800164c:	693b      	ldr	r3, [r7, #16]
 800164e:	1ad3      	subs	r3, r2, r3
 8001650:	2b02      	cmp	r3, #2
 8001652:	d901      	bls.n	8001658 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001654:	2303      	movs	r3, #3
 8001656:	e1a1      	b.n	800199c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001658:	4b2d      	ldr	r3, [pc, #180]	; (8001710 <HAL_RCC_OscConfig+0x26c>)
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	f003 0302 	and.w	r3, r3, #2
 8001660:	2b00      	cmp	r3, #0
 8001662:	d0f0      	beq.n	8001646 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001664:	4b2a      	ldr	r3, [pc, #168]	; (8001710 <HAL_RCC_OscConfig+0x26c>)
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	695b      	ldr	r3, [r3, #20]
 8001670:	00db      	lsls	r3, r3, #3
 8001672:	4927      	ldr	r1, [pc, #156]	; (8001710 <HAL_RCC_OscConfig+0x26c>)
 8001674:	4313      	orrs	r3, r2
 8001676:	600b      	str	r3, [r1, #0]
 8001678:	e015      	b.n	80016a6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800167a:	4b26      	ldr	r3, [pc, #152]	; (8001714 <HAL_RCC_OscConfig+0x270>)
 800167c:	2200      	movs	r2, #0
 800167e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001680:	f7ff fc56 	bl	8000f30 <HAL_GetTick>
 8001684:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001686:	e008      	b.n	800169a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001688:	f7ff fc52 	bl	8000f30 <HAL_GetTick>
 800168c:	4602      	mov	r2, r0
 800168e:	693b      	ldr	r3, [r7, #16]
 8001690:	1ad3      	subs	r3, r2, r3
 8001692:	2b02      	cmp	r3, #2
 8001694:	d901      	bls.n	800169a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001696:	2303      	movs	r3, #3
 8001698:	e180      	b.n	800199c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800169a:	4b1d      	ldr	r3, [pc, #116]	; (8001710 <HAL_RCC_OscConfig+0x26c>)
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	f003 0302 	and.w	r3, r3, #2
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d1f0      	bne.n	8001688 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	f003 0308 	and.w	r3, r3, #8
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d03a      	beq.n	8001728 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	699b      	ldr	r3, [r3, #24]
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	d019      	beq.n	80016ee <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80016ba:	4b17      	ldr	r3, [pc, #92]	; (8001718 <HAL_RCC_OscConfig+0x274>)
 80016bc:	2201      	movs	r2, #1
 80016be:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80016c0:	f7ff fc36 	bl	8000f30 <HAL_GetTick>
 80016c4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80016c6:	e008      	b.n	80016da <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80016c8:	f7ff fc32 	bl	8000f30 <HAL_GetTick>
 80016cc:	4602      	mov	r2, r0
 80016ce:	693b      	ldr	r3, [r7, #16]
 80016d0:	1ad3      	subs	r3, r2, r3
 80016d2:	2b02      	cmp	r3, #2
 80016d4:	d901      	bls.n	80016da <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80016d6:	2303      	movs	r3, #3
 80016d8:	e160      	b.n	800199c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80016da:	4b0d      	ldr	r3, [pc, #52]	; (8001710 <HAL_RCC_OscConfig+0x26c>)
 80016dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016de:	f003 0302 	and.w	r3, r3, #2
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	d0f0      	beq.n	80016c8 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80016e6:	2001      	movs	r0, #1
 80016e8:	f000 faba 	bl	8001c60 <RCC_Delay>
 80016ec:	e01c      	b.n	8001728 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80016ee:	4b0a      	ldr	r3, [pc, #40]	; (8001718 <HAL_RCC_OscConfig+0x274>)
 80016f0:	2200      	movs	r2, #0
 80016f2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80016f4:	f7ff fc1c 	bl	8000f30 <HAL_GetTick>
 80016f8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80016fa:	e00f      	b.n	800171c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80016fc:	f7ff fc18 	bl	8000f30 <HAL_GetTick>
 8001700:	4602      	mov	r2, r0
 8001702:	693b      	ldr	r3, [r7, #16]
 8001704:	1ad3      	subs	r3, r2, r3
 8001706:	2b02      	cmp	r3, #2
 8001708:	d908      	bls.n	800171c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800170a:	2303      	movs	r3, #3
 800170c:	e146      	b.n	800199c <HAL_RCC_OscConfig+0x4f8>
 800170e:	bf00      	nop
 8001710:	40021000 	.word	0x40021000
 8001714:	42420000 	.word	0x42420000
 8001718:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800171c:	4b92      	ldr	r3, [pc, #584]	; (8001968 <HAL_RCC_OscConfig+0x4c4>)
 800171e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001720:	f003 0302 	and.w	r3, r3, #2
 8001724:	2b00      	cmp	r3, #0
 8001726:	d1e9      	bne.n	80016fc <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	f003 0304 	and.w	r3, r3, #4
 8001730:	2b00      	cmp	r3, #0
 8001732:	f000 80a6 	beq.w	8001882 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001736:	2300      	movs	r3, #0
 8001738:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800173a:	4b8b      	ldr	r3, [pc, #556]	; (8001968 <HAL_RCC_OscConfig+0x4c4>)
 800173c:	69db      	ldr	r3, [r3, #28]
 800173e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001742:	2b00      	cmp	r3, #0
 8001744:	d10d      	bne.n	8001762 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001746:	4b88      	ldr	r3, [pc, #544]	; (8001968 <HAL_RCC_OscConfig+0x4c4>)
 8001748:	69db      	ldr	r3, [r3, #28]
 800174a:	4a87      	ldr	r2, [pc, #540]	; (8001968 <HAL_RCC_OscConfig+0x4c4>)
 800174c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001750:	61d3      	str	r3, [r2, #28]
 8001752:	4b85      	ldr	r3, [pc, #532]	; (8001968 <HAL_RCC_OscConfig+0x4c4>)
 8001754:	69db      	ldr	r3, [r3, #28]
 8001756:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800175a:	60bb      	str	r3, [r7, #8]
 800175c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800175e:	2301      	movs	r3, #1
 8001760:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001762:	4b82      	ldr	r3, [pc, #520]	; (800196c <HAL_RCC_OscConfig+0x4c8>)
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800176a:	2b00      	cmp	r3, #0
 800176c:	d118      	bne.n	80017a0 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800176e:	4b7f      	ldr	r3, [pc, #508]	; (800196c <HAL_RCC_OscConfig+0x4c8>)
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	4a7e      	ldr	r2, [pc, #504]	; (800196c <HAL_RCC_OscConfig+0x4c8>)
 8001774:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001778:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800177a:	f7ff fbd9 	bl	8000f30 <HAL_GetTick>
 800177e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001780:	e008      	b.n	8001794 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001782:	f7ff fbd5 	bl	8000f30 <HAL_GetTick>
 8001786:	4602      	mov	r2, r0
 8001788:	693b      	ldr	r3, [r7, #16]
 800178a:	1ad3      	subs	r3, r2, r3
 800178c:	2b64      	cmp	r3, #100	; 0x64
 800178e:	d901      	bls.n	8001794 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001790:	2303      	movs	r3, #3
 8001792:	e103      	b.n	800199c <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001794:	4b75      	ldr	r3, [pc, #468]	; (800196c <HAL_RCC_OscConfig+0x4c8>)
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800179c:	2b00      	cmp	r3, #0
 800179e:	d0f0      	beq.n	8001782 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	68db      	ldr	r3, [r3, #12]
 80017a4:	2b01      	cmp	r3, #1
 80017a6:	d106      	bne.n	80017b6 <HAL_RCC_OscConfig+0x312>
 80017a8:	4b6f      	ldr	r3, [pc, #444]	; (8001968 <HAL_RCC_OscConfig+0x4c4>)
 80017aa:	6a1b      	ldr	r3, [r3, #32]
 80017ac:	4a6e      	ldr	r2, [pc, #440]	; (8001968 <HAL_RCC_OscConfig+0x4c4>)
 80017ae:	f043 0301 	orr.w	r3, r3, #1
 80017b2:	6213      	str	r3, [r2, #32]
 80017b4:	e02d      	b.n	8001812 <HAL_RCC_OscConfig+0x36e>
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	68db      	ldr	r3, [r3, #12]
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	d10c      	bne.n	80017d8 <HAL_RCC_OscConfig+0x334>
 80017be:	4b6a      	ldr	r3, [pc, #424]	; (8001968 <HAL_RCC_OscConfig+0x4c4>)
 80017c0:	6a1b      	ldr	r3, [r3, #32]
 80017c2:	4a69      	ldr	r2, [pc, #420]	; (8001968 <HAL_RCC_OscConfig+0x4c4>)
 80017c4:	f023 0301 	bic.w	r3, r3, #1
 80017c8:	6213      	str	r3, [r2, #32]
 80017ca:	4b67      	ldr	r3, [pc, #412]	; (8001968 <HAL_RCC_OscConfig+0x4c4>)
 80017cc:	6a1b      	ldr	r3, [r3, #32]
 80017ce:	4a66      	ldr	r2, [pc, #408]	; (8001968 <HAL_RCC_OscConfig+0x4c4>)
 80017d0:	f023 0304 	bic.w	r3, r3, #4
 80017d4:	6213      	str	r3, [r2, #32]
 80017d6:	e01c      	b.n	8001812 <HAL_RCC_OscConfig+0x36e>
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	68db      	ldr	r3, [r3, #12]
 80017dc:	2b05      	cmp	r3, #5
 80017de:	d10c      	bne.n	80017fa <HAL_RCC_OscConfig+0x356>
 80017e0:	4b61      	ldr	r3, [pc, #388]	; (8001968 <HAL_RCC_OscConfig+0x4c4>)
 80017e2:	6a1b      	ldr	r3, [r3, #32]
 80017e4:	4a60      	ldr	r2, [pc, #384]	; (8001968 <HAL_RCC_OscConfig+0x4c4>)
 80017e6:	f043 0304 	orr.w	r3, r3, #4
 80017ea:	6213      	str	r3, [r2, #32]
 80017ec:	4b5e      	ldr	r3, [pc, #376]	; (8001968 <HAL_RCC_OscConfig+0x4c4>)
 80017ee:	6a1b      	ldr	r3, [r3, #32]
 80017f0:	4a5d      	ldr	r2, [pc, #372]	; (8001968 <HAL_RCC_OscConfig+0x4c4>)
 80017f2:	f043 0301 	orr.w	r3, r3, #1
 80017f6:	6213      	str	r3, [r2, #32]
 80017f8:	e00b      	b.n	8001812 <HAL_RCC_OscConfig+0x36e>
 80017fa:	4b5b      	ldr	r3, [pc, #364]	; (8001968 <HAL_RCC_OscConfig+0x4c4>)
 80017fc:	6a1b      	ldr	r3, [r3, #32]
 80017fe:	4a5a      	ldr	r2, [pc, #360]	; (8001968 <HAL_RCC_OscConfig+0x4c4>)
 8001800:	f023 0301 	bic.w	r3, r3, #1
 8001804:	6213      	str	r3, [r2, #32]
 8001806:	4b58      	ldr	r3, [pc, #352]	; (8001968 <HAL_RCC_OscConfig+0x4c4>)
 8001808:	6a1b      	ldr	r3, [r3, #32]
 800180a:	4a57      	ldr	r2, [pc, #348]	; (8001968 <HAL_RCC_OscConfig+0x4c4>)
 800180c:	f023 0304 	bic.w	r3, r3, #4
 8001810:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	68db      	ldr	r3, [r3, #12]
 8001816:	2b00      	cmp	r3, #0
 8001818:	d015      	beq.n	8001846 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800181a:	f7ff fb89 	bl	8000f30 <HAL_GetTick>
 800181e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001820:	e00a      	b.n	8001838 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001822:	f7ff fb85 	bl	8000f30 <HAL_GetTick>
 8001826:	4602      	mov	r2, r0
 8001828:	693b      	ldr	r3, [r7, #16]
 800182a:	1ad3      	subs	r3, r2, r3
 800182c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001830:	4293      	cmp	r3, r2
 8001832:	d901      	bls.n	8001838 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001834:	2303      	movs	r3, #3
 8001836:	e0b1      	b.n	800199c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001838:	4b4b      	ldr	r3, [pc, #300]	; (8001968 <HAL_RCC_OscConfig+0x4c4>)
 800183a:	6a1b      	ldr	r3, [r3, #32]
 800183c:	f003 0302 	and.w	r3, r3, #2
 8001840:	2b00      	cmp	r3, #0
 8001842:	d0ee      	beq.n	8001822 <HAL_RCC_OscConfig+0x37e>
 8001844:	e014      	b.n	8001870 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001846:	f7ff fb73 	bl	8000f30 <HAL_GetTick>
 800184a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800184c:	e00a      	b.n	8001864 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800184e:	f7ff fb6f 	bl	8000f30 <HAL_GetTick>
 8001852:	4602      	mov	r2, r0
 8001854:	693b      	ldr	r3, [r7, #16]
 8001856:	1ad3      	subs	r3, r2, r3
 8001858:	f241 3288 	movw	r2, #5000	; 0x1388
 800185c:	4293      	cmp	r3, r2
 800185e:	d901      	bls.n	8001864 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001860:	2303      	movs	r3, #3
 8001862:	e09b      	b.n	800199c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001864:	4b40      	ldr	r3, [pc, #256]	; (8001968 <HAL_RCC_OscConfig+0x4c4>)
 8001866:	6a1b      	ldr	r3, [r3, #32]
 8001868:	f003 0302 	and.w	r3, r3, #2
 800186c:	2b00      	cmp	r3, #0
 800186e:	d1ee      	bne.n	800184e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001870:	7dfb      	ldrb	r3, [r7, #23]
 8001872:	2b01      	cmp	r3, #1
 8001874:	d105      	bne.n	8001882 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001876:	4b3c      	ldr	r3, [pc, #240]	; (8001968 <HAL_RCC_OscConfig+0x4c4>)
 8001878:	69db      	ldr	r3, [r3, #28]
 800187a:	4a3b      	ldr	r2, [pc, #236]	; (8001968 <HAL_RCC_OscConfig+0x4c4>)
 800187c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001880:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	69db      	ldr	r3, [r3, #28]
 8001886:	2b00      	cmp	r3, #0
 8001888:	f000 8087 	beq.w	800199a <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800188c:	4b36      	ldr	r3, [pc, #216]	; (8001968 <HAL_RCC_OscConfig+0x4c4>)
 800188e:	685b      	ldr	r3, [r3, #4]
 8001890:	f003 030c 	and.w	r3, r3, #12
 8001894:	2b08      	cmp	r3, #8
 8001896:	d061      	beq.n	800195c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	69db      	ldr	r3, [r3, #28]
 800189c:	2b02      	cmp	r3, #2
 800189e:	d146      	bne.n	800192e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80018a0:	4b33      	ldr	r3, [pc, #204]	; (8001970 <HAL_RCC_OscConfig+0x4cc>)
 80018a2:	2200      	movs	r2, #0
 80018a4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018a6:	f7ff fb43 	bl	8000f30 <HAL_GetTick>
 80018aa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80018ac:	e008      	b.n	80018c0 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80018ae:	f7ff fb3f 	bl	8000f30 <HAL_GetTick>
 80018b2:	4602      	mov	r2, r0
 80018b4:	693b      	ldr	r3, [r7, #16]
 80018b6:	1ad3      	subs	r3, r2, r3
 80018b8:	2b02      	cmp	r3, #2
 80018ba:	d901      	bls.n	80018c0 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80018bc:	2303      	movs	r3, #3
 80018be:	e06d      	b.n	800199c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80018c0:	4b29      	ldr	r3, [pc, #164]	; (8001968 <HAL_RCC_OscConfig+0x4c4>)
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	d1f0      	bne.n	80018ae <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	6a1b      	ldr	r3, [r3, #32]
 80018d0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80018d4:	d108      	bne.n	80018e8 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80018d6:	4b24      	ldr	r3, [pc, #144]	; (8001968 <HAL_RCC_OscConfig+0x4c4>)
 80018d8:	685b      	ldr	r3, [r3, #4]
 80018da:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	689b      	ldr	r3, [r3, #8]
 80018e2:	4921      	ldr	r1, [pc, #132]	; (8001968 <HAL_RCC_OscConfig+0x4c4>)
 80018e4:	4313      	orrs	r3, r2
 80018e6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80018e8:	4b1f      	ldr	r3, [pc, #124]	; (8001968 <HAL_RCC_OscConfig+0x4c4>)
 80018ea:	685b      	ldr	r3, [r3, #4]
 80018ec:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	6a19      	ldr	r1, [r3, #32]
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018f8:	430b      	orrs	r3, r1
 80018fa:	491b      	ldr	r1, [pc, #108]	; (8001968 <HAL_RCC_OscConfig+0x4c4>)
 80018fc:	4313      	orrs	r3, r2
 80018fe:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001900:	4b1b      	ldr	r3, [pc, #108]	; (8001970 <HAL_RCC_OscConfig+0x4cc>)
 8001902:	2201      	movs	r2, #1
 8001904:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001906:	f7ff fb13 	bl	8000f30 <HAL_GetTick>
 800190a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800190c:	e008      	b.n	8001920 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800190e:	f7ff fb0f 	bl	8000f30 <HAL_GetTick>
 8001912:	4602      	mov	r2, r0
 8001914:	693b      	ldr	r3, [r7, #16]
 8001916:	1ad3      	subs	r3, r2, r3
 8001918:	2b02      	cmp	r3, #2
 800191a:	d901      	bls.n	8001920 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800191c:	2303      	movs	r3, #3
 800191e:	e03d      	b.n	800199c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001920:	4b11      	ldr	r3, [pc, #68]	; (8001968 <HAL_RCC_OscConfig+0x4c4>)
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001928:	2b00      	cmp	r3, #0
 800192a:	d0f0      	beq.n	800190e <HAL_RCC_OscConfig+0x46a>
 800192c:	e035      	b.n	800199a <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800192e:	4b10      	ldr	r3, [pc, #64]	; (8001970 <HAL_RCC_OscConfig+0x4cc>)
 8001930:	2200      	movs	r2, #0
 8001932:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001934:	f7ff fafc 	bl	8000f30 <HAL_GetTick>
 8001938:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800193a:	e008      	b.n	800194e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800193c:	f7ff faf8 	bl	8000f30 <HAL_GetTick>
 8001940:	4602      	mov	r2, r0
 8001942:	693b      	ldr	r3, [r7, #16]
 8001944:	1ad3      	subs	r3, r2, r3
 8001946:	2b02      	cmp	r3, #2
 8001948:	d901      	bls.n	800194e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800194a:	2303      	movs	r3, #3
 800194c:	e026      	b.n	800199c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800194e:	4b06      	ldr	r3, [pc, #24]	; (8001968 <HAL_RCC_OscConfig+0x4c4>)
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001956:	2b00      	cmp	r3, #0
 8001958:	d1f0      	bne.n	800193c <HAL_RCC_OscConfig+0x498>
 800195a:	e01e      	b.n	800199a <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	69db      	ldr	r3, [r3, #28]
 8001960:	2b01      	cmp	r3, #1
 8001962:	d107      	bne.n	8001974 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001964:	2301      	movs	r3, #1
 8001966:	e019      	b.n	800199c <HAL_RCC_OscConfig+0x4f8>
 8001968:	40021000 	.word	0x40021000
 800196c:	40007000 	.word	0x40007000
 8001970:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001974:	4b0b      	ldr	r3, [pc, #44]	; (80019a4 <HAL_RCC_OscConfig+0x500>)
 8001976:	685b      	ldr	r3, [r3, #4]
 8001978:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800197a:	68fb      	ldr	r3, [r7, #12]
 800197c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	6a1b      	ldr	r3, [r3, #32]
 8001984:	429a      	cmp	r2, r3
 8001986:	d106      	bne.n	8001996 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001988:	68fb      	ldr	r3, [r7, #12]
 800198a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001992:	429a      	cmp	r2, r3
 8001994:	d001      	beq.n	800199a <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8001996:	2301      	movs	r3, #1
 8001998:	e000      	b.n	800199c <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800199a:	2300      	movs	r3, #0
}
 800199c:	4618      	mov	r0, r3
 800199e:	3718      	adds	r7, #24
 80019a0:	46bd      	mov	sp, r7
 80019a2:	bd80      	pop	{r7, pc}
 80019a4:	40021000 	.word	0x40021000

080019a8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80019a8:	b580      	push	{r7, lr}
 80019aa:	b084      	sub	sp, #16
 80019ac:	af00      	add	r7, sp, #0
 80019ae:	6078      	str	r0, [r7, #4]
 80019b0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	d101      	bne.n	80019bc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80019b8:	2301      	movs	r3, #1
 80019ba:	e0d0      	b.n	8001b5e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80019bc:	4b6a      	ldr	r3, [pc, #424]	; (8001b68 <HAL_RCC_ClockConfig+0x1c0>)
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	f003 0307 	and.w	r3, r3, #7
 80019c4:	683a      	ldr	r2, [r7, #0]
 80019c6:	429a      	cmp	r2, r3
 80019c8:	d910      	bls.n	80019ec <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80019ca:	4b67      	ldr	r3, [pc, #412]	; (8001b68 <HAL_RCC_ClockConfig+0x1c0>)
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	f023 0207 	bic.w	r2, r3, #7
 80019d2:	4965      	ldr	r1, [pc, #404]	; (8001b68 <HAL_RCC_ClockConfig+0x1c0>)
 80019d4:	683b      	ldr	r3, [r7, #0]
 80019d6:	4313      	orrs	r3, r2
 80019d8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80019da:	4b63      	ldr	r3, [pc, #396]	; (8001b68 <HAL_RCC_ClockConfig+0x1c0>)
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	f003 0307 	and.w	r3, r3, #7
 80019e2:	683a      	ldr	r2, [r7, #0]
 80019e4:	429a      	cmp	r2, r3
 80019e6:	d001      	beq.n	80019ec <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80019e8:	2301      	movs	r3, #1
 80019ea:	e0b8      	b.n	8001b5e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	f003 0302 	and.w	r3, r3, #2
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	d020      	beq.n	8001a3a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	f003 0304 	and.w	r3, r3, #4
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	d005      	beq.n	8001a10 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001a04:	4b59      	ldr	r3, [pc, #356]	; (8001b6c <HAL_RCC_ClockConfig+0x1c4>)
 8001a06:	685b      	ldr	r3, [r3, #4]
 8001a08:	4a58      	ldr	r2, [pc, #352]	; (8001b6c <HAL_RCC_ClockConfig+0x1c4>)
 8001a0a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001a0e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	f003 0308 	and.w	r3, r3, #8
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	d005      	beq.n	8001a28 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001a1c:	4b53      	ldr	r3, [pc, #332]	; (8001b6c <HAL_RCC_ClockConfig+0x1c4>)
 8001a1e:	685b      	ldr	r3, [r3, #4]
 8001a20:	4a52      	ldr	r2, [pc, #328]	; (8001b6c <HAL_RCC_ClockConfig+0x1c4>)
 8001a22:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001a26:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001a28:	4b50      	ldr	r3, [pc, #320]	; (8001b6c <HAL_RCC_ClockConfig+0x1c4>)
 8001a2a:	685b      	ldr	r3, [r3, #4]
 8001a2c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	689b      	ldr	r3, [r3, #8]
 8001a34:	494d      	ldr	r1, [pc, #308]	; (8001b6c <HAL_RCC_ClockConfig+0x1c4>)
 8001a36:	4313      	orrs	r3, r2
 8001a38:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	f003 0301 	and.w	r3, r3, #1
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d040      	beq.n	8001ac8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	685b      	ldr	r3, [r3, #4]
 8001a4a:	2b01      	cmp	r3, #1
 8001a4c:	d107      	bne.n	8001a5e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a4e:	4b47      	ldr	r3, [pc, #284]	; (8001b6c <HAL_RCC_ClockConfig+0x1c4>)
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d115      	bne.n	8001a86 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001a5a:	2301      	movs	r3, #1
 8001a5c:	e07f      	b.n	8001b5e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	685b      	ldr	r3, [r3, #4]
 8001a62:	2b02      	cmp	r3, #2
 8001a64:	d107      	bne.n	8001a76 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001a66:	4b41      	ldr	r3, [pc, #260]	; (8001b6c <HAL_RCC_ClockConfig+0x1c4>)
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d109      	bne.n	8001a86 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001a72:	2301      	movs	r3, #1
 8001a74:	e073      	b.n	8001b5e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a76:	4b3d      	ldr	r3, [pc, #244]	; (8001b6c <HAL_RCC_ClockConfig+0x1c4>)
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	f003 0302 	and.w	r3, r3, #2
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d101      	bne.n	8001a86 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001a82:	2301      	movs	r3, #1
 8001a84:	e06b      	b.n	8001b5e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001a86:	4b39      	ldr	r3, [pc, #228]	; (8001b6c <HAL_RCC_ClockConfig+0x1c4>)
 8001a88:	685b      	ldr	r3, [r3, #4]
 8001a8a:	f023 0203 	bic.w	r2, r3, #3
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	685b      	ldr	r3, [r3, #4]
 8001a92:	4936      	ldr	r1, [pc, #216]	; (8001b6c <HAL_RCC_ClockConfig+0x1c4>)
 8001a94:	4313      	orrs	r3, r2
 8001a96:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001a98:	f7ff fa4a 	bl	8000f30 <HAL_GetTick>
 8001a9c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a9e:	e00a      	b.n	8001ab6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001aa0:	f7ff fa46 	bl	8000f30 <HAL_GetTick>
 8001aa4:	4602      	mov	r2, r0
 8001aa6:	68fb      	ldr	r3, [r7, #12]
 8001aa8:	1ad3      	subs	r3, r2, r3
 8001aaa:	f241 3288 	movw	r2, #5000	; 0x1388
 8001aae:	4293      	cmp	r3, r2
 8001ab0:	d901      	bls.n	8001ab6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001ab2:	2303      	movs	r3, #3
 8001ab4:	e053      	b.n	8001b5e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001ab6:	4b2d      	ldr	r3, [pc, #180]	; (8001b6c <HAL_RCC_ClockConfig+0x1c4>)
 8001ab8:	685b      	ldr	r3, [r3, #4]
 8001aba:	f003 020c 	and.w	r2, r3, #12
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	685b      	ldr	r3, [r3, #4]
 8001ac2:	009b      	lsls	r3, r3, #2
 8001ac4:	429a      	cmp	r2, r3
 8001ac6:	d1eb      	bne.n	8001aa0 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001ac8:	4b27      	ldr	r3, [pc, #156]	; (8001b68 <HAL_RCC_ClockConfig+0x1c0>)
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	f003 0307 	and.w	r3, r3, #7
 8001ad0:	683a      	ldr	r2, [r7, #0]
 8001ad2:	429a      	cmp	r2, r3
 8001ad4:	d210      	bcs.n	8001af8 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ad6:	4b24      	ldr	r3, [pc, #144]	; (8001b68 <HAL_RCC_ClockConfig+0x1c0>)
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	f023 0207 	bic.w	r2, r3, #7
 8001ade:	4922      	ldr	r1, [pc, #136]	; (8001b68 <HAL_RCC_ClockConfig+0x1c0>)
 8001ae0:	683b      	ldr	r3, [r7, #0]
 8001ae2:	4313      	orrs	r3, r2
 8001ae4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ae6:	4b20      	ldr	r3, [pc, #128]	; (8001b68 <HAL_RCC_ClockConfig+0x1c0>)
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	f003 0307 	and.w	r3, r3, #7
 8001aee:	683a      	ldr	r2, [r7, #0]
 8001af0:	429a      	cmp	r2, r3
 8001af2:	d001      	beq.n	8001af8 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001af4:	2301      	movs	r3, #1
 8001af6:	e032      	b.n	8001b5e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	f003 0304 	and.w	r3, r3, #4
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	d008      	beq.n	8001b16 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001b04:	4b19      	ldr	r3, [pc, #100]	; (8001b6c <HAL_RCC_ClockConfig+0x1c4>)
 8001b06:	685b      	ldr	r3, [r3, #4]
 8001b08:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	68db      	ldr	r3, [r3, #12]
 8001b10:	4916      	ldr	r1, [pc, #88]	; (8001b6c <HAL_RCC_ClockConfig+0x1c4>)
 8001b12:	4313      	orrs	r3, r2
 8001b14:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	f003 0308 	and.w	r3, r3, #8
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d009      	beq.n	8001b36 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001b22:	4b12      	ldr	r3, [pc, #72]	; (8001b6c <HAL_RCC_ClockConfig+0x1c4>)
 8001b24:	685b      	ldr	r3, [r3, #4]
 8001b26:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	691b      	ldr	r3, [r3, #16]
 8001b2e:	00db      	lsls	r3, r3, #3
 8001b30:	490e      	ldr	r1, [pc, #56]	; (8001b6c <HAL_RCC_ClockConfig+0x1c4>)
 8001b32:	4313      	orrs	r3, r2
 8001b34:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001b36:	f000 f821 	bl	8001b7c <HAL_RCC_GetSysClockFreq>
 8001b3a:	4602      	mov	r2, r0
 8001b3c:	4b0b      	ldr	r3, [pc, #44]	; (8001b6c <HAL_RCC_ClockConfig+0x1c4>)
 8001b3e:	685b      	ldr	r3, [r3, #4]
 8001b40:	091b      	lsrs	r3, r3, #4
 8001b42:	f003 030f 	and.w	r3, r3, #15
 8001b46:	490a      	ldr	r1, [pc, #40]	; (8001b70 <HAL_RCC_ClockConfig+0x1c8>)
 8001b48:	5ccb      	ldrb	r3, [r1, r3]
 8001b4a:	fa22 f303 	lsr.w	r3, r2, r3
 8001b4e:	4a09      	ldr	r2, [pc, #36]	; (8001b74 <HAL_RCC_ClockConfig+0x1cc>)
 8001b50:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001b52:	4b09      	ldr	r3, [pc, #36]	; (8001b78 <HAL_RCC_ClockConfig+0x1d0>)
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	4618      	mov	r0, r3
 8001b58:	f7ff f9a8 	bl	8000eac <HAL_InitTick>

  return HAL_OK;
 8001b5c:	2300      	movs	r3, #0
}
 8001b5e:	4618      	mov	r0, r3
 8001b60:	3710      	adds	r7, #16
 8001b62:	46bd      	mov	sp, r7
 8001b64:	bd80      	pop	{r7, pc}
 8001b66:	bf00      	nop
 8001b68:	40022000 	.word	0x40022000
 8001b6c:	40021000 	.word	0x40021000
 8001b70:	08004efc 	.word	0x08004efc
 8001b74:	20000010 	.word	0x20000010
 8001b78:	20000014 	.word	0x20000014

08001b7c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001b7c:	b480      	push	{r7}
 8001b7e:	b087      	sub	sp, #28
 8001b80:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001b82:	2300      	movs	r3, #0
 8001b84:	60fb      	str	r3, [r7, #12]
 8001b86:	2300      	movs	r3, #0
 8001b88:	60bb      	str	r3, [r7, #8]
 8001b8a:	2300      	movs	r3, #0
 8001b8c:	617b      	str	r3, [r7, #20]
 8001b8e:	2300      	movs	r3, #0
 8001b90:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8001b92:	2300      	movs	r3, #0
 8001b94:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001b96:	4b1e      	ldr	r3, [pc, #120]	; (8001c10 <HAL_RCC_GetSysClockFreq+0x94>)
 8001b98:	685b      	ldr	r3, [r3, #4]
 8001b9a:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001b9c:	68fb      	ldr	r3, [r7, #12]
 8001b9e:	f003 030c 	and.w	r3, r3, #12
 8001ba2:	2b04      	cmp	r3, #4
 8001ba4:	d002      	beq.n	8001bac <HAL_RCC_GetSysClockFreq+0x30>
 8001ba6:	2b08      	cmp	r3, #8
 8001ba8:	d003      	beq.n	8001bb2 <HAL_RCC_GetSysClockFreq+0x36>
 8001baa:	e027      	b.n	8001bfc <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001bac:	4b19      	ldr	r3, [pc, #100]	; (8001c14 <HAL_RCC_GetSysClockFreq+0x98>)
 8001bae:	613b      	str	r3, [r7, #16]
      break;
 8001bb0:	e027      	b.n	8001c02 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001bb2:	68fb      	ldr	r3, [r7, #12]
 8001bb4:	0c9b      	lsrs	r3, r3, #18
 8001bb6:	f003 030f 	and.w	r3, r3, #15
 8001bba:	4a17      	ldr	r2, [pc, #92]	; (8001c18 <HAL_RCC_GetSysClockFreq+0x9c>)
 8001bbc:	5cd3      	ldrb	r3, [r2, r3]
 8001bbe:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001bc0:	68fb      	ldr	r3, [r7, #12]
 8001bc2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d010      	beq.n	8001bec <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001bca:	4b11      	ldr	r3, [pc, #68]	; (8001c10 <HAL_RCC_GetSysClockFreq+0x94>)
 8001bcc:	685b      	ldr	r3, [r3, #4]
 8001bce:	0c5b      	lsrs	r3, r3, #17
 8001bd0:	f003 0301 	and.w	r3, r3, #1
 8001bd4:	4a11      	ldr	r2, [pc, #68]	; (8001c1c <HAL_RCC_GetSysClockFreq+0xa0>)
 8001bd6:	5cd3      	ldrb	r3, [r2, r3]
 8001bd8:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	4a0d      	ldr	r2, [pc, #52]	; (8001c14 <HAL_RCC_GetSysClockFreq+0x98>)
 8001bde:	fb03 f202 	mul.w	r2, r3, r2
 8001be2:	68bb      	ldr	r3, [r7, #8]
 8001be4:	fbb2 f3f3 	udiv	r3, r2, r3
 8001be8:	617b      	str	r3, [r7, #20]
 8001bea:	e004      	b.n	8001bf6 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	4a0c      	ldr	r2, [pc, #48]	; (8001c20 <HAL_RCC_GetSysClockFreq+0xa4>)
 8001bf0:	fb02 f303 	mul.w	r3, r2, r3
 8001bf4:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8001bf6:	697b      	ldr	r3, [r7, #20]
 8001bf8:	613b      	str	r3, [r7, #16]
      break;
 8001bfa:	e002      	b.n	8001c02 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001bfc:	4b05      	ldr	r3, [pc, #20]	; (8001c14 <HAL_RCC_GetSysClockFreq+0x98>)
 8001bfe:	613b      	str	r3, [r7, #16]
      break;
 8001c00:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001c02:	693b      	ldr	r3, [r7, #16]
}
 8001c04:	4618      	mov	r0, r3
 8001c06:	371c      	adds	r7, #28
 8001c08:	46bd      	mov	sp, r7
 8001c0a:	bc80      	pop	{r7}
 8001c0c:	4770      	bx	lr
 8001c0e:	bf00      	nop
 8001c10:	40021000 	.word	0x40021000
 8001c14:	007a1200 	.word	0x007a1200
 8001c18:	08004f14 	.word	0x08004f14
 8001c1c:	08004f24 	.word	0x08004f24
 8001c20:	003d0900 	.word	0x003d0900

08001c24 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001c24:	b480      	push	{r7}
 8001c26:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001c28:	4b02      	ldr	r3, [pc, #8]	; (8001c34 <HAL_RCC_GetHCLKFreq+0x10>)
 8001c2a:	681b      	ldr	r3, [r3, #0]
}
 8001c2c:	4618      	mov	r0, r3
 8001c2e:	46bd      	mov	sp, r7
 8001c30:	bc80      	pop	{r7}
 8001c32:	4770      	bx	lr
 8001c34:	20000010 	.word	0x20000010

08001c38 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001c38:	b580      	push	{r7, lr}
 8001c3a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001c3c:	f7ff fff2 	bl	8001c24 <HAL_RCC_GetHCLKFreq>
 8001c40:	4602      	mov	r2, r0
 8001c42:	4b05      	ldr	r3, [pc, #20]	; (8001c58 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001c44:	685b      	ldr	r3, [r3, #4]
 8001c46:	0adb      	lsrs	r3, r3, #11
 8001c48:	f003 0307 	and.w	r3, r3, #7
 8001c4c:	4903      	ldr	r1, [pc, #12]	; (8001c5c <HAL_RCC_GetPCLK2Freq+0x24>)
 8001c4e:	5ccb      	ldrb	r3, [r1, r3]
 8001c50:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001c54:	4618      	mov	r0, r3
 8001c56:	bd80      	pop	{r7, pc}
 8001c58:	40021000 	.word	0x40021000
 8001c5c:	08004f0c 	.word	0x08004f0c

08001c60 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001c60:	b480      	push	{r7}
 8001c62:	b085      	sub	sp, #20
 8001c64:	af00      	add	r7, sp, #0
 8001c66:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001c68:	4b0a      	ldr	r3, [pc, #40]	; (8001c94 <RCC_Delay+0x34>)
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	4a0a      	ldr	r2, [pc, #40]	; (8001c98 <RCC_Delay+0x38>)
 8001c6e:	fba2 2303 	umull	r2, r3, r2, r3
 8001c72:	0a5b      	lsrs	r3, r3, #9
 8001c74:	687a      	ldr	r2, [r7, #4]
 8001c76:	fb02 f303 	mul.w	r3, r2, r3
 8001c7a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001c7c:	bf00      	nop
  }
  while (Delay --);
 8001c7e:	68fb      	ldr	r3, [r7, #12]
 8001c80:	1e5a      	subs	r2, r3, #1
 8001c82:	60fa      	str	r2, [r7, #12]
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	d1f9      	bne.n	8001c7c <RCC_Delay+0x1c>
}
 8001c88:	bf00      	nop
 8001c8a:	bf00      	nop
 8001c8c:	3714      	adds	r7, #20
 8001c8e:	46bd      	mov	sp, r7
 8001c90:	bc80      	pop	{r7}
 8001c92:	4770      	bx	lr
 8001c94:	20000010 	.word	0x20000010
 8001c98:	10624dd3 	.word	0x10624dd3

08001c9c <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001c9c:	b580      	push	{r7, lr}
 8001c9e:	b086      	sub	sp, #24
 8001ca0:	af00      	add	r7, sp, #0
 8001ca2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8001ca4:	2300      	movs	r3, #0
 8001ca6:	613b      	str	r3, [r7, #16]
 8001ca8:	2300      	movs	r3, #0
 8001caa:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	f003 0301 	and.w	r3, r3, #1
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	d07d      	beq.n	8001db4 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8001cb8:	2300      	movs	r3, #0
 8001cba:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001cbc:	4b4f      	ldr	r3, [pc, #316]	; (8001dfc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001cbe:	69db      	ldr	r3, [r3, #28]
 8001cc0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	d10d      	bne.n	8001ce4 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001cc8:	4b4c      	ldr	r3, [pc, #304]	; (8001dfc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001cca:	69db      	ldr	r3, [r3, #28]
 8001ccc:	4a4b      	ldr	r2, [pc, #300]	; (8001dfc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001cce:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001cd2:	61d3      	str	r3, [r2, #28]
 8001cd4:	4b49      	ldr	r3, [pc, #292]	; (8001dfc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001cd6:	69db      	ldr	r3, [r3, #28]
 8001cd8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001cdc:	60bb      	str	r3, [r7, #8]
 8001cde:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001ce0:	2301      	movs	r3, #1
 8001ce2:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ce4:	4b46      	ldr	r3, [pc, #280]	; (8001e00 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d118      	bne.n	8001d22 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001cf0:	4b43      	ldr	r3, [pc, #268]	; (8001e00 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	4a42      	ldr	r2, [pc, #264]	; (8001e00 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8001cf6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001cfa:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001cfc:	f7ff f918 	bl	8000f30 <HAL_GetTick>
 8001d00:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d02:	e008      	b.n	8001d16 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001d04:	f7ff f914 	bl	8000f30 <HAL_GetTick>
 8001d08:	4602      	mov	r2, r0
 8001d0a:	693b      	ldr	r3, [r7, #16]
 8001d0c:	1ad3      	subs	r3, r2, r3
 8001d0e:	2b64      	cmp	r3, #100	; 0x64
 8001d10:	d901      	bls.n	8001d16 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8001d12:	2303      	movs	r3, #3
 8001d14:	e06d      	b.n	8001df2 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d16:	4b3a      	ldr	r3, [pc, #232]	; (8001e00 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d0f0      	beq.n	8001d04 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001d22:	4b36      	ldr	r3, [pc, #216]	; (8001dfc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001d24:	6a1b      	ldr	r3, [r3, #32]
 8001d26:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001d2a:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001d2c:	68fb      	ldr	r3, [r7, #12]
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d02e      	beq.n	8001d90 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	685b      	ldr	r3, [r3, #4]
 8001d36:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001d3a:	68fa      	ldr	r2, [r7, #12]
 8001d3c:	429a      	cmp	r2, r3
 8001d3e:	d027      	beq.n	8001d90 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001d40:	4b2e      	ldr	r3, [pc, #184]	; (8001dfc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001d42:	6a1b      	ldr	r3, [r3, #32]
 8001d44:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001d48:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001d4a:	4b2e      	ldr	r3, [pc, #184]	; (8001e04 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8001d4c:	2201      	movs	r2, #1
 8001d4e:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001d50:	4b2c      	ldr	r3, [pc, #176]	; (8001e04 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8001d52:	2200      	movs	r2, #0
 8001d54:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8001d56:	4a29      	ldr	r2, [pc, #164]	; (8001dfc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001d58:	68fb      	ldr	r3, [r7, #12]
 8001d5a:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8001d5c:	68fb      	ldr	r3, [r7, #12]
 8001d5e:	f003 0301 	and.w	r3, r3, #1
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d014      	beq.n	8001d90 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d66:	f7ff f8e3 	bl	8000f30 <HAL_GetTick>
 8001d6a:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d6c:	e00a      	b.n	8001d84 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001d6e:	f7ff f8df 	bl	8000f30 <HAL_GetTick>
 8001d72:	4602      	mov	r2, r0
 8001d74:	693b      	ldr	r3, [r7, #16]
 8001d76:	1ad3      	subs	r3, r2, r3
 8001d78:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d7c:	4293      	cmp	r3, r2
 8001d7e:	d901      	bls.n	8001d84 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8001d80:	2303      	movs	r3, #3
 8001d82:	e036      	b.n	8001df2 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d84:	4b1d      	ldr	r3, [pc, #116]	; (8001dfc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001d86:	6a1b      	ldr	r3, [r3, #32]
 8001d88:	f003 0302 	and.w	r3, r3, #2
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d0ee      	beq.n	8001d6e <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001d90:	4b1a      	ldr	r3, [pc, #104]	; (8001dfc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001d92:	6a1b      	ldr	r3, [r3, #32]
 8001d94:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	685b      	ldr	r3, [r3, #4]
 8001d9c:	4917      	ldr	r1, [pc, #92]	; (8001dfc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001d9e:	4313      	orrs	r3, r2
 8001da0:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001da2:	7dfb      	ldrb	r3, [r7, #23]
 8001da4:	2b01      	cmp	r3, #1
 8001da6:	d105      	bne.n	8001db4 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001da8:	4b14      	ldr	r3, [pc, #80]	; (8001dfc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001daa:	69db      	ldr	r3, [r3, #28]
 8001dac:	4a13      	ldr	r2, [pc, #76]	; (8001dfc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001dae:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001db2:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	f003 0302 	and.w	r3, r3, #2
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	d008      	beq.n	8001dd2 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8001dc0:	4b0e      	ldr	r3, [pc, #56]	; (8001dfc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001dc2:	685b      	ldr	r3, [r3, #4]
 8001dc4:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	689b      	ldr	r3, [r3, #8]
 8001dcc:	490b      	ldr	r1, [pc, #44]	; (8001dfc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001dce:	4313      	orrs	r3, r2
 8001dd0:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	f003 0310 	and.w	r3, r3, #16
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d008      	beq.n	8001df0 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8001dde:	4b07      	ldr	r3, [pc, #28]	; (8001dfc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001de0:	685b      	ldr	r3, [r3, #4]
 8001de2:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	68db      	ldr	r3, [r3, #12]
 8001dea:	4904      	ldr	r1, [pc, #16]	; (8001dfc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001dec:	4313      	orrs	r3, r2
 8001dee:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8001df0:	2300      	movs	r3, #0
}
 8001df2:	4618      	mov	r0, r3
 8001df4:	3718      	adds	r7, #24
 8001df6:	46bd      	mov	sp, r7
 8001df8:	bd80      	pop	{r7, pc}
 8001dfa:	bf00      	nop
 8001dfc:	40021000 	.word	0x40021000
 8001e00:	40007000 	.word	0x40007000
 8001e04:	42420440 	.word	0x42420440

08001e08 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8001e08:	b580      	push	{r7, lr}
 8001e0a:	b088      	sub	sp, #32
 8001e0c:	af00      	add	r7, sp, #0
 8001e0e:	6078      	str	r0, [r7, #4]
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  static const uint8_t aPLLMULFactorTable[16U] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
  static const uint8_t aPredivFactorTable[2U] = {1, 2};

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 8001e10:	2300      	movs	r3, #0
 8001e12:	617b      	str	r3, [r7, #20]
 8001e14:	2300      	movs	r3, #0
 8001e16:	61fb      	str	r3, [r7, #28]
 8001e18:	2300      	movs	r3, #0
 8001e1a:	613b      	str	r3, [r7, #16]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 8001e1c:	2300      	movs	r3, #0
 8001e1e:	60fb      	str	r3, [r7, #12]
 8001e20:	2300      	movs	r3, #0
 8001e22:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	2b10      	cmp	r3, #16
 8001e28:	d00a      	beq.n	8001e40 <HAL_RCCEx_GetPeriphCLKFreq+0x38>
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	2b10      	cmp	r3, #16
 8001e2e:	f200 808a 	bhi.w	8001f46 <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	2b01      	cmp	r3, #1
 8001e36:	d045      	beq.n	8001ec4 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	2b02      	cmp	r3, #2
 8001e3c:	d075      	beq.n	8001f2a <HAL_RCCEx_GetPeriphCLKFreq+0x122>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 8001e3e:	e082      	b.n	8001f46 <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
      temp_reg = RCC->CFGR;
 8001e40:	4b46      	ldr	r3, [pc, #280]	; (8001f5c <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8001e42:	685b      	ldr	r3, [r3, #4]
 8001e44:	60fb      	str	r3, [r7, #12]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 8001e46:	4b45      	ldr	r3, [pc, #276]	; (8001f5c <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d07b      	beq.n	8001f4a <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001e52:	68fb      	ldr	r3, [r7, #12]
 8001e54:	0c9b      	lsrs	r3, r3, #18
 8001e56:	f003 030f 	and.w	r3, r3, #15
 8001e5a:	4a41      	ldr	r2, [pc, #260]	; (8001f60 <HAL_RCCEx_GetPeriphCLKFreq+0x158>)
 8001e5c:	5cd3      	ldrb	r3, [r2, r3]
 8001e5e:	613b      	str	r3, [r7, #16]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001e60:	68fb      	ldr	r3, [r7, #12]
 8001e62:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d015      	beq.n	8001e96 <HAL_RCCEx_GetPeriphCLKFreq+0x8e>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001e6a:	4b3c      	ldr	r3, [pc, #240]	; (8001f5c <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8001e6c:	685b      	ldr	r3, [r3, #4]
 8001e6e:	0c5b      	lsrs	r3, r3, #17
 8001e70:	f003 0301 	and.w	r3, r3, #1
 8001e74:	4a3b      	ldr	r2, [pc, #236]	; (8001f64 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>)
 8001e76:	5cd3      	ldrb	r3, [r2, r3]
 8001e78:	617b      	str	r3, [r7, #20]
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001e7a:	68fb      	ldr	r3, [r7, #12]
 8001e7c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	d00d      	beq.n	8001ea0 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8001e84:	4a38      	ldr	r2, [pc, #224]	; (8001f68 <HAL_RCCEx_GetPeriphCLKFreq+0x160>)
 8001e86:	697b      	ldr	r3, [r7, #20]
 8001e88:	fbb2 f2f3 	udiv	r2, r2, r3
 8001e8c:	693b      	ldr	r3, [r7, #16]
 8001e8e:	fb02 f303 	mul.w	r3, r2, r3
 8001e92:	61fb      	str	r3, [r7, #28]
 8001e94:	e004      	b.n	8001ea0 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001e96:	693b      	ldr	r3, [r7, #16]
 8001e98:	4a34      	ldr	r2, [pc, #208]	; (8001f6c <HAL_RCCEx_GetPeriphCLKFreq+0x164>)
 8001e9a:	fb02 f303 	mul.w	r3, r2, r3
 8001e9e:	61fb      	str	r3, [r7, #28]
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8001ea0:	4b2e      	ldr	r3, [pc, #184]	; (8001f5c <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8001ea2:	685b      	ldr	r3, [r3, #4]
 8001ea4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001ea8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001eac:	d102      	bne.n	8001eb4 <HAL_RCCEx_GetPeriphCLKFreq+0xac>
          frequency = pllclk;
 8001eae:	69fb      	ldr	r3, [r7, #28]
 8001eb0:	61bb      	str	r3, [r7, #24]
      break;
 8001eb2:	e04a      	b.n	8001f4a <HAL_RCCEx_GetPeriphCLKFreq+0x142>
          frequency = (pllclk * 2) / 3;
 8001eb4:	69fb      	ldr	r3, [r7, #28]
 8001eb6:	005b      	lsls	r3, r3, #1
 8001eb8:	4a2d      	ldr	r2, [pc, #180]	; (8001f70 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8001eba:	fba2 2303 	umull	r2, r3, r2, r3
 8001ebe:	085b      	lsrs	r3, r3, #1
 8001ec0:	61bb      	str	r3, [r7, #24]
      break;
 8001ec2:	e042      	b.n	8001f4a <HAL_RCCEx_GetPeriphCLKFreq+0x142>
      temp_reg = RCC->BDCR;
 8001ec4:	4b25      	ldr	r3, [pc, #148]	; (8001f5c <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8001ec6:	6a1b      	ldr	r3, [r3, #32]
 8001ec8:	60fb      	str	r3, [r7, #12]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8001eca:	68fb      	ldr	r3, [r7, #12]
 8001ecc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001ed0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001ed4:	d108      	bne.n	8001ee8 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
 8001ed6:	68fb      	ldr	r3, [r7, #12]
 8001ed8:	f003 0302 	and.w	r3, r3, #2
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	d003      	beq.n	8001ee8 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
        frequency = LSE_VALUE;
 8001ee0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001ee4:	61bb      	str	r3, [r7, #24]
 8001ee6:	e01f      	b.n	8001f28 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8001ee8:	68fb      	ldr	r3, [r7, #12]
 8001eea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001eee:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001ef2:	d109      	bne.n	8001f08 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
 8001ef4:	4b19      	ldr	r3, [pc, #100]	; (8001f5c <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8001ef6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ef8:	f003 0302 	and.w	r3, r3, #2
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	d003      	beq.n	8001f08 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
        frequency = LSI_VALUE;
 8001f00:	f649 4340 	movw	r3, #40000	; 0x9c40
 8001f04:	61bb      	str	r3, [r7, #24]
 8001f06:	e00f      	b.n	8001f28 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8001f08:	68fb      	ldr	r3, [r7, #12]
 8001f0a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001f0e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8001f12:	d11c      	bne.n	8001f4e <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8001f14:	4b11      	ldr	r3, [pc, #68]	; (8001f5c <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d016      	beq.n	8001f4e <HAL_RCCEx_GetPeriphCLKFreq+0x146>
        frequency = HSE_VALUE / 128U;
 8001f20:	f24f 4324 	movw	r3, #62500	; 0xf424
 8001f24:	61bb      	str	r3, [r7, #24]
      break;
 8001f26:	e012      	b.n	8001f4e <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8001f28:	e011      	b.n	8001f4e <HAL_RCCEx_GetPeriphCLKFreq+0x146>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8001f2a:	f7ff fe85 	bl	8001c38 <HAL_RCC_GetPCLK2Freq>
 8001f2e:	4602      	mov	r2, r0
 8001f30:	4b0a      	ldr	r3, [pc, #40]	; (8001f5c <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8001f32:	685b      	ldr	r3, [r3, #4]
 8001f34:	0b9b      	lsrs	r3, r3, #14
 8001f36:	f003 0303 	and.w	r3, r3, #3
 8001f3a:	3301      	adds	r3, #1
 8001f3c:	005b      	lsls	r3, r3, #1
 8001f3e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f42:	61bb      	str	r3, [r7, #24]
      break;
 8001f44:	e004      	b.n	8001f50 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8001f46:	bf00      	nop
 8001f48:	e002      	b.n	8001f50 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8001f4a:	bf00      	nop
 8001f4c:	e000      	b.n	8001f50 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8001f4e:	bf00      	nop
    }
  }
  return (frequency);
 8001f50:	69bb      	ldr	r3, [r7, #24]
}
 8001f52:	4618      	mov	r0, r3
 8001f54:	3720      	adds	r7, #32
 8001f56:	46bd      	mov	sp, r7
 8001f58:	bd80      	pop	{r7, pc}
 8001f5a:	bf00      	nop
 8001f5c:	40021000 	.word	0x40021000
 8001f60:	08004f28 	.word	0x08004f28
 8001f64:	08004f38 	.word	0x08004f38
 8001f68:	007a1200 	.word	0x007a1200
 8001f6c:	003d0900 	.word	0x003d0900
 8001f70:	aaaaaaab 	.word	0xaaaaaaab

08001f74 <HAL_RTC_Init>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8001f74:	b580      	push	{r7, lr}
 8001f76:	b084      	sub	sp, #16
 8001f78:	af00      	add	r7, sp, #0
 8001f7a:	6078      	str	r0, [r7, #4]
  uint32_t prescaler = 0U;
 8001f7c:	2300      	movs	r3, #0
 8001f7e:	60fb      	str	r3, [r7, #12]
  /* Check input parameters */
  if (hrtc == NULL)
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d101      	bne.n	8001f8a <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 8001f86:	2301      	movs	r3, #1
 8001f88:	e07a      	b.n	8002080 <HAL_RTC_Init+0x10c>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	7c5b      	ldrb	r3, [r3, #17]
 8001f8e:	b2db      	uxtb	r3, r3
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d105      	bne.n	8001fa0 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	2200      	movs	r2, #0
 8001f98:	741a      	strb	r2, [r3, #16]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8001f9a:	6878      	ldr	r0, [r7, #4]
 8001f9c:	f7fe fe84 	bl	8000ca8 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	2202      	movs	r2, #2
 8001fa4:	745a      	strb	r2, [r3, #17]

  /* Waiting for synchro */
  if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8001fa6:	6878      	ldr	r0, [r7, #4]
 8001fa8:	f000 faea 	bl	8002580 <HAL_RTC_WaitForSynchro>
 8001fac:	4603      	mov	r3, r0
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d004      	beq.n	8001fbc <HAL_RTC_Init+0x48>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	2204      	movs	r2, #4
 8001fb6:	745a      	strb	r2, [r3, #17]

    return HAL_ERROR;
 8001fb8:	2301      	movs	r3, #1
 8001fba:	e061      	b.n	8002080 <HAL_RTC_Init+0x10c>
  }

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8001fbc:	6878      	ldr	r0, [r7, #4]
 8001fbe:	f000 fba3 	bl	8002708 <RTC_EnterInitMode>
 8001fc2:	4603      	mov	r3, r0
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	d004      	beq.n	8001fd2 <HAL_RTC_Init+0x5e>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	2204      	movs	r2, #4
 8001fcc:	745a      	strb	r2, [r3, #17]

    return HAL_ERROR;
 8001fce:	2301      	movs	r3, #1
 8001fd0:	e056      	b.n	8002080 <HAL_RTC_Init+0x10c>
  }
  else
  {
    /* Clear Flags Bits */
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_OW | RTC_FLAG_ALRAF | RTC_FLAG_SEC));
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	685a      	ldr	r2, [r3, #4]
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	f022 0207 	bic.w	r2, r2, #7
 8001fe0:	605a      	str	r2, [r3, #4]

    if (hrtc->Init.OutPut != RTC_OUTPUTSOURCE_NONE)
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	689b      	ldr	r3, [r3, #8]
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d005      	beq.n	8001ff6 <HAL_RTC_Init+0x82>
    {
      /* Disable the selected Tamper pin */
      CLEAR_BIT(BKP->CR, BKP_CR_TPE);
 8001fea:	4b27      	ldr	r3, [pc, #156]	; (8002088 <HAL_RTC_Init+0x114>)
 8001fec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fee:	4a26      	ldr	r2, [pc, #152]	; (8002088 <HAL_RTC_Init+0x114>)
 8001ff0:	f023 0301 	bic.w	r3, r3, #1
 8001ff4:	6313      	str	r3, [r2, #48]	; 0x30
    }

    /* Set the signal which will be routed to RTC Tamper pin*/
    MODIFY_REG(BKP->RTCCR, (BKP_RTCCR_CCO | BKP_RTCCR_ASOE | BKP_RTCCR_ASOS), hrtc->Init.OutPut);
 8001ff6:	4b24      	ldr	r3, [pc, #144]	; (8002088 <HAL_RTC_Init+0x114>)
 8001ff8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ffa:	f423 7260 	bic.w	r2, r3, #896	; 0x380
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	689b      	ldr	r3, [r3, #8]
 8002002:	4921      	ldr	r1, [pc, #132]	; (8002088 <HAL_RTC_Init+0x114>)
 8002004:	4313      	orrs	r3, r2
 8002006:	62cb      	str	r3, [r1, #44]	; 0x2c

    if (hrtc->Init.AsynchPrediv != RTC_AUTO_1_SECOND)
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	685b      	ldr	r3, [r3, #4]
 800200c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002010:	d003      	beq.n	800201a <HAL_RTC_Init+0xa6>
    {
      /* RTC Prescaler provided directly by end-user*/
      prescaler = hrtc->Init.AsynchPrediv;
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	685b      	ldr	r3, [r3, #4]
 8002016:	60fb      	str	r3, [r7, #12]
 8002018:	e00e      	b.n	8002038 <HAL_RTC_Init+0xc4>
    }
    else
    {
      /* RTC Prescaler will be automatically calculated to get 1 second timebase */
      /* Get the RTCCLK frequency */
      prescaler = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_RTC);
 800201a:	2001      	movs	r0, #1
 800201c:	f7ff fef4 	bl	8001e08 <HAL_RCCEx_GetPeriphCLKFreq>
 8002020:	60f8      	str	r0, [r7, #12]

      /* Check that RTC clock is enabled*/
      if (prescaler == 0U)
 8002022:	68fb      	ldr	r3, [r7, #12]
 8002024:	2b00      	cmp	r3, #0
 8002026:	d104      	bne.n	8002032 <HAL_RTC_Init+0xbe>
      {
        /* Should not happen. Frequency is not available*/
        hrtc->State = HAL_RTC_STATE_ERROR;
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	2204      	movs	r2, #4
 800202c:	745a      	strb	r2, [r3, #17]
        return HAL_ERROR;
 800202e:	2301      	movs	r3, #1
 8002030:	e026      	b.n	8002080 <HAL_RTC_Init+0x10c>
      }
      else
      {
        /* RTC period = RTCCLK/(RTC_PR + 1) */
        prescaler = prescaler - 1U;
 8002032:	68fb      	ldr	r3, [r7, #12]
 8002034:	3b01      	subs	r3, #1
 8002036:	60fb      	str	r3, [r7, #12]
      }
    }

    /* Configure the RTC_PRLH / RTC_PRLL */
    WRITE_REG(hrtc->Instance->PRLH, ((prescaler >> 16U) & RTC_PRLH_PRL));
 8002038:	68fb      	ldr	r3, [r7, #12]
 800203a:	0c1a      	lsrs	r2, r3, #16
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	f002 020f 	and.w	r2, r2, #15
 8002044:	609a      	str	r2, [r3, #8]
    WRITE_REG(hrtc->Instance->PRLL, (prescaler & RTC_PRLL_PRL));
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	68fa      	ldr	r2, [r7, #12]
 800204c:	b292      	uxth	r2, r2
 800204e:	60da      	str	r2, [r3, #12]

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 8002050:	6878      	ldr	r0, [r7, #4]
 8002052:	f000 fb81 	bl	8002758 <RTC_ExitInitMode>
 8002056:	4603      	mov	r3, r0
 8002058:	2b00      	cmp	r3, #0
 800205a:	d004      	beq.n	8002066 <HAL_RTC_Init+0xf2>
    {
      hrtc->State = HAL_RTC_STATE_ERROR;
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	2204      	movs	r2, #4
 8002060:	745a      	strb	r2, [r3, #17]

      return HAL_ERROR;
 8002062:	2301      	movs	r3, #1
 8002064:	e00c      	b.n	8002080 <HAL_RTC_Init+0x10c>
    }

    /* Initialize date to 1st of January 2000 */
    hrtc->DateToUpdate.Year = 0x00U;
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	2200      	movs	r2, #0
 800206a:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = RTC_MONTH_JANUARY;
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	2201      	movs	r2, #1
 8002070:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date = 0x01U;
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	2201      	movs	r2, #1
 8002076:	739a      	strb	r2, [r3, #14]

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	2201      	movs	r2, #1
 800207c:	745a      	strb	r2, [r3, #17]

    return HAL_OK;
 800207e:	2300      	movs	r3, #0
  }
}
 8002080:	4618      	mov	r0, r3
 8002082:	3710      	adds	r7, #16
 8002084:	46bd      	mov	sp, r7
 8002086:	bd80      	pop	{r7, pc}
 8002088:	40006c00 	.word	0x40006c00

0800208c <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800208c:	b590      	push	{r4, r7, lr}
 800208e:	b087      	sub	sp, #28
 8002090:	af00      	add	r7, sp, #0
 8002092:	60f8      	str	r0, [r7, #12]
 8002094:	60b9      	str	r1, [r7, #8]
 8002096:	607a      	str	r2, [r7, #4]
  uint32_t counter_time = 0U, counter_alarm = 0U;
 8002098:	2300      	movs	r3, #0
 800209a:	617b      	str	r3, [r7, #20]
 800209c:	2300      	movs	r3, #0
 800209e:	613b      	str	r3, [r7, #16]

  /* Check input parameters */
  if ((hrtc == NULL) || (sTime == NULL))
 80020a0:	68fb      	ldr	r3, [r7, #12]
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d002      	beq.n	80020ac <HAL_RTC_SetTime+0x20>
 80020a6:	68bb      	ldr	r3, [r7, #8]
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d101      	bne.n	80020b0 <HAL_RTC_SetTime+0x24>
  {
    return HAL_ERROR;
 80020ac:	2301      	movs	r3, #1
 80020ae:	e080      	b.n	80021b2 <HAL_RTC_SetTime+0x126>

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80020b0:	68fb      	ldr	r3, [r7, #12]
 80020b2:	7c1b      	ldrb	r3, [r3, #16]
 80020b4:	2b01      	cmp	r3, #1
 80020b6:	d101      	bne.n	80020bc <HAL_RTC_SetTime+0x30>
 80020b8:	2302      	movs	r3, #2
 80020ba:	e07a      	b.n	80021b2 <HAL_RTC_SetTime+0x126>
 80020bc:	68fb      	ldr	r3, [r7, #12]
 80020be:	2201      	movs	r2, #1
 80020c0:	741a      	strb	r2, [r3, #16]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80020c2:	68fb      	ldr	r3, [r7, #12]
 80020c4:	2202      	movs	r2, #2
 80020c6:	745a      	strb	r2, [r3, #17]

  if (Format == RTC_FORMAT_BIN)
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d113      	bne.n	80020f6 <HAL_RTC_SetTime+0x6a>
  {
    assert_param(IS_RTC_HOUR24(sTime->Hours));
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 80020ce:	68bb      	ldr	r3, [r7, #8]
 80020d0:	781b      	ldrb	r3, [r3, #0]
 80020d2:	461a      	mov	r2, r3
 80020d4:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 80020d8:	fb03 f202 	mul.w	r2, r3, r2
                              ((uint32_t)sTime->Minutes * 60U) + \
 80020dc:	68bb      	ldr	r3, [r7, #8]
 80020de:	785b      	ldrb	r3, [r3, #1]
 80020e0:	4619      	mov	r1, r3
 80020e2:	460b      	mov	r3, r1
 80020e4:	011b      	lsls	r3, r3, #4
 80020e6:	1a5b      	subs	r3, r3, r1
 80020e8:	009b      	lsls	r3, r3, #2
    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 80020ea:	4413      	add	r3, r2
                              ((uint32_t)sTime->Seconds));
 80020ec:	68ba      	ldr	r2, [r7, #8]
 80020ee:	7892      	ldrb	r2, [r2, #2]
    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 80020f0:	4413      	add	r3, r2
 80020f2:	617b      	str	r3, [r7, #20]
 80020f4:	e01e      	b.n	8002134 <HAL_RTC_SetTime+0xa8>
  {
    assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));

    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 80020f6:	68bb      	ldr	r3, [r7, #8]
 80020f8:	781b      	ldrb	r3, [r3, #0]
 80020fa:	4618      	mov	r0, r3
 80020fc:	f000 fb71 	bl	80027e2 <RTC_Bcd2ToByte>
 8002100:	4603      	mov	r3, r0
 8002102:	461a      	mov	r2, r3
 8002104:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 8002108:	fb03 f402 	mul.w	r4, r3, r2
                    ((uint32_t)(RTC_Bcd2ToByte(sTime->Minutes)) * 60U) + \
 800210c:	68bb      	ldr	r3, [r7, #8]
 800210e:	785b      	ldrb	r3, [r3, #1]
 8002110:	4618      	mov	r0, r3
 8002112:	f000 fb66 	bl	80027e2 <RTC_Bcd2ToByte>
 8002116:	4603      	mov	r3, r0
 8002118:	461a      	mov	r2, r3
 800211a:	4613      	mov	r3, r2
 800211c:	011b      	lsls	r3, r3, #4
 800211e:	1a9b      	subs	r3, r3, r2
 8002120:	009b      	lsls	r3, r3, #2
    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 8002122:	441c      	add	r4, r3
                    ((uint32_t)(RTC_Bcd2ToByte(sTime->Seconds))));
 8002124:	68bb      	ldr	r3, [r7, #8]
 8002126:	789b      	ldrb	r3, [r3, #2]
 8002128:	4618      	mov	r0, r3
 800212a:	f000 fb5a 	bl	80027e2 <RTC_Bcd2ToByte>
 800212e:	4603      	mov	r3, r0
    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 8002130:	4423      	add	r3, r4
 8002132:	617b      	str	r3, [r7, #20]
  }

  /* Write time counter in RTC registers */
  if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 8002134:	6979      	ldr	r1, [r7, #20]
 8002136:	68f8      	ldr	r0, [r7, #12]
 8002138:	f000 fa7f 	bl	800263a <RTC_WriteTimeCounter>
 800213c:	4603      	mov	r3, r0
 800213e:	2b00      	cmp	r3, #0
 8002140:	d007      	beq.n	8002152 <HAL_RTC_SetTime+0xc6>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8002142:	68fb      	ldr	r3, [r7, #12]
 8002144:	2204      	movs	r2, #4
 8002146:	745a      	strb	r2, [r3, #17]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	2200      	movs	r2, #0
 800214c:	741a      	strb	r2, [r3, #16]

    return HAL_ERROR;
 800214e:	2301      	movs	r3, #1
 8002150:	e02f      	b.n	80021b2 <HAL_RTC_SetTime+0x126>
  }
  else
  {
    /* Clear Second and overflow flags */
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_SEC | RTC_FLAG_OW));
 8002152:	68fb      	ldr	r3, [r7, #12]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	685a      	ldr	r2, [r3, #4]
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	f022 0205 	bic.w	r2, r2, #5
 8002160:	605a      	str	r2, [r3, #4]

    /* Read current Alarm counter in RTC registers */
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 8002162:	68f8      	ldr	r0, [r7, #12]
 8002164:	f000 fa90 	bl	8002688 <RTC_ReadAlarmCounter>
 8002168:	6138      	str	r0, [r7, #16]

    /* Set again alarm to match with new time if enabled */
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 800216a:	693b      	ldr	r3, [r7, #16]
 800216c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002170:	d018      	beq.n	80021a4 <HAL_RTC_SetTime+0x118>
    {
      if (counter_alarm < counter_time)
 8002172:	693a      	ldr	r2, [r7, #16]
 8002174:	697b      	ldr	r3, [r7, #20]
 8002176:	429a      	cmp	r2, r3
 8002178:	d214      	bcs.n	80021a4 <HAL_RTC_SetTime+0x118>
      {
        /* Add 1 day to alarm counter*/
        counter_alarm += (uint32_t)(24U * 3600U);
 800217a:	693b      	ldr	r3, [r7, #16]
 800217c:	f503 33a8 	add.w	r3, r3, #86016	; 0x15000
 8002180:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8002184:	613b      	str	r3, [r7, #16]

        /* Write new Alarm counter in RTC registers */
        if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 8002186:	6939      	ldr	r1, [r7, #16]
 8002188:	68f8      	ldr	r0, [r7, #12]
 800218a:	f000 fa96 	bl	80026ba <RTC_WriteAlarmCounter>
 800218e:	4603      	mov	r3, r0
 8002190:	2b00      	cmp	r3, #0
 8002192:	d007      	beq.n	80021a4 <HAL_RTC_SetTime+0x118>
        {
          /* Set RTC state */
          hrtc->State = HAL_RTC_STATE_ERROR;
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	2204      	movs	r2, #4
 8002198:	745a      	strb	r2, [r3, #17]

          /* Process Unlocked */
          __HAL_UNLOCK(hrtc);
 800219a:	68fb      	ldr	r3, [r7, #12]
 800219c:	2200      	movs	r2, #0
 800219e:	741a      	strb	r2, [r3, #16]

          return HAL_ERROR;
 80021a0:	2301      	movs	r3, #1
 80021a2:	e006      	b.n	80021b2 <HAL_RTC_SetTime+0x126>
        }
      }
    }

    hrtc->State = HAL_RTC_STATE_READY;
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	2201      	movs	r2, #1
 80021a8:	745a      	strb	r2, [r3, #17]

    __HAL_UNLOCK(hrtc);
 80021aa:	68fb      	ldr	r3, [r7, #12]
 80021ac:	2200      	movs	r2, #0
 80021ae:	741a      	strb	r2, [r3, #16]

    return HAL_OK;
 80021b0:	2300      	movs	r3, #0
  }
}
 80021b2:	4618      	mov	r0, r3
 80021b4:	371c      	adds	r7, #28
 80021b6:	46bd      	mov	sp, r7
 80021b8:	bd90      	pop	{r4, r7, pc}
	...

080021bc <HAL_RTC_GetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80021bc:	b580      	push	{r7, lr}
 80021be:	b088      	sub	sp, #32
 80021c0:	af00      	add	r7, sp, #0
 80021c2:	60f8      	str	r0, [r7, #12]
 80021c4:	60b9      	str	r1, [r7, #8]
 80021c6:	607a      	str	r2, [r7, #4]
  uint32_t counter_time = 0U, counter_alarm = 0U, days_elapsed = 0U, hours = 0U;
 80021c8:	2300      	movs	r3, #0
 80021ca:	61bb      	str	r3, [r7, #24]
 80021cc:	2300      	movs	r3, #0
 80021ce:	61fb      	str	r3, [r7, #28]
 80021d0:	2300      	movs	r3, #0
 80021d2:	617b      	str	r3, [r7, #20]
 80021d4:	2300      	movs	r3, #0
 80021d6:	613b      	str	r3, [r7, #16]

  /* Check input parameters */
  if ((hrtc == NULL) || (sTime == NULL))
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d002      	beq.n	80021e4 <HAL_RTC_GetTime+0x28>
 80021de:	68bb      	ldr	r3, [r7, #8]
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d101      	bne.n	80021e8 <HAL_RTC_GetTime+0x2c>
  {
    return HAL_ERROR;
 80021e4:	2301      	movs	r3, #1
 80021e6:	e0b5      	b.n	8002354 <HAL_RTC_GetTime+0x198>

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Check if counter overflow occurred */
  if (__HAL_RTC_OVERFLOW_GET_FLAG(hrtc, RTC_FLAG_OW))
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	685b      	ldr	r3, [r3, #4]
 80021ee:	f003 0304 	and.w	r3, r3, #4
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d001      	beq.n	80021fa <HAL_RTC_GetTime+0x3e>
  {
    return HAL_ERROR;
 80021f6:	2301      	movs	r3, #1
 80021f8:	e0ac      	b.n	8002354 <HAL_RTC_GetTime+0x198>
  }

  /* Read the time counter*/
  counter_time = RTC_ReadTimeCounter(hrtc);
 80021fa:	68f8      	ldr	r0, [r7, #12]
 80021fc:	f000 f9ed 	bl	80025da <RTC_ReadTimeCounter>
 8002200:	61b8      	str	r0, [r7, #24]

  /* Fill the structure fields with the read parameters */
  hours = counter_time / 3600U;
 8002202:	69bb      	ldr	r3, [r7, #24]
 8002204:	4a55      	ldr	r2, [pc, #340]	; (800235c <HAL_RTC_GetTime+0x1a0>)
 8002206:	fba2 2303 	umull	r2, r3, r2, r3
 800220a:	0adb      	lsrs	r3, r3, #11
 800220c:	613b      	str	r3, [r7, #16]
  sTime->Minutes  = (uint8_t)((counter_time % 3600U) / 60U);
 800220e:	69ba      	ldr	r2, [r7, #24]
 8002210:	4b52      	ldr	r3, [pc, #328]	; (800235c <HAL_RTC_GetTime+0x1a0>)
 8002212:	fba3 1302 	umull	r1, r3, r3, r2
 8002216:	0adb      	lsrs	r3, r3, #11
 8002218:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 800221c:	fb01 f303 	mul.w	r3, r1, r3
 8002220:	1ad3      	subs	r3, r2, r3
 8002222:	4a4f      	ldr	r2, [pc, #316]	; (8002360 <HAL_RTC_GetTime+0x1a4>)
 8002224:	fba2 2303 	umull	r2, r3, r2, r3
 8002228:	095b      	lsrs	r3, r3, #5
 800222a:	b2da      	uxtb	r2, r3
 800222c:	68bb      	ldr	r3, [r7, #8]
 800222e:	705a      	strb	r2, [r3, #1]
  sTime->Seconds  = (uint8_t)((counter_time % 3600U) % 60U);
 8002230:	69bb      	ldr	r3, [r7, #24]
 8002232:	4a4a      	ldr	r2, [pc, #296]	; (800235c <HAL_RTC_GetTime+0x1a0>)
 8002234:	fba2 1203 	umull	r1, r2, r2, r3
 8002238:	0ad2      	lsrs	r2, r2, #11
 800223a:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 800223e:	fb01 f202 	mul.w	r2, r1, r2
 8002242:	1a9a      	subs	r2, r3, r2
 8002244:	4b46      	ldr	r3, [pc, #280]	; (8002360 <HAL_RTC_GetTime+0x1a4>)
 8002246:	fba3 1302 	umull	r1, r3, r3, r2
 800224a:	0959      	lsrs	r1, r3, #5
 800224c:	460b      	mov	r3, r1
 800224e:	011b      	lsls	r3, r3, #4
 8002250:	1a5b      	subs	r3, r3, r1
 8002252:	009b      	lsls	r3, r3, #2
 8002254:	1ad1      	subs	r1, r2, r3
 8002256:	b2ca      	uxtb	r2, r1
 8002258:	68bb      	ldr	r3, [r7, #8]
 800225a:	709a      	strb	r2, [r3, #2]

  if (hours >= 24U)
 800225c:	693b      	ldr	r3, [r7, #16]
 800225e:	2b17      	cmp	r3, #23
 8002260:	d955      	bls.n	800230e <HAL_RTC_GetTime+0x152>
  {
    /* Get number of days elapsed from last calculation */
    days_elapsed = (hours / 24U);
 8002262:	693b      	ldr	r3, [r7, #16]
 8002264:	4a3f      	ldr	r2, [pc, #252]	; (8002364 <HAL_RTC_GetTime+0x1a8>)
 8002266:	fba2 2303 	umull	r2, r3, r2, r3
 800226a:	091b      	lsrs	r3, r3, #4
 800226c:	617b      	str	r3, [r7, #20]

    /* Set Hours in RTC_TimeTypeDef structure*/
    sTime->Hours = (hours % 24U);
 800226e:	6939      	ldr	r1, [r7, #16]
 8002270:	4b3c      	ldr	r3, [pc, #240]	; (8002364 <HAL_RTC_GetTime+0x1a8>)
 8002272:	fba3 2301 	umull	r2, r3, r3, r1
 8002276:	091a      	lsrs	r2, r3, #4
 8002278:	4613      	mov	r3, r2
 800227a:	005b      	lsls	r3, r3, #1
 800227c:	4413      	add	r3, r2
 800227e:	00db      	lsls	r3, r3, #3
 8002280:	1aca      	subs	r2, r1, r3
 8002282:	b2d2      	uxtb	r2, r2
 8002284:	68bb      	ldr	r3, [r7, #8]
 8002286:	701a      	strb	r2, [r3, #0]

    /* Read Alarm counter in RTC registers */
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 8002288:	68f8      	ldr	r0, [r7, #12]
 800228a:	f000 f9fd 	bl	8002688 <RTC_ReadAlarmCounter>
 800228e:	61f8      	str	r0, [r7, #28]

    /* Calculate remaining time to reach alarm (only if set and not yet expired)*/
    if ((counter_alarm != RTC_ALARM_RESETVALUE) && (counter_alarm > counter_time))
 8002290:	69fb      	ldr	r3, [r7, #28]
 8002292:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002296:	d008      	beq.n	80022aa <HAL_RTC_GetTime+0xee>
 8002298:	69fa      	ldr	r2, [r7, #28]
 800229a:	69bb      	ldr	r3, [r7, #24]
 800229c:	429a      	cmp	r2, r3
 800229e:	d904      	bls.n	80022aa <HAL_RTC_GetTime+0xee>
    {
      counter_alarm -= counter_time;
 80022a0:	69fa      	ldr	r2, [r7, #28]
 80022a2:	69bb      	ldr	r3, [r7, #24]
 80022a4:	1ad3      	subs	r3, r2, r3
 80022a6:	61fb      	str	r3, [r7, #28]
 80022a8:	e002      	b.n	80022b0 <HAL_RTC_GetTime+0xf4>
    }
    else
    {
      /* In case of counter_alarm < counter_time */
      /* Alarm expiration already occurred but alarm not deactivated */
      counter_alarm = RTC_ALARM_RESETVALUE;
 80022aa:	f04f 33ff 	mov.w	r3, #4294967295
 80022ae:	61fb      	str	r3, [r7, #28]
    }

    /* Set updated time in decreasing counter by number of days elapsed */
    counter_time -= (days_elapsed * 24U * 3600U);
 80022b0:	697b      	ldr	r3, [r7, #20]
 80022b2:	4a2d      	ldr	r2, [pc, #180]	; (8002368 <HAL_RTC_GetTime+0x1ac>)
 80022b4:	fb02 f303 	mul.w	r3, r2, r3
 80022b8:	69ba      	ldr	r2, [r7, #24]
 80022ba:	1ad3      	subs	r3, r2, r3
 80022bc:	61bb      	str	r3, [r7, #24]

    /* Write time counter in RTC registers */
    if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 80022be:	69b9      	ldr	r1, [r7, #24]
 80022c0:	68f8      	ldr	r0, [r7, #12]
 80022c2:	f000 f9ba 	bl	800263a <RTC_WriteTimeCounter>
 80022c6:	4603      	mov	r3, r0
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	d001      	beq.n	80022d0 <HAL_RTC_GetTime+0x114>
    {
      return HAL_ERROR;
 80022cc:	2301      	movs	r3, #1
 80022ce:	e041      	b.n	8002354 <HAL_RTC_GetTime+0x198>
    }

    /* Set updated alarm to be set */
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 80022d0:	69fb      	ldr	r3, [r7, #28]
 80022d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80022d6:	d00c      	beq.n	80022f2 <HAL_RTC_GetTime+0x136>
    {
      counter_alarm += counter_time;
 80022d8:	69fa      	ldr	r2, [r7, #28]
 80022da:	69bb      	ldr	r3, [r7, #24]
 80022dc:	4413      	add	r3, r2
 80022de:	61fb      	str	r3, [r7, #28]

      /* Write time counter in RTC registers */
      if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 80022e0:	69f9      	ldr	r1, [r7, #28]
 80022e2:	68f8      	ldr	r0, [r7, #12]
 80022e4:	f000 f9e9 	bl	80026ba <RTC_WriteAlarmCounter>
 80022e8:	4603      	mov	r3, r0
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d00a      	beq.n	8002304 <HAL_RTC_GetTime+0x148>
      {
        return HAL_ERROR;
 80022ee:	2301      	movs	r3, #1
 80022f0:	e030      	b.n	8002354 <HAL_RTC_GetTime+0x198>
      }
    }
    else
    {
      /* Alarm already occurred. Set it to reset values to avoid unexpected expiration */
      if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 80022f2:	69f9      	ldr	r1, [r7, #28]
 80022f4:	68f8      	ldr	r0, [r7, #12]
 80022f6:	f000 f9e0 	bl	80026ba <RTC_WriteAlarmCounter>
 80022fa:	4603      	mov	r3, r0
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d001      	beq.n	8002304 <HAL_RTC_GetTime+0x148>
      {
        return HAL_ERROR;
 8002300:	2301      	movs	r3, #1
 8002302:	e027      	b.n	8002354 <HAL_RTC_GetTime+0x198>
      }
    }

    /* Update date */
    RTC_DateUpdate(hrtc, days_elapsed);
 8002304:	6979      	ldr	r1, [r7, #20]
 8002306:	68f8      	ldr	r0, [r7, #12]
 8002308:	f000 fa88 	bl	800281c <RTC_DateUpdate>
 800230c:	e003      	b.n	8002316 <HAL_RTC_GetTime+0x15a>
  }
  else
  {
    sTime->Hours = hours;
 800230e:	693b      	ldr	r3, [r7, #16]
 8002310:	b2da      	uxtb	r2, r3
 8002312:	68bb      	ldr	r3, [r7, #8]
 8002314:	701a      	strb	r2, [r3, #0]
  }

  /* Check the input parameters format */
  if (Format != RTC_FORMAT_BIN)
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	2b00      	cmp	r3, #0
 800231a:	d01a      	beq.n	8002352 <HAL_RTC_GetTime+0x196>
  {
    /* Convert the time structure parameters to BCD format */
    sTime->Hours    = (uint8_t)RTC_ByteToBcd2(sTime->Hours);
 800231c:	68bb      	ldr	r3, [r7, #8]
 800231e:	781b      	ldrb	r3, [r3, #0]
 8002320:	4618      	mov	r0, r3
 8002322:	f000 fa41 	bl	80027a8 <RTC_ByteToBcd2>
 8002326:	4603      	mov	r3, r0
 8002328:	461a      	mov	r2, r3
 800232a:	68bb      	ldr	r3, [r7, #8]
 800232c:	701a      	strb	r2, [r3, #0]
    sTime->Minutes  = (uint8_t)RTC_ByteToBcd2(sTime->Minutes);
 800232e:	68bb      	ldr	r3, [r7, #8]
 8002330:	785b      	ldrb	r3, [r3, #1]
 8002332:	4618      	mov	r0, r3
 8002334:	f000 fa38 	bl	80027a8 <RTC_ByteToBcd2>
 8002338:	4603      	mov	r3, r0
 800233a:	461a      	mov	r2, r3
 800233c:	68bb      	ldr	r3, [r7, #8]
 800233e:	705a      	strb	r2, [r3, #1]
    sTime->Seconds  = (uint8_t)RTC_ByteToBcd2(sTime->Seconds);
 8002340:	68bb      	ldr	r3, [r7, #8]
 8002342:	789b      	ldrb	r3, [r3, #2]
 8002344:	4618      	mov	r0, r3
 8002346:	f000 fa2f 	bl	80027a8 <RTC_ByteToBcd2>
 800234a:	4603      	mov	r3, r0
 800234c:	461a      	mov	r2, r3
 800234e:	68bb      	ldr	r3, [r7, #8]
 8002350:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8002352:	2300      	movs	r3, #0
}
 8002354:	4618      	mov	r0, r3
 8002356:	3720      	adds	r7, #32
 8002358:	46bd      	mov	sp, r7
 800235a:	bd80      	pop	{r7, pc}
 800235c:	91a2b3c5 	.word	0x91a2b3c5
 8002360:	88888889 	.word	0x88888889
 8002364:	aaaaaaab 	.word	0xaaaaaaab
 8002368:	00015180 	.word	0x00015180

0800236c <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800236c:	b580      	push	{r7, lr}
 800236e:	b088      	sub	sp, #32
 8002370:	af00      	add	r7, sp, #0
 8002372:	60f8      	str	r0, [r7, #12]
 8002374:	60b9      	str	r1, [r7, #8]
 8002376:	607a      	str	r2, [r7, #4]
  uint32_t counter_time = 0U, counter_alarm = 0U, hours = 0U;
 8002378:	2300      	movs	r3, #0
 800237a:	61fb      	str	r3, [r7, #28]
 800237c:	2300      	movs	r3, #0
 800237e:	61bb      	str	r3, [r7, #24]
 8002380:	2300      	movs	r3, #0
 8002382:	617b      	str	r3, [r7, #20]

  /* Check input parameters */
  if ((hrtc == NULL) || (sDate == NULL))
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	2b00      	cmp	r3, #0
 8002388:	d002      	beq.n	8002390 <HAL_RTC_SetDate+0x24>
 800238a:	68bb      	ldr	r3, [r7, #8]
 800238c:	2b00      	cmp	r3, #0
 800238e:	d101      	bne.n	8002394 <HAL_RTC_SetDate+0x28>
  {
    return HAL_ERROR;
 8002390:	2301      	movs	r3, #1
 8002392:	e097      	b.n	80024c4 <HAL_RTC_SetDate+0x158>

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	7c1b      	ldrb	r3, [r3, #16]
 8002398:	2b01      	cmp	r3, #1
 800239a:	d101      	bne.n	80023a0 <HAL_RTC_SetDate+0x34>
 800239c:	2302      	movs	r3, #2
 800239e:	e091      	b.n	80024c4 <HAL_RTC_SetDate+0x158>
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	2201      	movs	r2, #1
 80023a4:	741a      	strb	r2, [r3, #16]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	2202      	movs	r2, #2
 80023aa:	745a      	strb	r2, [r3, #17]

  if (Format == RTC_FORMAT_BIN)
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d10c      	bne.n	80023cc <HAL_RTC_SetDate+0x60>
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    /* Change the current date */
    hrtc->DateToUpdate.Year  = sDate->Year;
 80023b2:	68bb      	ldr	r3, [r7, #8]
 80023b4:	78da      	ldrb	r2, [r3, #3]
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = sDate->Month;
 80023ba:	68bb      	ldr	r3, [r7, #8]
 80023bc:	785a      	ldrb	r2, [r3, #1]
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date  = sDate->Date;
 80023c2:	68bb      	ldr	r3, [r7, #8]
 80023c4:	789a      	ldrb	r2, [r3, #2]
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	739a      	strb	r2, [r3, #14]
 80023ca:	e01a      	b.n	8002402 <HAL_RTC_SetDate+0x96>
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    /* Change the current date */
    hrtc->DateToUpdate.Year  = RTC_Bcd2ToByte(sDate->Year);
 80023cc:	68bb      	ldr	r3, [r7, #8]
 80023ce:	78db      	ldrb	r3, [r3, #3]
 80023d0:	4618      	mov	r0, r3
 80023d2:	f000 fa06 	bl	80027e2 <RTC_Bcd2ToByte>
 80023d6:	4603      	mov	r3, r0
 80023d8:	461a      	mov	r2, r3
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = RTC_Bcd2ToByte(sDate->Month);
 80023de:	68bb      	ldr	r3, [r7, #8]
 80023e0:	785b      	ldrb	r3, [r3, #1]
 80023e2:	4618      	mov	r0, r3
 80023e4:	f000 f9fd 	bl	80027e2 <RTC_Bcd2ToByte>
 80023e8:	4603      	mov	r3, r0
 80023ea:	461a      	mov	r2, r3
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date  = RTC_Bcd2ToByte(sDate->Date);
 80023f0:	68bb      	ldr	r3, [r7, #8]
 80023f2:	789b      	ldrb	r3, [r3, #2]
 80023f4:	4618      	mov	r0, r3
 80023f6:	f000 f9f4 	bl	80027e2 <RTC_Bcd2ToByte>
 80023fa:	4603      	mov	r3, r0
 80023fc:	461a      	mov	r2, r3
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	739a      	strb	r2, [r3, #14]
  }

  /* WeekDay set by user can be ignored because automatically calculated */
  hrtc->DateToUpdate.WeekDay = RTC_WeekDayNum(hrtc->DateToUpdate.Year, hrtc->DateToUpdate.Month, hrtc->DateToUpdate.Date);
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	7bdb      	ldrb	r3, [r3, #15]
 8002406:	4618      	mov	r0, r3
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	7b59      	ldrb	r1, [r3, #13]
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	7b9b      	ldrb	r3, [r3, #14]
 8002410:	461a      	mov	r2, r3
 8002412:	f000 fadf 	bl	80029d4 <RTC_WeekDayNum>
 8002416:	4603      	mov	r3, r0
 8002418:	461a      	mov	r2, r3
 800241a:	68fb      	ldr	r3, [r7, #12]
 800241c:	731a      	strb	r2, [r3, #12]
  sDate->WeekDay = hrtc->DateToUpdate.WeekDay;
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	7b1a      	ldrb	r2, [r3, #12]
 8002422:	68bb      	ldr	r3, [r7, #8]
 8002424:	701a      	strb	r2, [r3, #0]

  /* Reset time to be aligned on the same day */
  /* Read the time counter*/
  counter_time = RTC_ReadTimeCounter(hrtc);
 8002426:	68f8      	ldr	r0, [r7, #12]
 8002428:	f000 f8d7 	bl	80025da <RTC_ReadTimeCounter>
 800242c:	61f8      	str	r0, [r7, #28]

  /* Fill the structure fields with the read parameters */
  hours = counter_time / 3600U;
 800242e:	69fb      	ldr	r3, [r7, #28]
 8002430:	4a26      	ldr	r2, [pc, #152]	; (80024cc <HAL_RTC_SetDate+0x160>)
 8002432:	fba2 2303 	umull	r2, r3, r2, r3
 8002436:	0adb      	lsrs	r3, r3, #11
 8002438:	617b      	str	r3, [r7, #20]
  if (hours > 24U)
 800243a:	697b      	ldr	r3, [r7, #20]
 800243c:	2b18      	cmp	r3, #24
 800243e:	d93a      	bls.n	80024b6 <HAL_RTC_SetDate+0x14a>
  {
    /* Set updated time in decreasing counter by number of days elapsed */
    counter_time -= ((hours / 24U) * 24U * 3600U);
 8002440:	697b      	ldr	r3, [r7, #20]
 8002442:	4a23      	ldr	r2, [pc, #140]	; (80024d0 <HAL_RTC_SetDate+0x164>)
 8002444:	fba2 2303 	umull	r2, r3, r2, r3
 8002448:	091b      	lsrs	r3, r3, #4
 800244a:	4a22      	ldr	r2, [pc, #136]	; (80024d4 <HAL_RTC_SetDate+0x168>)
 800244c:	fb02 f303 	mul.w	r3, r2, r3
 8002450:	69fa      	ldr	r2, [r7, #28]
 8002452:	1ad3      	subs	r3, r2, r3
 8002454:	61fb      	str	r3, [r7, #28]
    /* Write time counter in RTC registers */
    if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 8002456:	69f9      	ldr	r1, [r7, #28]
 8002458:	68f8      	ldr	r0, [r7, #12]
 800245a:	f000 f8ee 	bl	800263a <RTC_WriteTimeCounter>
 800245e:	4603      	mov	r3, r0
 8002460:	2b00      	cmp	r3, #0
 8002462:	d007      	beq.n	8002474 <HAL_RTC_SetDate+0x108>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	2204      	movs	r2, #4
 8002468:	745a      	strb	r2, [r3, #17]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 800246a:	68fb      	ldr	r3, [r7, #12]
 800246c:	2200      	movs	r2, #0
 800246e:	741a      	strb	r2, [r3, #16]

      return HAL_ERROR;
 8002470:	2301      	movs	r3, #1
 8002472:	e027      	b.n	80024c4 <HAL_RTC_SetDate+0x158>
    }

    /* Read current Alarm counter in RTC registers */
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 8002474:	68f8      	ldr	r0, [r7, #12]
 8002476:	f000 f907 	bl	8002688 <RTC_ReadAlarmCounter>
 800247a:	61b8      	str	r0, [r7, #24]

    /* Set again alarm to match with new time if enabled */
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 800247c:	69bb      	ldr	r3, [r7, #24]
 800247e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002482:	d018      	beq.n	80024b6 <HAL_RTC_SetDate+0x14a>
    {
      if (counter_alarm < counter_time)
 8002484:	69ba      	ldr	r2, [r7, #24]
 8002486:	69fb      	ldr	r3, [r7, #28]
 8002488:	429a      	cmp	r2, r3
 800248a:	d214      	bcs.n	80024b6 <HAL_RTC_SetDate+0x14a>
      {
        /* Add 1 day to alarm counter*/
        counter_alarm += (uint32_t)(24U * 3600U);
 800248c:	69bb      	ldr	r3, [r7, #24]
 800248e:	f503 33a8 	add.w	r3, r3, #86016	; 0x15000
 8002492:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8002496:	61bb      	str	r3, [r7, #24]

        /* Write new Alarm counter in RTC registers */
        if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 8002498:	69b9      	ldr	r1, [r7, #24]
 800249a:	68f8      	ldr	r0, [r7, #12]
 800249c:	f000 f90d 	bl	80026ba <RTC_WriteAlarmCounter>
 80024a0:	4603      	mov	r3, r0
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d007      	beq.n	80024b6 <HAL_RTC_SetDate+0x14a>
        {
          /* Set RTC state */
          hrtc->State = HAL_RTC_STATE_ERROR;
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	2204      	movs	r2, #4
 80024aa:	745a      	strb	r2, [r3, #17]

          /* Process Unlocked */
          __HAL_UNLOCK(hrtc);
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	2200      	movs	r2, #0
 80024b0:	741a      	strb	r2, [r3, #16]

          return HAL_ERROR;
 80024b2:	2301      	movs	r3, #1
 80024b4:	e006      	b.n	80024c4 <HAL_RTC_SetDate+0x158>
    }


  }

  hrtc->State = HAL_RTC_STATE_READY ;
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	2201      	movs	r2, #1
 80024ba:	745a      	strb	r2, [r3, #17]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	2200      	movs	r2, #0
 80024c0:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 80024c2:	2300      	movs	r3, #0
}
 80024c4:	4618      	mov	r0, r3
 80024c6:	3720      	adds	r7, #32
 80024c8:	46bd      	mov	sp, r7
 80024ca:	bd80      	pop	{r7, pc}
 80024cc:	91a2b3c5 	.word	0x91a2b3c5
 80024d0:	aaaaaaab 	.word	0xaaaaaaab
 80024d4:	00015180 	.word	0x00015180

080024d8 <HAL_RTC_GetDate>:
  *            @arg RTC_FORMAT_BIN:  Binary data format
  *            @arg RTC_FORMAT_BCD:  BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80024d8:	b580      	push	{r7, lr}
 80024da:	b086      	sub	sp, #24
 80024dc:	af00      	add	r7, sp, #0
 80024de:	60f8      	str	r0, [r7, #12]
 80024e0:	60b9      	str	r1, [r7, #8]
 80024e2:	607a      	str	r2, [r7, #4]
  RTC_TimeTypeDef stime = {0U};
 80024e4:	f107 0314 	add.w	r3, r7, #20
 80024e8:	2100      	movs	r1, #0
 80024ea:	460a      	mov	r2, r1
 80024ec:	801a      	strh	r2, [r3, #0]
 80024ee:	460a      	mov	r2, r1
 80024f0:	709a      	strb	r2, [r3, #2]

  /* Check input parameters */
  if ((hrtc == NULL) || (sDate == NULL))
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d002      	beq.n	80024fe <HAL_RTC_GetDate+0x26>
 80024f8:	68bb      	ldr	r3, [r7, #8]
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d101      	bne.n	8002502 <HAL_RTC_GetDate+0x2a>
  {
    return HAL_ERROR;
 80024fe:	2301      	movs	r3, #1
 8002500:	e03a      	b.n	8002578 <HAL_RTC_GetDate+0xa0>

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Call HAL_RTC_GetTime function to update date if counter higher than 24 hours */
  if (HAL_RTC_GetTime(hrtc, &stime, RTC_FORMAT_BIN) != HAL_OK)
 8002502:	f107 0314 	add.w	r3, r7, #20
 8002506:	2200      	movs	r2, #0
 8002508:	4619      	mov	r1, r3
 800250a:	68f8      	ldr	r0, [r7, #12]
 800250c:	f7ff fe56 	bl	80021bc <HAL_RTC_GetTime>
 8002510:	4603      	mov	r3, r0
 8002512:	2b00      	cmp	r3, #0
 8002514:	d001      	beq.n	800251a <HAL_RTC_GetDate+0x42>
  {
    return HAL_ERROR;
 8002516:	2301      	movs	r3, #1
 8002518:	e02e      	b.n	8002578 <HAL_RTC_GetDate+0xa0>
  }

  /* Fill the structure fields with the read parameters */
  sDate->WeekDay  = hrtc->DateToUpdate.WeekDay;
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	7b1a      	ldrb	r2, [r3, #12]
 800251e:	68bb      	ldr	r3, [r7, #8]
 8002520:	701a      	strb	r2, [r3, #0]
  sDate->Year     = hrtc->DateToUpdate.Year;
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	7bda      	ldrb	r2, [r3, #15]
 8002526:	68bb      	ldr	r3, [r7, #8]
 8002528:	70da      	strb	r2, [r3, #3]
  sDate->Month    = hrtc->DateToUpdate.Month;
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	7b5a      	ldrb	r2, [r3, #13]
 800252e:	68bb      	ldr	r3, [r7, #8]
 8002530:	705a      	strb	r2, [r3, #1]
  sDate->Date     = hrtc->DateToUpdate.Date;
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	7b9a      	ldrb	r2, [r3, #14]
 8002536:	68bb      	ldr	r3, [r7, #8]
 8002538:	709a      	strb	r2, [r3, #2]

  /* Check the input parameters format */
  if (Format != RTC_FORMAT_BIN)
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	2b00      	cmp	r3, #0
 800253e:	d01a      	beq.n	8002576 <HAL_RTC_GetDate+0x9e>
  {
    /* Convert the date structure parameters to BCD format */
    sDate->Year   = (uint8_t)RTC_ByteToBcd2(sDate->Year);
 8002540:	68bb      	ldr	r3, [r7, #8]
 8002542:	78db      	ldrb	r3, [r3, #3]
 8002544:	4618      	mov	r0, r3
 8002546:	f000 f92f 	bl	80027a8 <RTC_ByteToBcd2>
 800254a:	4603      	mov	r3, r0
 800254c:	461a      	mov	r2, r3
 800254e:	68bb      	ldr	r3, [r7, #8]
 8002550:	70da      	strb	r2, [r3, #3]
    sDate->Month  = (uint8_t)RTC_ByteToBcd2(sDate->Month);
 8002552:	68bb      	ldr	r3, [r7, #8]
 8002554:	785b      	ldrb	r3, [r3, #1]
 8002556:	4618      	mov	r0, r3
 8002558:	f000 f926 	bl	80027a8 <RTC_ByteToBcd2>
 800255c:	4603      	mov	r3, r0
 800255e:	461a      	mov	r2, r3
 8002560:	68bb      	ldr	r3, [r7, #8]
 8002562:	705a      	strb	r2, [r3, #1]
    sDate->Date   = (uint8_t)RTC_ByteToBcd2(sDate->Date);
 8002564:	68bb      	ldr	r3, [r7, #8]
 8002566:	789b      	ldrb	r3, [r3, #2]
 8002568:	4618      	mov	r0, r3
 800256a:	f000 f91d 	bl	80027a8 <RTC_ByteToBcd2>
 800256e:	4603      	mov	r3, r0
 8002570:	461a      	mov	r2, r3
 8002572:	68bb      	ldr	r3, [r7, #8]
 8002574:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8002576:	2300      	movs	r3, #0
}
 8002578:	4618      	mov	r0, r3
 800257a:	3718      	adds	r7, #24
 800257c:	46bd      	mov	sp, r7
 800257e:	bd80      	pop	{r7, pc}

08002580 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8002580:	b580      	push	{r7, lr}
 8002582:	b084      	sub	sp, #16
 8002584:	af00      	add	r7, sp, #0
 8002586:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002588:	2300      	movs	r3, #0
 800258a:	60fb      	str	r3, [r7, #12]

  /* Check input parameters */
  if (hrtc == NULL)
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	2b00      	cmp	r3, #0
 8002590:	d101      	bne.n	8002596 <HAL_RTC_WaitForSynchro+0x16>
  {
    return HAL_ERROR;
 8002592:	2301      	movs	r3, #1
 8002594:	e01d      	b.n	80025d2 <HAL_RTC_WaitForSynchro+0x52>
  }

  /* Clear RSF flag */
  CLEAR_BIT(hrtc->Instance->CRL, RTC_FLAG_RSF);
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	685a      	ldr	r2, [r3, #4]
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	f022 0208 	bic.w	r2, r2, #8
 80025a4:	605a      	str	r2, [r3, #4]

  tickstart = HAL_GetTick();
 80025a6:	f7fe fcc3 	bl	8000f30 <HAL_GetTick>
 80025aa:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 80025ac:	e009      	b.n	80025c2 <HAL_RTC_WaitForSynchro+0x42>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 80025ae:	f7fe fcbf 	bl	8000f30 <HAL_GetTick>
 80025b2:	4602      	mov	r2, r0
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	1ad3      	subs	r3, r2, r3
 80025b8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80025bc:	d901      	bls.n	80025c2 <HAL_RTC_WaitForSynchro+0x42>
    {
      return HAL_TIMEOUT;
 80025be:	2303      	movs	r3, #3
 80025c0:	e007      	b.n	80025d2 <HAL_RTC_WaitForSynchro+0x52>
  while ((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	685b      	ldr	r3, [r3, #4]
 80025c8:	f003 0308 	and.w	r3, r3, #8
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d0ee      	beq.n	80025ae <HAL_RTC_WaitForSynchro+0x2e>
    }
  }

  return HAL_OK;
 80025d0:	2300      	movs	r3, #0
}
 80025d2:	4618      	mov	r0, r3
 80025d4:	3710      	adds	r7, #16
 80025d6:	46bd      	mov	sp, r7
 80025d8:	bd80      	pop	{r7, pc}

080025da <RTC_ReadTimeCounter>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval Time counter
  */
static uint32_t RTC_ReadTimeCounter(RTC_HandleTypeDef *hrtc)
{
 80025da:	b480      	push	{r7}
 80025dc:	b087      	sub	sp, #28
 80025de:	af00      	add	r7, sp, #0
 80025e0:	6078      	str	r0, [r7, #4]
  uint16_t high1 = 0U, high2 = 0U, low = 0U;
 80025e2:	2300      	movs	r3, #0
 80025e4:	827b      	strh	r3, [r7, #18]
 80025e6:	2300      	movs	r3, #0
 80025e8:	823b      	strh	r3, [r7, #16]
 80025ea:	2300      	movs	r3, #0
 80025ec:	81fb      	strh	r3, [r7, #14]
  uint32_t timecounter = 0U;
 80025ee:	2300      	movs	r3, #0
 80025f0:	617b      	str	r3, [r7, #20]

  high1 = READ_REG(hrtc->Instance->CNTH & RTC_CNTH_RTC_CNT);
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	699b      	ldr	r3, [r3, #24]
 80025f8:	827b      	strh	r3, [r7, #18]
  low   = READ_REG(hrtc->Instance->CNTL & RTC_CNTL_RTC_CNT);
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	69db      	ldr	r3, [r3, #28]
 8002600:	81fb      	strh	r3, [r7, #14]
  high2 = READ_REG(hrtc->Instance->CNTH & RTC_CNTH_RTC_CNT);
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	699b      	ldr	r3, [r3, #24]
 8002608:	823b      	strh	r3, [r7, #16]

  if (high1 != high2)
 800260a:	8a7a      	ldrh	r2, [r7, #18]
 800260c:	8a3b      	ldrh	r3, [r7, #16]
 800260e:	429a      	cmp	r2, r3
 8002610:	d008      	beq.n	8002624 <RTC_ReadTimeCounter+0x4a>
  {
    /* In this case the counter roll over during reading of CNTL and CNTH registers,
       read again CNTL register then return the counter value */
    timecounter = (((uint32_t) high2 << 16U) | READ_REG(hrtc->Instance->CNTL & RTC_CNTL_RTC_CNT));
 8002612:	8a3b      	ldrh	r3, [r7, #16]
 8002614:	041a      	lsls	r2, r3, #16
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	69db      	ldr	r3, [r3, #28]
 800261c:	b29b      	uxth	r3, r3
 800261e:	4313      	orrs	r3, r2
 8002620:	617b      	str	r3, [r7, #20]
 8002622:	e004      	b.n	800262e <RTC_ReadTimeCounter+0x54>
  }
  else
  {
    /* No counter roll over during reading of CNTL and CNTH registers, counter
       value is equal to first value of CNTL and CNTH */
    timecounter = (((uint32_t) high1 << 16U) | low);
 8002624:	8a7b      	ldrh	r3, [r7, #18]
 8002626:	041a      	lsls	r2, r3, #16
 8002628:	89fb      	ldrh	r3, [r7, #14]
 800262a:	4313      	orrs	r3, r2
 800262c:	617b      	str	r3, [r7, #20]
  }

  return timecounter;
 800262e:	697b      	ldr	r3, [r7, #20]
}
 8002630:	4618      	mov	r0, r3
 8002632:	371c      	adds	r7, #28
 8002634:	46bd      	mov	sp, r7
 8002636:	bc80      	pop	{r7}
 8002638:	4770      	bx	lr

0800263a <RTC_WriteTimeCounter>:
  *                the configuration information for RTC.
  * @param  TimeCounter: Counter to write in RTC_CNT registers
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_WriteTimeCounter(RTC_HandleTypeDef *hrtc, uint32_t TimeCounter)
{
 800263a:	b580      	push	{r7, lr}
 800263c:	b084      	sub	sp, #16
 800263e:	af00      	add	r7, sp, #0
 8002640:	6078      	str	r0, [r7, #4]
 8002642:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002644:	2300      	movs	r3, #0
 8002646:	73fb      	strb	r3, [r7, #15]

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8002648:	6878      	ldr	r0, [r7, #4]
 800264a:	f000 f85d 	bl	8002708 <RTC_EnterInitMode>
 800264e:	4603      	mov	r3, r0
 8002650:	2b00      	cmp	r3, #0
 8002652:	d002      	beq.n	800265a <RTC_WriteTimeCounter+0x20>
  {
    status = HAL_ERROR;
 8002654:	2301      	movs	r3, #1
 8002656:	73fb      	strb	r3, [r7, #15]
 8002658:	e011      	b.n	800267e <RTC_WriteTimeCounter+0x44>
  }
  else
  {
    /* Set RTC COUNTER MSB word */
    WRITE_REG(hrtc->Instance->CNTH, (TimeCounter >> 16U));
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	683a      	ldr	r2, [r7, #0]
 8002660:	0c12      	lsrs	r2, r2, #16
 8002662:	619a      	str	r2, [r3, #24]
    /* Set RTC COUNTER LSB word */
    WRITE_REG(hrtc->Instance->CNTL, (TimeCounter & RTC_CNTL_RTC_CNT));
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	683a      	ldr	r2, [r7, #0]
 800266a:	b292      	uxth	r2, r2
 800266c:	61da      	str	r2, [r3, #28]

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 800266e:	6878      	ldr	r0, [r7, #4]
 8002670:	f000 f872 	bl	8002758 <RTC_ExitInitMode>
 8002674:	4603      	mov	r3, r0
 8002676:	2b00      	cmp	r3, #0
 8002678:	d001      	beq.n	800267e <RTC_WriteTimeCounter+0x44>
    {
      status = HAL_ERROR;
 800267a:	2301      	movs	r3, #1
 800267c:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 800267e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002680:	4618      	mov	r0, r3
 8002682:	3710      	adds	r7, #16
 8002684:	46bd      	mov	sp, r7
 8002686:	bd80      	pop	{r7, pc}

08002688 <RTC_ReadAlarmCounter>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval Time counter
  */
static uint32_t RTC_ReadAlarmCounter(RTC_HandleTypeDef *hrtc)
{
 8002688:	b480      	push	{r7}
 800268a:	b085      	sub	sp, #20
 800268c:	af00      	add	r7, sp, #0
 800268e:	6078      	str	r0, [r7, #4]
  uint16_t high1 = 0U, low = 0U;
 8002690:	2300      	movs	r3, #0
 8002692:	81fb      	strh	r3, [r7, #14]
 8002694:	2300      	movs	r3, #0
 8002696:	81bb      	strh	r3, [r7, #12]

  high1 = READ_REG(hrtc->Instance->ALRH & RTC_CNTH_RTC_CNT);
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	6a1b      	ldr	r3, [r3, #32]
 800269e:	81fb      	strh	r3, [r7, #14]
  low   = READ_REG(hrtc->Instance->ALRL & RTC_CNTL_RTC_CNT);
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026a6:	81bb      	strh	r3, [r7, #12]

  return (((uint32_t) high1 << 16U) | low);
 80026a8:	89fb      	ldrh	r3, [r7, #14]
 80026aa:	041a      	lsls	r2, r3, #16
 80026ac:	89bb      	ldrh	r3, [r7, #12]
 80026ae:	4313      	orrs	r3, r2
}
 80026b0:	4618      	mov	r0, r3
 80026b2:	3714      	adds	r7, #20
 80026b4:	46bd      	mov	sp, r7
 80026b6:	bc80      	pop	{r7}
 80026b8:	4770      	bx	lr

080026ba <RTC_WriteAlarmCounter>:
  *                the configuration information for RTC.
  * @param  AlarmCounter: Counter to write in RTC_ALR registers
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_WriteAlarmCounter(RTC_HandleTypeDef *hrtc, uint32_t AlarmCounter)
{
 80026ba:	b580      	push	{r7, lr}
 80026bc:	b084      	sub	sp, #16
 80026be:	af00      	add	r7, sp, #0
 80026c0:	6078      	str	r0, [r7, #4]
 80026c2:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80026c4:	2300      	movs	r3, #0
 80026c6:	73fb      	strb	r3, [r7, #15]

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 80026c8:	6878      	ldr	r0, [r7, #4]
 80026ca:	f000 f81d 	bl	8002708 <RTC_EnterInitMode>
 80026ce:	4603      	mov	r3, r0
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d002      	beq.n	80026da <RTC_WriteAlarmCounter+0x20>
  {
    status = HAL_ERROR;
 80026d4:	2301      	movs	r3, #1
 80026d6:	73fb      	strb	r3, [r7, #15]
 80026d8:	e011      	b.n	80026fe <RTC_WriteAlarmCounter+0x44>
  }
  else
  {
    /* Set RTC COUNTER MSB word */
    WRITE_REG(hrtc->Instance->ALRH, (AlarmCounter >> 16U));
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	683a      	ldr	r2, [r7, #0]
 80026e0:	0c12      	lsrs	r2, r2, #16
 80026e2:	621a      	str	r2, [r3, #32]
    /* Set RTC COUNTER LSB word */
    WRITE_REG(hrtc->Instance->ALRL, (AlarmCounter & RTC_ALRL_RTC_ALR));
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	683a      	ldr	r2, [r7, #0]
 80026ea:	b292      	uxth	r2, r2
 80026ec:	625a      	str	r2, [r3, #36]	; 0x24

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 80026ee:	6878      	ldr	r0, [r7, #4]
 80026f0:	f000 f832 	bl	8002758 <RTC_ExitInitMode>
 80026f4:	4603      	mov	r3, r0
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d001      	beq.n	80026fe <RTC_WriteAlarmCounter+0x44>
    {
      status = HAL_ERROR;
 80026fa:	2301      	movs	r3, #1
 80026fc:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 80026fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8002700:	4618      	mov	r0, r3
 8002702:	3710      	adds	r7, #16
 8002704:	46bd      	mov	sp, r7
 8002706:	bd80      	pop	{r7, pc}

08002708 <RTC_EnterInitMode>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8002708:	b580      	push	{r7, lr}
 800270a:	b084      	sub	sp, #16
 800270c:	af00      	add	r7, sp, #0
 800270e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002710:	2300      	movs	r3, #0
 8002712:	60fb      	str	r3, [r7, #12]

  tickstart = HAL_GetTick();
 8002714:	f7fe fc0c 	bl	8000f30 <HAL_GetTick>
 8002718:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 800271a:	e009      	b.n	8002730 <RTC_EnterInitMode+0x28>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 800271c:	f7fe fc08 	bl	8000f30 <HAL_GetTick>
 8002720:	4602      	mov	r2, r0
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	1ad3      	subs	r3, r2, r3
 8002726:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800272a:	d901      	bls.n	8002730 <RTC_EnterInitMode+0x28>
    {
      return HAL_TIMEOUT;
 800272c:	2303      	movs	r3, #3
 800272e:	e00f      	b.n	8002750 <RTC_EnterInitMode+0x48>
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	685b      	ldr	r3, [r3, #4]
 8002736:	f003 0320 	and.w	r3, r3, #32
 800273a:	2b00      	cmp	r3, #0
 800273c:	d0ee      	beq.n	800271c <RTC_EnterInitMode+0x14>
    }
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	685a      	ldr	r2, [r3, #4]
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	f042 0210 	orr.w	r2, r2, #16
 800274c:	605a      	str	r2, [r3, #4]


  return HAL_OK;
 800274e:	2300      	movs	r3, #0
}
 8002750:	4618      	mov	r0, r3
 8002752:	3710      	adds	r7, #16
 8002754:	46bd      	mov	sp, r7
 8002756:	bd80      	pop	{r7, pc}

08002758 <RTC_ExitInitMode>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8002758:	b580      	push	{r7, lr}
 800275a:	b084      	sub	sp, #16
 800275c:	af00      	add	r7, sp, #0
 800275e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002760:	2300      	movs	r3, #0
 8002762:	60fb      	str	r3, [r7, #12]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	685a      	ldr	r2, [r3, #4]
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	f022 0210 	bic.w	r2, r2, #16
 8002772:	605a      	str	r2, [r3, #4]

  tickstart = HAL_GetTick();
 8002774:	f7fe fbdc 	bl	8000f30 <HAL_GetTick>
 8002778:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 800277a:	e009      	b.n	8002790 <RTC_ExitInitMode+0x38>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 800277c:	f7fe fbd8 	bl	8000f30 <HAL_GetTick>
 8002780:	4602      	mov	r2, r0
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	1ad3      	subs	r3, r2, r3
 8002786:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800278a:	d901      	bls.n	8002790 <RTC_ExitInitMode+0x38>
    {
      return HAL_TIMEOUT;
 800278c:	2303      	movs	r3, #3
 800278e:	e007      	b.n	80027a0 <RTC_ExitInitMode+0x48>
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	685b      	ldr	r3, [r3, #4]
 8002796:	f003 0320 	and.w	r3, r3, #32
 800279a:	2b00      	cmp	r3, #0
 800279c:	d0ee      	beq.n	800277c <RTC_ExitInitMode+0x24>
    }
  }

  return HAL_OK;
 800279e:	2300      	movs	r3, #0
}
 80027a0:	4618      	mov	r0, r3
 80027a2:	3710      	adds	r7, #16
 80027a4:	46bd      	mov	sp, r7
 80027a6:	bd80      	pop	{r7, pc}

080027a8 <RTC_ByteToBcd2>:
  * @brief  Converts a 2 digit decimal to BCD format.
  * @param  Value: Byte to be converted
  * @retval Converted byte
  */
static uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 80027a8:	b480      	push	{r7}
 80027aa:	b085      	sub	sp, #20
 80027ac:	af00      	add	r7, sp, #0
 80027ae:	4603      	mov	r3, r0
 80027b0:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 80027b2:	2300      	movs	r3, #0
 80027b4:	60fb      	str	r3, [r7, #12]

  while (Value >= 10U)
 80027b6:	e005      	b.n	80027c4 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	3301      	adds	r3, #1
 80027bc:	60fb      	str	r3, [r7, #12]
    Value -= 10U;
 80027be:	79fb      	ldrb	r3, [r7, #7]
 80027c0:	3b0a      	subs	r3, #10
 80027c2:	71fb      	strb	r3, [r7, #7]
  while (Value >= 10U)
 80027c4:	79fb      	ldrb	r3, [r7, #7]
 80027c6:	2b09      	cmp	r3, #9
 80027c8:	d8f6      	bhi.n	80027b8 <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | Value);
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	b2db      	uxtb	r3, r3
 80027ce:	011b      	lsls	r3, r3, #4
 80027d0:	b2da      	uxtb	r2, r3
 80027d2:	79fb      	ldrb	r3, [r7, #7]
 80027d4:	4313      	orrs	r3, r2
 80027d6:	b2db      	uxtb	r3, r3
}
 80027d8:	4618      	mov	r0, r3
 80027da:	3714      	adds	r7, #20
 80027dc:	46bd      	mov	sp, r7
 80027de:	bc80      	pop	{r7}
 80027e0:	4770      	bx	lr

080027e2 <RTC_Bcd2ToByte>:
  * @brief  Converts from 2 digit BCD to Binary.
  * @param  Value: BCD value to be converted
  * @retval Converted word
  */
static uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 80027e2:	b480      	push	{r7}
 80027e4:	b085      	sub	sp, #20
 80027e6:	af00      	add	r7, sp, #0
 80027e8:	4603      	mov	r3, r0
 80027ea:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp = 0U;
 80027ec:	2300      	movs	r3, #0
 80027ee:	60fb      	str	r3, [r7, #12]
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10U;
 80027f0:	79fb      	ldrb	r3, [r7, #7]
 80027f2:	091b      	lsrs	r3, r3, #4
 80027f4:	b2db      	uxtb	r3, r3
 80027f6:	461a      	mov	r2, r3
 80027f8:	4613      	mov	r3, r2
 80027fa:	009b      	lsls	r3, r3, #2
 80027fc:	4413      	add	r3, r2
 80027fe:	005b      	lsls	r3, r3, #1
 8002800:	60fb      	str	r3, [r7, #12]
  return (tmp + (Value & (uint8_t)0x0F));
 8002802:	79fb      	ldrb	r3, [r7, #7]
 8002804:	f003 030f 	and.w	r3, r3, #15
 8002808:	b2da      	uxtb	r2, r3
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	b2db      	uxtb	r3, r3
 800280e:	4413      	add	r3, r2
 8002810:	b2db      	uxtb	r3, r3
}
 8002812:	4618      	mov	r0, r3
 8002814:	3714      	adds	r7, #20
 8002816:	46bd      	mov	sp, r7
 8002818:	bc80      	pop	{r7}
 800281a:	4770      	bx	lr

0800281c <RTC_DateUpdate>:
  *                the configuration information for RTC.
  * @param  DayElapsed: Number of days elapsed from last date update
  * @retval None
  */
static void RTC_DateUpdate(RTC_HandleTypeDef *hrtc, uint32_t DayElapsed)
{
 800281c:	b580      	push	{r7, lr}
 800281e:	b086      	sub	sp, #24
 8002820:	af00      	add	r7, sp, #0
 8002822:	6078      	str	r0, [r7, #4]
 8002824:	6039      	str	r1, [r7, #0]
  uint32_t year = 0U, month = 0U, day = 0U;
 8002826:	2300      	movs	r3, #0
 8002828:	617b      	str	r3, [r7, #20]
 800282a:	2300      	movs	r3, #0
 800282c:	613b      	str	r3, [r7, #16]
 800282e:	2300      	movs	r3, #0
 8002830:	60fb      	str	r3, [r7, #12]
  uint32_t loop = 0U;
 8002832:	2300      	movs	r3, #0
 8002834:	60bb      	str	r3, [r7, #8]

  /* Get the current year*/
  year = hrtc->DateToUpdate.Year;
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	7bdb      	ldrb	r3, [r3, #15]
 800283a:	617b      	str	r3, [r7, #20]

  /* Get the current month and day */
  month = hrtc->DateToUpdate.Month;
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	7b5b      	ldrb	r3, [r3, #13]
 8002840:	613b      	str	r3, [r7, #16]
  day = hrtc->DateToUpdate.Date;
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	7b9b      	ldrb	r3, [r3, #14]
 8002846:	60fb      	str	r3, [r7, #12]

  for (loop = 0U; loop < DayElapsed; loop++)
 8002848:	2300      	movs	r3, #0
 800284a:	60bb      	str	r3, [r7, #8]
 800284c:	e06f      	b.n	800292e <RTC_DateUpdate+0x112>
  {
    if ((month == 1U) || (month == 3U) || (month == 5U) || (month == 7U) || \
 800284e:	693b      	ldr	r3, [r7, #16]
 8002850:	2b01      	cmp	r3, #1
 8002852:	d011      	beq.n	8002878 <RTC_DateUpdate+0x5c>
 8002854:	693b      	ldr	r3, [r7, #16]
 8002856:	2b03      	cmp	r3, #3
 8002858:	d00e      	beq.n	8002878 <RTC_DateUpdate+0x5c>
 800285a:	693b      	ldr	r3, [r7, #16]
 800285c:	2b05      	cmp	r3, #5
 800285e:	d00b      	beq.n	8002878 <RTC_DateUpdate+0x5c>
 8002860:	693b      	ldr	r3, [r7, #16]
 8002862:	2b07      	cmp	r3, #7
 8002864:	d008      	beq.n	8002878 <RTC_DateUpdate+0x5c>
 8002866:	693b      	ldr	r3, [r7, #16]
 8002868:	2b08      	cmp	r3, #8
 800286a:	d005      	beq.n	8002878 <RTC_DateUpdate+0x5c>
        (month == 8U) || (month == 10U) || (month == 12U))
 800286c:	693b      	ldr	r3, [r7, #16]
 800286e:	2b0a      	cmp	r3, #10
 8002870:	d002      	beq.n	8002878 <RTC_DateUpdate+0x5c>
 8002872:	693b      	ldr	r3, [r7, #16]
 8002874:	2b0c      	cmp	r3, #12
 8002876:	d117      	bne.n	80028a8 <RTC_DateUpdate+0x8c>
    {
      if (day < 31U)
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	2b1e      	cmp	r3, #30
 800287c:	d803      	bhi.n	8002886 <RTC_DateUpdate+0x6a>
      {
        day++;
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	3301      	adds	r3, #1
 8002882:	60fb      	str	r3, [r7, #12]
      if (day < 31U)
 8002884:	e050      	b.n	8002928 <RTC_DateUpdate+0x10c>
      }
      /* Date structure member: day = 31 */
      else
      {
        if (month != 12U)
 8002886:	693b      	ldr	r3, [r7, #16]
 8002888:	2b0c      	cmp	r3, #12
 800288a:	d005      	beq.n	8002898 <RTC_DateUpdate+0x7c>
        {
          month++;
 800288c:	693b      	ldr	r3, [r7, #16]
 800288e:	3301      	adds	r3, #1
 8002890:	613b      	str	r3, [r7, #16]
          day = 1U;
 8002892:	2301      	movs	r3, #1
 8002894:	60fb      	str	r3, [r7, #12]
      if (day < 31U)
 8002896:	e047      	b.n	8002928 <RTC_DateUpdate+0x10c>
        }
        /* Date structure member: day = 31 & month =12 */
        else
        {
          month = 1U;
 8002898:	2301      	movs	r3, #1
 800289a:	613b      	str	r3, [r7, #16]
          day = 1U;
 800289c:	2301      	movs	r3, #1
 800289e:	60fb      	str	r3, [r7, #12]
          year++;
 80028a0:	697b      	ldr	r3, [r7, #20]
 80028a2:	3301      	adds	r3, #1
 80028a4:	617b      	str	r3, [r7, #20]
      if (day < 31U)
 80028a6:	e03f      	b.n	8002928 <RTC_DateUpdate+0x10c>
        }
      }
    }
    else if ((month == 4U) || (month == 6U) || (month == 9U) || (month == 11U))
 80028a8:	693b      	ldr	r3, [r7, #16]
 80028aa:	2b04      	cmp	r3, #4
 80028ac:	d008      	beq.n	80028c0 <RTC_DateUpdate+0xa4>
 80028ae:	693b      	ldr	r3, [r7, #16]
 80028b0:	2b06      	cmp	r3, #6
 80028b2:	d005      	beq.n	80028c0 <RTC_DateUpdate+0xa4>
 80028b4:	693b      	ldr	r3, [r7, #16]
 80028b6:	2b09      	cmp	r3, #9
 80028b8:	d002      	beq.n	80028c0 <RTC_DateUpdate+0xa4>
 80028ba:	693b      	ldr	r3, [r7, #16]
 80028bc:	2b0b      	cmp	r3, #11
 80028be:	d10c      	bne.n	80028da <RTC_DateUpdate+0xbe>
    {
      if (day < 30U)
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	2b1d      	cmp	r3, #29
 80028c4:	d803      	bhi.n	80028ce <RTC_DateUpdate+0xb2>
      {
        day++;
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	3301      	adds	r3, #1
 80028ca:	60fb      	str	r3, [r7, #12]
      if (day < 30U)
 80028cc:	e02c      	b.n	8002928 <RTC_DateUpdate+0x10c>
      }
      /* Date structure member: day = 30 */
      else
      {
        month++;
 80028ce:	693b      	ldr	r3, [r7, #16]
 80028d0:	3301      	adds	r3, #1
 80028d2:	613b      	str	r3, [r7, #16]
        day = 1U;
 80028d4:	2301      	movs	r3, #1
 80028d6:	60fb      	str	r3, [r7, #12]
      if (day < 30U)
 80028d8:	e026      	b.n	8002928 <RTC_DateUpdate+0x10c>
      }
    }
    else if (month == 2U)
 80028da:	693b      	ldr	r3, [r7, #16]
 80028dc:	2b02      	cmp	r3, #2
 80028de:	d123      	bne.n	8002928 <RTC_DateUpdate+0x10c>
    {
      if (day < 28U)
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	2b1b      	cmp	r3, #27
 80028e4:	d803      	bhi.n	80028ee <RTC_DateUpdate+0xd2>
      {
        day++;
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	3301      	adds	r3, #1
 80028ea:	60fb      	str	r3, [r7, #12]
 80028ec:	e01c      	b.n	8002928 <RTC_DateUpdate+0x10c>
      }
      else if (day == 28U)
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	2b1c      	cmp	r3, #28
 80028f2:	d111      	bne.n	8002918 <RTC_DateUpdate+0xfc>
      {
        /* Leap year */
        if (RTC_IsLeapYear(year))
 80028f4:	697b      	ldr	r3, [r7, #20]
 80028f6:	b29b      	uxth	r3, r3
 80028f8:	4618      	mov	r0, r3
 80028fa:	f000 f839 	bl	8002970 <RTC_IsLeapYear>
 80028fe:	4603      	mov	r3, r0
 8002900:	2b00      	cmp	r3, #0
 8002902:	d003      	beq.n	800290c <RTC_DateUpdate+0xf0>
        {
          day++;
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	3301      	adds	r3, #1
 8002908:	60fb      	str	r3, [r7, #12]
 800290a:	e00d      	b.n	8002928 <RTC_DateUpdate+0x10c>
        }
        else
        {
          month++;
 800290c:	693b      	ldr	r3, [r7, #16]
 800290e:	3301      	adds	r3, #1
 8002910:	613b      	str	r3, [r7, #16]
          day = 1U;
 8002912:	2301      	movs	r3, #1
 8002914:	60fb      	str	r3, [r7, #12]
 8002916:	e007      	b.n	8002928 <RTC_DateUpdate+0x10c>
        }
      }
      else if (day == 29U)
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	2b1d      	cmp	r3, #29
 800291c:	d104      	bne.n	8002928 <RTC_DateUpdate+0x10c>
      {
        month++;
 800291e:	693b      	ldr	r3, [r7, #16]
 8002920:	3301      	adds	r3, #1
 8002922:	613b      	str	r3, [r7, #16]
        day = 1U;
 8002924:	2301      	movs	r3, #1
 8002926:	60fb      	str	r3, [r7, #12]
  for (loop = 0U; loop < DayElapsed; loop++)
 8002928:	68bb      	ldr	r3, [r7, #8]
 800292a:	3301      	adds	r3, #1
 800292c:	60bb      	str	r3, [r7, #8]
 800292e:	68ba      	ldr	r2, [r7, #8]
 8002930:	683b      	ldr	r3, [r7, #0]
 8002932:	429a      	cmp	r2, r3
 8002934:	d38b      	bcc.n	800284e <RTC_DateUpdate+0x32>
      }
    }
  }

  /* Update year */
  hrtc->DateToUpdate.Year = year;
 8002936:	697b      	ldr	r3, [r7, #20]
 8002938:	b2da      	uxtb	r2, r3
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	73da      	strb	r2, [r3, #15]

  /* Update day and month */
  hrtc->DateToUpdate.Month = month;
 800293e:	693b      	ldr	r3, [r7, #16]
 8002940:	b2da      	uxtb	r2, r3
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	735a      	strb	r2, [r3, #13]
  hrtc->DateToUpdate.Date = day;
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	b2da      	uxtb	r2, r3
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	739a      	strb	r2, [r3, #14]

  /* Update day of the week */
  hrtc->DateToUpdate.WeekDay = RTC_WeekDayNum(year, month, day);
 800294e:	693b      	ldr	r3, [r7, #16]
 8002950:	b2db      	uxtb	r3, r3
 8002952:	68fa      	ldr	r2, [r7, #12]
 8002954:	b2d2      	uxtb	r2, r2
 8002956:	4619      	mov	r1, r3
 8002958:	6978      	ldr	r0, [r7, #20]
 800295a:	f000 f83b 	bl	80029d4 <RTC_WeekDayNum>
 800295e:	4603      	mov	r3, r0
 8002960:	461a      	mov	r2, r3
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	731a      	strb	r2, [r3, #12]
}
 8002966:	bf00      	nop
 8002968:	3718      	adds	r7, #24
 800296a:	46bd      	mov	sp, r7
 800296c:	bd80      	pop	{r7, pc}
	...

08002970 <RTC_IsLeapYear>:
  * @param  nYear  year to check
  * @retval 1: leap year
  *         0: not leap year
  */
static uint8_t RTC_IsLeapYear(uint16_t nYear)
{
 8002970:	b480      	push	{r7}
 8002972:	b083      	sub	sp, #12
 8002974:	af00      	add	r7, sp, #0
 8002976:	4603      	mov	r3, r0
 8002978:	80fb      	strh	r3, [r7, #6]
  if ((nYear % 4U) != 0U)
 800297a:	88fb      	ldrh	r3, [r7, #6]
 800297c:	f003 0303 	and.w	r3, r3, #3
 8002980:	b29b      	uxth	r3, r3
 8002982:	2b00      	cmp	r3, #0
 8002984:	d001      	beq.n	800298a <RTC_IsLeapYear+0x1a>
  {
    return 0U;
 8002986:	2300      	movs	r3, #0
 8002988:	e01d      	b.n	80029c6 <RTC_IsLeapYear+0x56>
  }

  if ((nYear % 100U) != 0U)
 800298a:	88fb      	ldrh	r3, [r7, #6]
 800298c:	4a10      	ldr	r2, [pc, #64]	; (80029d0 <RTC_IsLeapYear+0x60>)
 800298e:	fba2 1203 	umull	r1, r2, r2, r3
 8002992:	0952      	lsrs	r2, r2, #5
 8002994:	2164      	movs	r1, #100	; 0x64
 8002996:	fb01 f202 	mul.w	r2, r1, r2
 800299a:	1a9b      	subs	r3, r3, r2
 800299c:	b29b      	uxth	r3, r3
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d001      	beq.n	80029a6 <RTC_IsLeapYear+0x36>
  {
    return 1U;
 80029a2:	2301      	movs	r3, #1
 80029a4:	e00f      	b.n	80029c6 <RTC_IsLeapYear+0x56>
  }

  if ((nYear % 400U) == 0U)
 80029a6:	88fb      	ldrh	r3, [r7, #6]
 80029a8:	4a09      	ldr	r2, [pc, #36]	; (80029d0 <RTC_IsLeapYear+0x60>)
 80029aa:	fba2 1203 	umull	r1, r2, r2, r3
 80029ae:	09d2      	lsrs	r2, r2, #7
 80029b0:	f44f 71c8 	mov.w	r1, #400	; 0x190
 80029b4:	fb01 f202 	mul.w	r2, r1, r2
 80029b8:	1a9b      	subs	r3, r3, r2
 80029ba:	b29b      	uxth	r3, r3
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d101      	bne.n	80029c4 <RTC_IsLeapYear+0x54>
  {
    return 1U;
 80029c0:	2301      	movs	r3, #1
 80029c2:	e000      	b.n	80029c6 <RTC_IsLeapYear+0x56>
  }
  else
  {
    return 0U;
 80029c4:	2300      	movs	r3, #0
  }
}
 80029c6:	4618      	mov	r0, r3
 80029c8:	370c      	adds	r7, #12
 80029ca:	46bd      	mov	sp, r7
 80029cc:	bc80      	pop	{r7}
 80029ce:	4770      	bx	lr
 80029d0:	51eb851f 	.word	0x51eb851f

080029d4 <RTC_WeekDayNum>:
  *         @arg RTC_WEEKDAY_FRIDAY
  *         @arg RTC_WEEKDAY_SATURDAY
  *         @arg RTC_WEEKDAY_SUNDAY
  */
static uint8_t RTC_WeekDayNum(uint32_t nYear, uint8_t nMonth, uint8_t nDay)
{
 80029d4:	b480      	push	{r7}
 80029d6:	b085      	sub	sp, #20
 80029d8:	af00      	add	r7, sp, #0
 80029da:	6078      	str	r0, [r7, #4]
 80029dc:	460b      	mov	r3, r1
 80029de:	70fb      	strb	r3, [r7, #3]
 80029e0:	4613      	mov	r3, r2
 80029e2:	70bb      	strb	r3, [r7, #2]
  uint32_t year = 0U, weekday = 0U;
 80029e4:	2300      	movs	r3, #0
 80029e6:	60bb      	str	r3, [r7, #8]
 80029e8:	2300      	movs	r3, #0
 80029ea:	60fb      	str	r3, [r7, #12]

  year = 2000U + nYear;
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 80029f2:	60bb      	str	r3, [r7, #8]

  if (nMonth < 3U)
 80029f4:	78fb      	ldrb	r3, [r7, #3]
 80029f6:	2b02      	cmp	r3, #2
 80029f8:	d82d      	bhi.n	8002a56 <RTC_WeekDayNum+0x82>
  {
    /*D = { [(23 x month)/9] + day + 4 + year + [(year-1)/4] - [(year-1)/100] + [(year-1)/400] } mod 7*/
    weekday = (((23U * nMonth) / 9U) + nDay + 4U + year + ((year - 1U) / 4U) - ((year - 1U) / 100U) + ((year - 1U) / 400U)) % 7U;
 80029fa:	78fa      	ldrb	r2, [r7, #3]
 80029fc:	4613      	mov	r3, r2
 80029fe:	005b      	lsls	r3, r3, #1
 8002a00:	4413      	add	r3, r2
 8002a02:	00db      	lsls	r3, r3, #3
 8002a04:	1a9b      	subs	r3, r3, r2
 8002a06:	4a2c      	ldr	r2, [pc, #176]	; (8002ab8 <RTC_WeekDayNum+0xe4>)
 8002a08:	fba2 2303 	umull	r2, r3, r2, r3
 8002a0c:	085a      	lsrs	r2, r3, #1
 8002a0e:	78bb      	ldrb	r3, [r7, #2]
 8002a10:	441a      	add	r2, r3
 8002a12:	68bb      	ldr	r3, [r7, #8]
 8002a14:	441a      	add	r2, r3
 8002a16:	68bb      	ldr	r3, [r7, #8]
 8002a18:	3b01      	subs	r3, #1
 8002a1a:	089b      	lsrs	r3, r3, #2
 8002a1c:	441a      	add	r2, r3
 8002a1e:	68bb      	ldr	r3, [r7, #8]
 8002a20:	3b01      	subs	r3, #1
 8002a22:	4926      	ldr	r1, [pc, #152]	; (8002abc <RTC_WeekDayNum+0xe8>)
 8002a24:	fba1 1303 	umull	r1, r3, r1, r3
 8002a28:	095b      	lsrs	r3, r3, #5
 8002a2a:	1ad2      	subs	r2, r2, r3
 8002a2c:	68bb      	ldr	r3, [r7, #8]
 8002a2e:	3b01      	subs	r3, #1
 8002a30:	4922      	ldr	r1, [pc, #136]	; (8002abc <RTC_WeekDayNum+0xe8>)
 8002a32:	fba1 1303 	umull	r1, r3, r1, r3
 8002a36:	09db      	lsrs	r3, r3, #7
 8002a38:	4413      	add	r3, r2
 8002a3a:	1d1a      	adds	r2, r3, #4
 8002a3c:	4b20      	ldr	r3, [pc, #128]	; (8002ac0 <RTC_WeekDayNum+0xec>)
 8002a3e:	fba3 1302 	umull	r1, r3, r3, r2
 8002a42:	1ad1      	subs	r1, r2, r3
 8002a44:	0849      	lsrs	r1, r1, #1
 8002a46:	440b      	add	r3, r1
 8002a48:	0899      	lsrs	r1, r3, #2
 8002a4a:	460b      	mov	r3, r1
 8002a4c:	00db      	lsls	r3, r3, #3
 8002a4e:	1a5b      	subs	r3, r3, r1
 8002a50:	1ad3      	subs	r3, r2, r3
 8002a52:	60fb      	str	r3, [r7, #12]
 8002a54:	e029      	b.n	8002aaa <RTC_WeekDayNum+0xd6>
  }
  else
  {
    /*D = { [(23 x month)/9] + day + 4 + year + [year/4] - [year/100] + [year/400] - 2 } mod 7*/
    weekday = (((23U * nMonth) / 9U) + nDay + 4U + year + (year / 4U) - (year / 100U) + (year / 400U) - 2U) % 7U;
 8002a56:	78fa      	ldrb	r2, [r7, #3]
 8002a58:	4613      	mov	r3, r2
 8002a5a:	005b      	lsls	r3, r3, #1
 8002a5c:	4413      	add	r3, r2
 8002a5e:	00db      	lsls	r3, r3, #3
 8002a60:	1a9b      	subs	r3, r3, r2
 8002a62:	4a15      	ldr	r2, [pc, #84]	; (8002ab8 <RTC_WeekDayNum+0xe4>)
 8002a64:	fba2 2303 	umull	r2, r3, r2, r3
 8002a68:	085a      	lsrs	r2, r3, #1
 8002a6a:	78bb      	ldrb	r3, [r7, #2]
 8002a6c:	441a      	add	r2, r3
 8002a6e:	68bb      	ldr	r3, [r7, #8]
 8002a70:	441a      	add	r2, r3
 8002a72:	68bb      	ldr	r3, [r7, #8]
 8002a74:	089b      	lsrs	r3, r3, #2
 8002a76:	441a      	add	r2, r3
 8002a78:	68bb      	ldr	r3, [r7, #8]
 8002a7a:	4910      	ldr	r1, [pc, #64]	; (8002abc <RTC_WeekDayNum+0xe8>)
 8002a7c:	fba1 1303 	umull	r1, r3, r1, r3
 8002a80:	095b      	lsrs	r3, r3, #5
 8002a82:	1ad2      	subs	r2, r2, r3
 8002a84:	68bb      	ldr	r3, [r7, #8]
 8002a86:	490d      	ldr	r1, [pc, #52]	; (8002abc <RTC_WeekDayNum+0xe8>)
 8002a88:	fba1 1303 	umull	r1, r3, r1, r3
 8002a8c:	09db      	lsrs	r3, r3, #7
 8002a8e:	4413      	add	r3, r2
 8002a90:	1c9a      	adds	r2, r3, #2
 8002a92:	4b0b      	ldr	r3, [pc, #44]	; (8002ac0 <RTC_WeekDayNum+0xec>)
 8002a94:	fba3 1302 	umull	r1, r3, r3, r2
 8002a98:	1ad1      	subs	r1, r2, r3
 8002a9a:	0849      	lsrs	r1, r1, #1
 8002a9c:	440b      	add	r3, r1
 8002a9e:	0899      	lsrs	r1, r3, #2
 8002aa0:	460b      	mov	r3, r1
 8002aa2:	00db      	lsls	r3, r3, #3
 8002aa4:	1a5b      	subs	r3, r3, r1
 8002aa6:	1ad3      	subs	r3, r2, r3
 8002aa8:	60fb      	str	r3, [r7, #12]
  }

  return (uint8_t)weekday;
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	b2db      	uxtb	r3, r3
}
 8002aae:	4618      	mov	r0, r3
 8002ab0:	3714      	adds	r7, #20
 8002ab2:	46bd      	mov	sp, r7
 8002ab4:	bc80      	pop	{r7}
 8002ab6:	4770      	bx	lr
 8002ab8:	38e38e39 	.word	0x38e38e39
 8002abc:	51eb851f 	.word	0x51eb851f
 8002ac0:	24924925 	.word	0x24924925

08002ac4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002ac4:	b580      	push	{r7, lr}
 8002ac6:	b082      	sub	sp, #8
 8002ac8:	af00      	add	r7, sp, #0
 8002aca:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d101      	bne.n	8002ad6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002ad2:	2301      	movs	r3, #1
 8002ad4:	e076      	b.n	8002bc4 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d108      	bne.n	8002af0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	685b      	ldr	r3, [r3, #4]
 8002ae2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002ae6:	d009      	beq.n	8002afc <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	2200      	movs	r2, #0
 8002aec:	61da      	str	r2, [r3, #28]
 8002aee:	e005      	b.n	8002afc <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	2200      	movs	r2, #0
 8002af4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	2200      	movs	r2, #0
 8002afa:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	2200      	movs	r2, #0
 8002b00:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002b08:	b2db      	uxtb	r3, r3
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d106      	bne.n	8002b1c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	2200      	movs	r2, #0
 8002b12:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002b16:	6878      	ldr	r0, [r7, #4]
 8002b18:	f7fe f8ea 	bl	8000cf0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	2202      	movs	r2, #2
 8002b20:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	681a      	ldr	r2, [r3, #0]
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002b32:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	685b      	ldr	r3, [r3, #4]
 8002b38:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	689b      	ldr	r3, [r3, #8]
 8002b40:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8002b44:	431a      	orrs	r2, r3
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	68db      	ldr	r3, [r3, #12]
 8002b4a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002b4e:	431a      	orrs	r2, r3
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	691b      	ldr	r3, [r3, #16]
 8002b54:	f003 0302 	and.w	r3, r3, #2
 8002b58:	431a      	orrs	r2, r3
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	695b      	ldr	r3, [r3, #20]
 8002b5e:	f003 0301 	and.w	r3, r3, #1
 8002b62:	431a      	orrs	r2, r3
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	699b      	ldr	r3, [r3, #24]
 8002b68:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002b6c:	431a      	orrs	r2, r3
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	69db      	ldr	r3, [r3, #28]
 8002b72:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002b76:	431a      	orrs	r2, r3
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	6a1b      	ldr	r3, [r3, #32]
 8002b7c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b80:	ea42 0103 	orr.w	r1, r2, r3
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b88:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	430a      	orrs	r2, r1
 8002b92:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	699b      	ldr	r3, [r3, #24]
 8002b98:	0c1a      	lsrs	r2, r3, #16
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	f002 0204 	and.w	r2, r2, #4
 8002ba2:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	69da      	ldr	r2, [r3, #28]
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002bb2:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	2200      	movs	r2, #0
 8002bb8:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	2201      	movs	r2, #1
 8002bbe:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8002bc2:	2300      	movs	r3, #0
}
 8002bc4:	4618      	mov	r0, r3
 8002bc6:	3708      	adds	r7, #8
 8002bc8:	46bd      	mov	sp, r7
 8002bca:	bd80      	pop	{r7, pc}

08002bcc <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002bcc:	b580      	push	{r7, lr}
 8002bce:	b088      	sub	sp, #32
 8002bd0:	af00      	add	r7, sp, #0
 8002bd2:	60f8      	str	r0, [r7, #12]
 8002bd4:	60b9      	str	r1, [r7, #8]
 8002bd6:	603b      	str	r3, [r7, #0]
 8002bd8:	4613      	mov	r3, r2
 8002bda:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002bdc:	2300      	movs	r3, #0
 8002bde:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002be6:	2b01      	cmp	r3, #1
 8002be8:	d101      	bne.n	8002bee <HAL_SPI_Transmit+0x22>
 8002bea:	2302      	movs	r3, #2
 8002bec:	e12d      	b.n	8002e4a <HAL_SPI_Transmit+0x27e>
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	2201      	movs	r2, #1
 8002bf2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002bf6:	f7fe f99b 	bl	8000f30 <HAL_GetTick>
 8002bfa:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8002bfc:	88fb      	ldrh	r3, [r7, #6]
 8002bfe:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002c06:	b2db      	uxtb	r3, r3
 8002c08:	2b01      	cmp	r3, #1
 8002c0a:	d002      	beq.n	8002c12 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8002c0c:	2302      	movs	r3, #2
 8002c0e:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002c10:	e116      	b.n	8002e40 <HAL_SPI_Transmit+0x274>
  }

  if ((pData == NULL) || (Size == 0U))
 8002c12:	68bb      	ldr	r3, [r7, #8]
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d002      	beq.n	8002c1e <HAL_SPI_Transmit+0x52>
 8002c18:	88fb      	ldrh	r3, [r7, #6]
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d102      	bne.n	8002c24 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8002c1e:	2301      	movs	r3, #1
 8002c20:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002c22:	e10d      	b.n	8002e40 <HAL_SPI_Transmit+0x274>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	2203      	movs	r2, #3
 8002c28:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	2200      	movs	r2, #0
 8002c30:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	68ba      	ldr	r2, [r7, #8]
 8002c36:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	88fa      	ldrh	r2, [r7, #6]
 8002c3c:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	88fa      	ldrh	r2, [r7, #6]
 8002c42:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	2200      	movs	r2, #0
 8002c48:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	2200      	movs	r2, #0
 8002c4e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	2200      	movs	r2, #0
 8002c54:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	2200      	movs	r2, #0
 8002c5a:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	2200      	movs	r2, #0
 8002c60:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	689b      	ldr	r3, [r3, #8]
 8002c66:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002c6a:	d10f      	bne.n	8002c8c <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	681a      	ldr	r2, [r3, #0]
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002c7a:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	681a      	ldr	r2, [r3, #0]
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002c8a:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c96:	2b40      	cmp	r3, #64	; 0x40
 8002c98:	d007      	beq.n	8002caa <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	681a      	ldr	r2, [r3, #0]
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002ca8:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	68db      	ldr	r3, [r3, #12]
 8002cae:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002cb2:	d14f      	bne.n	8002d54 <HAL_SPI_Transmit+0x188>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	685b      	ldr	r3, [r3, #4]
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d002      	beq.n	8002cc2 <HAL_SPI_Transmit+0xf6>
 8002cbc:	8afb      	ldrh	r3, [r7, #22]
 8002cbe:	2b01      	cmp	r3, #1
 8002cc0:	d142      	bne.n	8002d48 <HAL_SPI_Transmit+0x17c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cc6:	881a      	ldrh	r2, [r3, #0]
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cd2:	1c9a      	adds	r2, r3, #2
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002cdc:	b29b      	uxth	r3, r3
 8002cde:	3b01      	subs	r3, #1
 8002ce0:	b29a      	uxth	r2, r3
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8002ce6:	e02f      	b.n	8002d48 <HAL_SPI_Transmit+0x17c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	689b      	ldr	r3, [r3, #8]
 8002cee:	f003 0302 	and.w	r3, r3, #2
 8002cf2:	2b02      	cmp	r3, #2
 8002cf4:	d112      	bne.n	8002d1c <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cfa:	881a      	ldrh	r2, [r3, #0]
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d06:	1c9a      	adds	r2, r3, #2
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002d10:	b29b      	uxth	r3, r3
 8002d12:	3b01      	subs	r3, #1
 8002d14:	b29a      	uxth	r2, r3
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	86da      	strh	r2, [r3, #54]	; 0x36
 8002d1a:	e015      	b.n	8002d48 <HAL_SPI_Transmit+0x17c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002d1c:	f7fe f908 	bl	8000f30 <HAL_GetTick>
 8002d20:	4602      	mov	r2, r0
 8002d22:	69bb      	ldr	r3, [r7, #24]
 8002d24:	1ad3      	subs	r3, r2, r3
 8002d26:	683a      	ldr	r2, [r7, #0]
 8002d28:	429a      	cmp	r2, r3
 8002d2a:	d803      	bhi.n	8002d34 <HAL_SPI_Transmit+0x168>
 8002d2c:	683b      	ldr	r3, [r7, #0]
 8002d2e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d32:	d102      	bne.n	8002d3a <HAL_SPI_Transmit+0x16e>
 8002d34:	683b      	ldr	r3, [r7, #0]
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d106      	bne.n	8002d48 <HAL_SPI_Transmit+0x17c>
        {
          errorcode = HAL_TIMEOUT;
 8002d3a:	2303      	movs	r3, #3
 8002d3c:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	2201      	movs	r2, #1
 8002d42:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 8002d46:	e07b      	b.n	8002e40 <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002d4c:	b29b      	uxth	r3, r3
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d1ca      	bne.n	8002ce8 <HAL_SPI_Transmit+0x11c>
 8002d52:	e050      	b.n	8002df6 <HAL_SPI_Transmit+0x22a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	685b      	ldr	r3, [r3, #4]
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d002      	beq.n	8002d62 <HAL_SPI_Transmit+0x196>
 8002d5c:	8afb      	ldrh	r3, [r7, #22]
 8002d5e:	2b01      	cmp	r3, #1
 8002d60:	d144      	bne.n	8002dec <HAL_SPI_Transmit+0x220>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	330c      	adds	r3, #12
 8002d6c:	7812      	ldrb	r2, [r2, #0]
 8002d6e:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d74:	1c5a      	adds	r2, r3, #1
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002d7e:	b29b      	uxth	r3, r3
 8002d80:	3b01      	subs	r3, #1
 8002d82:	b29a      	uxth	r2, r3
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8002d88:	e030      	b.n	8002dec <HAL_SPI_Transmit+0x220>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	689b      	ldr	r3, [r3, #8]
 8002d90:	f003 0302 	and.w	r3, r3, #2
 8002d94:	2b02      	cmp	r3, #2
 8002d96:	d113      	bne.n	8002dc0 <HAL_SPI_Transmit+0x1f4>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	330c      	adds	r3, #12
 8002da2:	7812      	ldrb	r2, [r2, #0]
 8002da4:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002daa:	1c5a      	adds	r2, r3, #1
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002db4:	b29b      	uxth	r3, r3
 8002db6:	3b01      	subs	r3, #1
 8002db8:	b29a      	uxth	r2, r3
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	86da      	strh	r2, [r3, #54]	; 0x36
 8002dbe:	e015      	b.n	8002dec <HAL_SPI_Transmit+0x220>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002dc0:	f7fe f8b6 	bl	8000f30 <HAL_GetTick>
 8002dc4:	4602      	mov	r2, r0
 8002dc6:	69bb      	ldr	r3, [r7, #24]
 8002dc8:	1ad3      	subs	r3, r2, r3
 8002dca:	683a      	ldr	r2, [r7, #0]
 8002dcc:	429a      	cmp	r2, r3
 8002dce:	d803      	bhi.n	8002dd8 <HAL_SPI_Transmit+0x20c>
 8002dd0:	683b      	ldr	r3, [r7, #0]
 8002dd2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002dd6:	d102      	bne.n	8002dde <HAL_SPI_Transmit+0x212>
 8002dd8:	683b      	ldr	r3, [r7, #0]
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d106      	bne.n	8002dec <HAL_SPI_Transmit+0x220>
        {
          errorcode = HAL_TIMEOUT;
 8002dde:	2303      	movs	r3, #3
 8002de0:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	2201      	movs	r2, #1
 8002de6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 8002dea:	e029      	b.n	8002e40 <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002df0:	b29b      	uxth	r3, r3
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d1c9      	bne.n	8002d8a <HAL_SPI_Transmit+0x1be>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002df6:	69ba      	ldr	r2, [r7, #24]
 8002df8:	6839      	ldr	r1, [r7, #0]
 8002dfa:	68f8      	ldr	r0, [r7, #12]
 8002dfc:	f000 f8b2 	bl	8002f64 <SPI_EndRxTxTransaction>
 8002e00:	4603      	mov	r3, r0
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d002      	beq.n	8002e0c <HAL_SPI_Transmit+0x240>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	2220      	movs	r2, #32
 8002e0a:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	689b      	ldr	r3, [r3, #8]
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d10a      	bne.n	8002e2a <HAL_SPI_Transmit+0x25e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002e14:	2300      	movs	r3, #0
 8002e16:	613b      	str	r3, [r7, #16]
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	68db      	ldr	r3, [r3, #12]
 8002e1e:	613b      	str	r3, [r7, #16]
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	689b      	ldr	r3, [r3, #8]
 8002e26:	613b      	str	r3, [r7, #16]
 8002e28:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d002      	beq.n	8002e38 <HAL_SPI_Transmit+0x26c>
  {
    errorcode = HAL_ERROR;
 8002e32:	2301      	movs	r3, #1
 8002e34:	77fb      	strb	r3, [r7, #31]
 8002e36:	e003      	b.n	8002e40 <HAL_SPI_Transmit+0x274>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	2201      	movs	r2, #1
 8002e3c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	2200      	movs	r2, #0
 8002e44:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8002e48:	7ffb      	ldrb	r3, [r7, #31]
}
 8002e4a:	4618      	mov	r0, r3
 8002e4c:	3720      	adds	r7, #32
 8002e4e:	46bd      	mov	sp, r7
 8002e50:	bd80      	pop	{r7, pc}
	...

08002e54 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002e54:	b580      	push	{r7, lr}
 8002e56:	b088      	sub	sp, #32
 8002e58:	af00      	add	r7, sp, #0
 8002e5a:	60f8      	str	r0, [r7, #12]
 8002e5c:	60b9      	str	r1, [r7, #8]
 8002e5e:	603b      	str	r3, [r7, #0]
 8002e60:	4613      	mov	r3, r2
 8002e62:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8002e64:	f7fe f864 	bl	8000f30 <HAL_GetTick>
 8002e68:	4602      	mov	r2, r0
 8002e6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e6c:	1a9b      	subs	r3, r3, r2
 8002e6e:	683a      	ldr	r2, [r7, #0]
 8002e70:	4413      	add	r3, r2
 8002e72:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8002e74:	f7fe f85c 	bl	8000f30 <HAL_GetTick>
 8002e78:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8002e7a:	4b39      	ldr	r3, [pc, #228]	; (8002f60 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	015b      	lsls	r3, r3, #5
 8002e80:	0d1b      	lsrs	r3, r3, #20
 8002e82:	69fa      	ldr	r2, [r7, #28]
 8002e84:	fb02 f303 	mul.w	r3, r2, r3
 8002e88:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002e8a:	e054      	b.n	8002f36 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002e8c:	683b      	ldr	r3, [r7, #0]
 8002e8e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e92:	d050      	beq.n	8002f36 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002e94:	f7fe f84c 	bl	8000f30 <HAL_GetTick>
 8002e98:	4602      	mov	r2, r0
 8002e9a:	69bb      	ldr	r3, [r7, #24]
 8002e9c:	1ad3      	subs	r3, r2, r3
 8002e9e:	69fa      	ldr	r2, [r7, #28]
 8002ea0:	429a      	cmp	r2, r3
 8002ea2:	d902      	bls.n	8002eaa <SPI_WaitFlagStateUntilTimeout+0x56>
 8002ea4:	69fb      	ldr	r3, [r7, #28]
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d13d      	bne.n	8002f26 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	685a      	ldr	r2, [r3, #4]
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8002eb8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	685b      	ldr	r3, [r3, #4]
 8002ebe:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002ec2:	d111      	bne.n	8002ee8 <SPI_WaitFlagStateUntilTimeout+0x94>
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	689b      	ldr	r3, [r3, #8]
 8002ec8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002ecc:	d004      	beq.n	8002ed8 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	689b      	ldr	r3, [r3, #8]
 8002ed2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002ed6:	d107      	bne.n	8002ee8 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	681a      	ldr	r2, [r3, #0]
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002ee6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002eec:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002ef0:	d10f      	bne.n	8002f12 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	681a      	ldr	r2, [r3, #0]
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002f00:	601a      	str	r2, [r3, #0]
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	681a      	ldr	r2, [r3, #0]
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002f10:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	2201      	movs	r2, #1
 8002f16:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	2200      	movs	r2, #0
 8002f1e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8002f22:	2303      	movs	r3, #3
 8002f24:	e017      	b.n	8002f56 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8002f26:	697b      	ldr	r3, [r7, #20]
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d101      	bne.n	8002f30 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8002f2c:	2300      	movs	r3, #0
 8002f2e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8002f30:	697b      	ldr	r3, [r7, #20]
 8002f32:	3b01      	subs	r3, #1
 8002f34:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	689a      	ldr	r2, [r3, #8]
 8002f3c:	68bb      	ldr	r3, [r7, #8]
 8002f3e:	4013      	ands	r3, r2
 8002f40:	68ba      	ldr	r2, [r7, #8]
 8002f42:	429a      	cmp	r2, r3
 8002f44:	bf0c      	ite	eq
 8002f46:	2301      	moveq	r3, #1
 8002f48:	2300      	movne	r3, #0
 8002f4a:	b2db      	uxtb	r3, r3
 8002f4c:	461a      	mov	r2, r3
 8002f4e:	79fb      	ldrb	r3, [r7, #7]
 8002f50:	429a      	cmp	r2, r3
 8002f52:	d19b      	bne.n	8002e8c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8002f54:	2300      	movs	r3, #0
}
 8002f56:	4618      	mov	r0, r3
 8002f58:	3720      	adds	r7, #32
 8002f5a:	46bd      	mov	sp, r7
 8002f5c:	bd80      	pop	{r7, pc}
 8002f5e:	bf00      	nop
 8002f60:	20000010 	.word	0x20000010

08002f64 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002f64:	b580      	push	{r7, lr}
 8002f66:	b086      	sub	sp, #24
 8002f68:	af02      	add	r7, sp, #8
 8002f6a:	60f8      	str	r0, [r7, #12]
 8002f6c:	60b9      	str	r1, [r7, #8]
 8002f6e:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	9300      	str	r3, [sp, #0]
 8002f74:	68bb      	ldr	r3, [r7, #8]
 8002f76:	2200      	movs	r2, #0
 8002f78:	2180      	movs	r1, #128	; 0x80
 8002f7a:	68f8      	ldr	r0, [r7, #12]
 8002f7c:	f7ff ff6a 	bl	8002e54 <SPI_WaitFlagStateUntilTimeout>
 8002f80:	4603      	mov	r3, r0
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d007      	beq.n	8002f96 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f8a:	f043 0220 	orr.w	r2, r3, #32
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 8002f92:	2303      	movs	r3, #3
 8002f94:	e000      	b.n	8002f98 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 8002f96:	2300      	movs	r3, #0
}
 8002f98:	4618      	mov	r0, r3
 8002f9a:	3710      	adds	r7, #16
 8002f9c:	46bd      	mov	sp, r7
 8002f9e:	bd80      	pop	{r7, pc}

08002fa0 <sbrk_aligned>:
 8002fa0:	b570      	push	{r4, r5, r6, lr}
 8002fa2:	4e0e      	ldr	r6, [pc, #56]	; (8002fdc <sbrk_aligned+0x3c>)
 8002fa4:	460c      	mov	r4, r1
 8002fa6:	6831      	ldr	r1, [r6, #0]
 8002fa8:	4605      	mov	r5, r0
 8002faa:	b911      	cbnz	r1, 8002fb2 <sbrk_aligned+0x12>
 8002fac:	f000 f8cc 	bl	8003148 <_sbrk_r>
 8002fb0:	6030      	str	r0, [r6, #0]
 8002fb2:	4621      	mov	r1, r4
 8002fb4:	4628      	mov	r0, r5
 8002fb6:	f000 f8c7 	bl	8003148 <_sbrk_r>
 8002fba:	1c43      	adds	r3, r0, #1
 8002fbc:	d00a      	beq.n	8002fd4 <sbrk_aligned+0x34>
 8002fbe:	1cc4      	adds	r4, r0, #3
 8002fc0:	f024 0403 	bic.w	r4, r4, #3
 8002fc4:	42a0      	cmp	r0, r4
 8002fc6:	d007      	beq.n	8002fd8 <sbrk_aligned+0x38>
 8002fc8:	1a21      	subs	r1, r4, r0
 8002fca:	4628      	mov	r0, r5
 8002fcc:	f000 f8bc 	bl	8003148 <_sbrk_r>
 8002fd0:	3001      	adds	r0, #1
 8002fd2:	d101      	bne.n	8002fd8 <sbrk_aligned+0x38>
 8002fd4:	f04f 34ff 	mov.w	r4, #4294967295
 8002fd8:	4620      	mov	r0, r4
 8002fda:	bd70      	pop	{r4, r5, r6, pc}
 8002fdc:	20000100 	.word	0x20000100

08002fe0 <_malloc_r>:
 8002fe0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002fe4:	1ccd      	adds	r5, r1, #3
 8002fe6:	f025 0503 	bic.w	r5, r5, #3
 8002fea:	3508      	adds	r5, #8
 8002fec:	2d0c      	cmp	r5, #12
 8002fee:	bf38      	it	cc
 8002ff0:	250c      	movcc	r5, #12
 8002ff2:	2d00      	cmp	r5, #0
 8002ff4:	4607      	mov	r7, r0
 8002ff6:	db01      	blt.n	8002ffc <_malloc_r+0x1c>
 8002ff8:	42a9      	cmp	r1, r5
 8002ffa:	d905      	bls.n	8003008 <_malloc_r+0x28>
 8002ffc:	230c      	movs	r3, #12
 8002ffe:	2600      	movs	r6, #0
 8003000:	603b      	str	r3, [r7, #0]
 8003002:	4630      	mov	r0, r6
 8003004:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003008:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80030dc <_malloc_r+0xfc>
 800300c:	f000 f868 	bl	80030e0 <__malloc_lock>
 8003010:	f8d8 3000 	ldr.w	r3, [r8]
 8003014:	461c      	mov	r4, r3
 8003016:	bb5c      	cbnz	r4, 8003070 <_malloc_r+0x90>
 8003018:	4629      	mov	r1, r5
 800301a:	4638      	mov	r0, r7
 800301c:	f7ff ffc0 	bl	8002fa0 <sbrk_aligned>
 8003020:	1c43      	adds	r3, r0, #1
 8003022:	4604      	mov	r4, r0
 8003024:	d155      	bne.n	80030d2 <_malloc_r+0xf2>
 8003026:	f8d8 4000 	ldr.w	r4, [r8]
 800302a:	4626      	mov	r6, r4
 800302c:	2e00      	cmp	r6, #0
 800302e:	d145      	bne.n	80030bc <_malloc_r+0xdc>
 8003030:	2c00      	cmp	r4, #0
 8003032:	d048      	beq.n	80030c6 <_malloc_r+0xe6>
 8003034:	6823      	ldr	r3, [r4, #0]
 8003036:	4631      	mov	r1, r6
 8003038:	4638      	mov	r0, r7
 800303a:	eb04 0903 	add.w	r9, r4, r3
 800303e:	f000 f883 	bl	8003148 <_sbrk_r>
 8003042:	4581      	cmp	r9, r0
 8003044:	d13f      	bne.n	80030c6 <_malloc_r+0xe6>
 8003046:	6821      	ldr	r1, [r4, #0]
 8003048:	4638      	mov	r0, r7
 800304a:	1a6d      	subs	r5, r5, r1
 800304c:	4629      	mov	r1, r5
 800304e:	f7ff ffa7 	bl	8002fa0 <sbrk_aligned>
 8003052:	3001      	adds	r0, #1
 8003054:	d037      	beq.n	80030c6 <_malloc_r+0xe6>
 8003056:	6823      	ldr	r3, [r4, #0]
 8003058:	442b      	add	r3, r5
 800305a:	6023      	str	r3, [r4, #0]
 800305c:	f8d8 3000 	ldr.w	r3, [r8]
 8003060:	2b00      	cmp	r3, #0
 8003062:	d038      	beq.n	80030d6 <_malloc_r+0xf6>
 8003064:	685a      	ldr	r2, [r3, #4]
 8003066:	42a2      	cmp	r2, r4
 8003068:	d12b      	bne.n	80030c2 <_malloc_r+0xe2>
 800306a:	2200      	movs	r2, #0
 800306c:	605a      	str	r2, [r3, #4]
 800306e:	e00f      	b.n	8003090 <_malloc_r+0xb0>
 8003070:	6822      	ldr	r2, [r4, #0]
 8003072:	1b52      	subs	r2, r2, r5
 8003074:	d41f      	bmi.n	80030b6 <_malloc_r+0xd6>
 8003076:	2a0b      	cmp	r2, #11
 8003078:	d917      	bls.n	80030aa <_malloc_r+0xca>
 800307a:	1961      	adds	r1, r4, r5
 800307c:	42a3      	cmp	r3, r4
 800307e:	6025      	str	r5, [r4, #0]
 8003080:	bf18      	it	ne
 8003082:	6059      	strne	r1, [r3, #4]
 8003084:	6863      	ldr	r3, [r4, #4]
 8003086:	bf08      	it	eq
 8003088:	f8c8 1000 	streq.w	r1, [r8]
 800308c:	5162      	str	r2, [r4, r5]
 800308e:	604b      	str	r3, [r1, #4]
 8003090:	4638      	mov	r0, r7
 8003092:	f104 060b 	add.w	r6, r4, #11
 8003096:	f000 f829 	bl	80030ec <__malloc_unlock>
 800309a:	f026 0607 	bic.w	r6, r6, #7
 800309e:	1d23      	adds	r3, r4, #4
 80030a0:	1af2      	subs	r2, r6, r3
 80030a2:	d0ae      	beq.n	8003002 <_malloc_r+0x22>
 80030a4:	1b9b      	subs	r3, r3, r6
 80030a6:	50a3      	str	r3, [r4, r2]
 80030a8:	e7ab      	b.n	8003002 <_malloc_r+0x22>
 80030aa:	42a3      	cmp	r3, r4
 80030ac:	6862      	ldr	r2, [r4, #4]
 80030ae:	d1dd      	bne.n	800306c <_malloc_r+0x8c>
 80030b0:	f8c8 2000 	str.w	r2, [r8]
 80030b4:	e7ec      	b.n	8003090 <_malloc_r+0xb0>
 80030b6:	4623      	mov	r3, r4
 80030b8:	6864      	ldr	r4, [r4, #4]
 80030ba:	e7ac      	b.n	8003016 <_malloc_r+0x36>
 80030bc:	4634      	mov	r4, r6
 80030be:	6876      	ldr	r6, [r6, #4]
 80030c0:	e7b4      	b.n	800302c <_malloc_r+0x4c>
 80030c2:	4613      	mov	r3, r2
 80030c4:	e7cc      	b.n	8003060 <_malloc_r+0x80>
 80030c6:	230c      	movs	r3, #12
 80030c8:	4638      	mov	r0, r7
 80030ca:	603b      	str	r3, [r7, #0]
 80030cc:	f000 f80e 	bl	80030ec <__malloc_unlock>
 80030d0:	e797      	b.n	8003002 <_malloc_r+0x22>
 80030d2:	6025      	str	r5, [r4, #0]
 80030d4:	e7dc      	b.n	8003090 <_malloc_r+0xb0>
 80030d6:	605b      	str	r3, [r3, #4]
 80030d8:	deff      	udf	#255	; 0xff
 80030da:	bf00      	nop
 80030dc:	200000fc 	.word	0x200000fc

080030e0 <__malloc_lock>:
 80030e0:	4801      	ldr	r0, [pc, #4]	; (80030e8 <__malloc_lock+0x8>)
 80030e2:	f000 b86b 	b.w	80031bc <__retarget_lock_acquire_recursive>
 80030e6:	bf00      	nop
 80030e8:	20000240 	.word	0x20000240

080030ec <__malloc_unlock>:
 80030ec:	4801      	ldr	r0, [pc, #4]	; (80030f4 <__malloc_unlock+0x8>)
 80030ee:	f000 b866 	b.w	80031be <__retarget_lock_release_recursive>
 80030f2:	bf00      	nop
 80030f4:	20000240 	.word	0x20000240

080030f8 <siprintf>:
 80030f8:	b40e      	push	{r1, r2, r3}
 80030fa:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80030fe:	b500      	push	{lr}
 8003100:	b09c      	sub	sp, #112	; 0x70
 8003102:	ab1d      	add	r3, sp, #116	; 0x74
 8003104:	9002      	str	r0, [sp, #8]
 8003106:	9006      	str	r0, [sp, #24]
 8003108:	9107      	str	r1, [sp, #28]
 800310a:	9104      	str	r1, [sp, #16]
 800310c:	4808      	ldr	r0, [pc, #32]	; (8003130 <siprintf+0x38>)
 800310e:	4909      	ldr	r1, [pc, #36]	; (8003134 <siprintf+0x3c>)
 8003110:	f853 2b04 	ldr.w	r2, [r3], #4
 8003114:	9105      	str	r1, [sp, #20]
 8003116:	6800      	ldr	r0, [r0, #0]
 8003118:	a902      	add	r1, sp, #8
 800311a:	9301      	str	r3, [sp, #4]
 800311c:	f000 f8f2 	bl	8003304 <_svfiprintf_r>
 8003120:	2200      	movs	r2, #0
 8003122:	9b02      	ldr	r3, [sp, #8]
 8003124:	701a      	strb	r2, [r3, #0]
 8003126:	b01c      	add	sp, #112	; 0x70
 8003128:	f85d eb04 	ldr.w	lr, [sp], #4
 800312c:	b003      	add	sp, #12
 800312e:	4770      	bx	lr
 8003130:	20000068 	.word	0x20000068
 8003134:	ffff0208 	.word	0xffff0208

08003138 <memset>:
 8003138:	4603      	mov	r3, r0
 800313a:	4402      	add	r2, r0
 800313c:	4293      	cmp	r3, r2
 800313e:	d100      	bne.n	8003142 <memset+0xa>
 8003140:	4770      	bx	lr
 8003142:	f803 1b01 	strb.w	r1, [r3], #1
 8003146:	e7f9      	b.n	800313c <memset+0x4>

08003148 <_sbrk_r>:
 8003148:	b538      	push	{r3, r4, r5, lr}
 800314a:	2300      	movs	r3, #0
 800314c:	4d05      	ldr	r5, [pc, #20]	; (8003164 <_sbrk_r+0x1c>)
 800314e:	4604      	mov	r4, r0
 8003150:	4608      	mov	r0, r1
 8003152:	602b      	str	r3, [r5, #0]
 8003154:	f7fd fe32 	bl	8000dbc <_sbrk>
 8003158:	1c43      	adds	r3, r0, #1
 800315a:	d102      	bne.n	8003162 <_sbrk_r+0x1a>
 800315c:	682b      	ldr	r3, [r5, #0]
 800315e:	b103      	cbz	r3, 8003162 <_sbrk_r+0x1a>
 8003160:	6023      	str	r3, [r4, #0]
 8003162:	bd38      	pop	{r3, r4, r5, pc}
 8003164:	2000023c 	.word	0x2000023c

08003168 <__errno>:
 8003168:	4b01      	ldr	r3, [pc, #4]	; (8003170 <__errno+0x8>)
 800316a:	6818      	ldr	r0, [r3, #0]
 800316c:	4770      	bx	lr
 800316e:	bf00      	nop
 8003170:	20000068 	.word	0x20000068

08003174 <__libc_init_array>:
 8003174:	b570      	push	{r4, r5, r6, lr}
 8003176:	2600      	movs	r6, #0
 8003178:	4d0c      	ldr	r5, [pc, #48]	; (80031ac <__libc_init_array+0x38>)
 800317a:	4c0d      	ldr	r4, [pc, #52]	; (80031b0 <__libc_init_array+0x3c>)
 800317c:	1b64      	subs	r4, r4, r5
 800317e:	10a4      	asrs	r4, r4, #2
 8003180:	42a6      	cmp	r6, r4
 8003182:	d109      	bne.n	8003198 <__libc_init_array+0x24>
 8003184:	f000 fbbe 	bl	8003904 <_init>
 8003188:	2600      	movs	r6, #0
 800318a:	4d0a      	ldr	r5, [pc, #40]	; (80031b4 <__libc_init_array+0x40>)
 800318c:	4c0a      	ldr	r4, [pc, #40]	; (80031b8 <__libc_init_array+0x44>)
 800318e:	1b64      	subs	r4, r4, r5
 8003190:	10a4      	asrs	r4, r4, #2
 8003192:	42a6      	cmp	r6, r4
 8003194:	d105      	bne.n	80031a2 <__libc_init_array+0x2e>
 8003196:	bd70      	pop	{r4, r5, r6, pc}
 8003198:	f855 3b04 	ldr.w	r3, [r5], #4
 800319c:	4798      	blx	r3
 800319e:	3601      	adds	r6, #1
 80031a0:	e7ee      	b.n	8003180 <__libc_init_array+0xc>
 80031a2:	f855 3b04 	ldr.w	r3, [r5], #4
 80031a6:	4798      	blx	r3
 80031a8:	3601      	adds	r6, #1
 80031aa:	e7f2      	b.n	8003192 <__libc_init_array+0x1e>
 80031ac:	08004f70 	.word	0x08004f70
 80031b0:	08004f70 	.word	0x08004f70
 80031b4:	08004f70 	.word	0x08004f70
 80031b8:	08004f74 	.word	0x08004f74

080031bc <__retarget_lock_acquire_recursive>:
 80031bc:	4770      	bx	lr

080031be <__retarget_lock_release_recursive>:
 80031be:	4770      	bx	lr

080031c0 <_free_r>:
 80031c0:	b538      	push	{r3, r4, r5, lr}
 80031c2:	4605      	mov	r5, r0
 80031c4:	2900      	cmp	r1, #0
 80031c6:	d040      	beq.n	800324a <_free_r+0x8a>
 80031c8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80031cc:	1f0c      	subs	r4, r1, #4
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	bfb8      	it	lt
 80031d2:	18e4      	addlt	r4, r4, r3
 80031d4:	f7ff ff84 	bl	80030e0 <__malloc_lock>
 80031d8:	4a1c      	ldr	r2, [pc, #112]	; (800324c <_free_r+0x8c>)
 80031da:	6813      	ldr	r3, [r2, #0]
 80031dc:	b933      	cbnz	r3, 80031ec <_free_r+0x2c>
 80031de:	6063      	str	r3, [r4, #4]
 80031e0:	6014      	str	r4, [r2, #0]
 80031e2:	4628      	mov	r0, r5
 80031e4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80031e8:	f7ff bf80 	b.w	80030ec <__malloc_unlock>
 80031ec:	42a3      	cmp	r3, r4
 80031ee:	d908      	bls.n	8003202 <_free_r+0x42>
 80031f0:	6820      	ldr	r0, [r4, #0]
 80031f2:	1821      	adds	r1, r4, r0
 80031f4:	428b      	cmp	r3, r1
 80031f6:	bf01      	itttt	eq
 80031f8:	6819      	ldreq	r1, [r3, #0]
 80031fa:	685b      	ldreq	r3, [r3, #4]
 80031fc:	1809      	addeq	r1, r1, r0
 80031fe:	6021      	streq	r1, [r4, #0]
 8003200:	e7ed      	b.n	80031de <_free_r+0x1e>
 8003202:	461a      	mov	r2, r3
 8003204:	685b      	ldr	r3, [r3, #4]
 8003206:	b10b      	cbz	r3, 800320c <_free_r+0x4c>
 8003208:	42a3      	cmp	r3, r4
 800320a:	d9fa      	bls.n	8003202 <_free_r+0x42>
 800320c:	6811      	ldr	r1, [r2, #0]
 800320e:	1850      	adds	r0, r2, r1
 8003210:	42a0      	cmp	r0, r4
 8003212:	d10b      	bne.n	800322c <_free_r+0x6c>
 8003214:	6820      	ldr	r0, [r4, #0]
 8003216:	4401      	add	r1, r0
 8003218:	1850      	adds	r0, r2, r1
 800321a:	4283      	cmp	r3, r0
 800321c:	6011      	str	r1, [r2, #0]
 800321e:	d1e0      	bne.n	80031e2 <_free_r+0x22>
 8003220:	6818      	ldr	r0, [r3, #0]
 8003222:	685b      	ldr	r3, [r3, #4]
 8003224:	4408      	add	r0, r1
 8003226:	6010      	str	r0, [r2, #0]
 8003228:	6053      	str	r3, [r2, #4]
 800322a:	e7da      	b.n	80031e2 <_free_r+0x22>
 800322c:	d902      	bls.n	8003234 <_free_r+0x74>
 800322e:	230c      	movs	r3, #12
 8003230:	602b      	str	r3, [r5, #0]
 8003232:	e7d6      	b.n	80031e2 <_free_r+0x22>
 8003234:	6820      	ldr	r0, [r4, #0]
 8003236:	1821      	adds	r1, r4, r0
 8003238:	428b      	cmp	r3, r1
 800323a:	bf01      	itttt	eq
 800323c:	6819      	ldreq	r1, [r3, #0]
 800323e:	685b      	ldreq	r3, [r3, #4]
 8003240:	1809      	addeq	r1, r1, r0
 8003242:	6021      	streq	r1, [r4, #0]
 8003244:	6063      	str	r3, [r4, #4]
 8003246:	6054      	str	r4, [r2, #4]
 8003248:	e7cb      	b.n	80031e2 <_free_r+0x22>
 800324a:	bd38      	pop	{r3, r4, r5, pc}
 800324c:	200000fc 	.word	0x200000fc

08003250 <__ssputs_r>:
 8003250:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003254:	461f      	mov	r7, r3
 8003256:	688e      	ldr	r6, [r1, #8]
 8003258:	4682      	mov	sl, r0
 800325a:	42be      	cmp	r6, r7
 800325c:	460c      	mov	r4, r1
 800325e:	4690      	mov	r8, r2
 8003260:	680b      	ldr	r3, [r1, #0]
 8003262:	d82c      	bhi.n	80032be <__ssputs_r+0x6e>
 8003264:	898a      	ldrh	r2, [r1, #12]
 8003266:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800326a:	d026      	beq.n	80032ba <__ssputs_r+0x6a>
 800326c:	6965      	ldr	r5, [r4, #20]
 800326e:	6909      	ldr	r1, [r1, #16]
 8003270:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003274:	eba3 0901 	sub.w	r9, r3, r1
 8003278:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800327c:	1c7b      	adds	r3, r7, #1
 800327e:	444b      	add	r3, r9
 8003280:	106d      	asrs	r5, r5, #1
 8003282:	429d      	cmp	r5, r3
 8003284:	bf38      	it	cc
 8003286:	461d      	movcc	r5, r3
 8003288:	0553      	lsls	r3, r2, #21
 800328a:	d527      	bpl.n	80032dc <__ssputs_r+0x8c>
 800328c:	4629      	mov	r1, r5
 800328e:	f7ff fea7 	bl	8002fe0 <_malloc_r>
 8003292:	4606      	mov	r6, r0
 8003294:	b360      	cbz	r0, 80032f0 <__ssputs_r+0xa0>
 8003296:	464a      	mov	r2, r9
 8003298:	6921      	ldr	r1, [r4, #16]
 800329a:	f000 faed 	bl	8003878 <memcpy>
 800329e:	89a3      	ldrh	r3, [r4, #12]
 80032a0:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80032a4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80032a8:	81a3      	strh	r3, [r4, #12]
 80032aa:	6126      	str	r6, [r4, #16]
 80032ac:	444e      	add	r6, r9
 80032ae:	6026      	str	r6, [r4, #0]
 80032b0:	463e      	mov	r6, r7
 80032b2:	6165      	str	r5, [r4, #20]
 80032b4:	eba5 0509 	sub.w	r5, r5, r9
 80032b8:	60a5      	str	r5, [r4, #8]
 80032ba:	42be      	cmp	r6, r7
 80032bc:	d900      	bls.n	80032c0 <__ssputs_r+0x70>
 80032be:	463e      	mov	r6, r7
 80032c0:	4632      	mov	r2, r6
 80032c2:	4641      	mov	r1, r8
 80032c4:	6820      	ldr	r0, [r4, #0]
 80032c6:	f000 faaf 	bl	8003828 <memmove>
 80032ca:	2000      	movs	r0, #0
 80032cc:	68a3      	ldr	r3, [r4, #8]
 80032ce:	1b9b      	subs	r3, r3, r6
 80032d0:	60a3      	str	r3, [r4, #8]
 80032d2:	6823      	ldr	r3, [r4, #0]
 80032d4:	4433      	add	r3, r6
 80032d6:	6023      	str	r3, [r4, #0]
 80032d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80032dc:	462a      	mov	r2, r5
 80032de:	f000 fad9 	bl	8003894 <_realloc_r>
 80032e2:	4606      	mov	r6, r0
 80032e4:	2800      	cmp	r0, #0
 80032e6:	d1e0      	bne.n	80032aa <__ssputs_r+0x5a>
 80032e8:	4650      	mov	r0, sl
 80032ea:	6921      	ldr	r1, [r4, #16]
 80032ec:	f7ff ff68 	bl	80031c0 <_free_r>
 80032f0:	230c      	movs	r3, #12
 80032f2:	f8ca 3000 	str.w	r3, [sl]
 80032f6:	89a3      	ldrh	r3, [r4, #12]
 80032f8:	f04f 30ff 	mov.w	r0, #4294967295
 80032fc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003300:	81a3      	strh	r3, [r4, #12]
 8003302:	e7e9      	b.n	80032d8 <__ssputs_r+0x88>

08003304 <_svfiprintf_r>:
 8003304:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003308:	4698      	mov	r8, r3
 800330a:	898b      	ldrh	r3, [r1, #12]
 800330c:	4607      	mov	r7, r0
 800330e:	061b      	lsls	r3, r3, #24
 8003310:	460d      	mov	r5, r1
 8003312:	4614      	mov	r4, r2
 8003314:	b09d      	sub	sp, #116	; 0x74
 8003316:	d50e      	bpl.n	8003336 <_svfiprintf_r+0x32>
 8003318:	690b      	ldr	r3, [r1, #16]
 800331a:	b963      	cbnz	r3, 8003336 <_svfiprintf_r+0x32>
 800331c:	2140      	movs	r1, #64	; 0x40
 800331e:	f7ff fe5f 	bl	8002fe0 <_malloc_r>
 8003322:	6028      	str	r0, [r5, #0]
 8003324:	6128      	str	r0, [r5, #16]
 8003326:	b920      	cbnz	r0, 8003332 <_svfiprintf_r+0x2e>
 8003328:	230c      	movs	r3, #12
 800332a:	603b      	str	r3, [r7, #0]
 800332c:	f04f 30ff 	mov.w	r0, #4294967295
 8003330:	e0d0      	b.n	80034d4 <_svfiprintf_r+0x1d0>
 8003332:	2340      	movs	r3, #64	; 0x40
 8003334:	616b      	str	r3, [r5, #20]
 8003336:	2300      	movs	r3, #0
 8003338:	9309      	str	r3, [sp, #36]	; 0x24
 800333a:	2320      	movs	r3, #32
 800333c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003340:	2330      	movs	r3, #48	; 0x30
 8003342:	f04f 0901 	mov.w	r9, #1
 8003346:	f8cd 800c 	str.w	r8, [sp, #12]
 800334a:	f8df 81a0 	ldr.w	r8, [pc, #416]	; 80034ec <_svfiprintf_r+0x1e8>
 800334e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003352:	4623      	mov	r3, r4
 8003354:	469a      	mov	sl, r3
 8003356:	f813 2b01 	ldrb.w	r2, [r3], #1
 800335a:	b10a      	cbz	r2, 8003360 <_svfiprintf_r+0x5c>
 800335c:	2a25      	cmp	r2, #37	; 0x25
 800335e:	d1f9      	bne.n	8003354 <_svfiprintf_r+0x50>
 8003360:	ebba 0b04 	subs.w	fp, sl, r4
 8003364:	d00b      	beq.n	800337e <_svfiprintf_r+0x7a>
 8003366:	465b      	mov	r3, fp
 8003368:	4622      	mov	r2, r4
 800336a:	4629      	mov	r1, r5
 800336c:	4638      	mov	r0, r7
 800336e:	f7ff ff6f 	bl	8003250 <__ssputs_r>
 8003372:	3001      	adds	r0, #1
 8003374:	f000 80a9 	beq.w	80034ca <_svfiprintf_r+0x1c6>
 8003378:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800337a:	445a      	add	r2, fp
 800337c:	9209      	str	r2, [sp, #36]	; 0x24
 800337e:	f89a 3000 	ldrb.w	r3, [sl]
 8003382:	2b00      	cmp	r3, #0
 8003384:	f000 80a1 	beq.w	80034ca <_svfiprintf_r+0x1c6>
 8003388:	2300      	movs	r3, #0
 800338a:	f04f 32ff 	mov.w	r2, #4294967295
 800338e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003392:	f10a 0a01 	add.w	sl, sl, #1
 8003396:	9304      	str	r3, [sp, #16]
 8003398:	9307      	str	r3, [sp, #28]
 800339a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800339e:	931a      	str	r3, [sp, #104]	; 0x68
 80033a0:	4654      	mov	r4, sl
 80033a2:	2205      	movs	r2, #5
 80033a4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80033a8:	4850      	ldr	r0, [pc, #320]	; (80034ec <_svfiprintf_r+0x1e8>)
 80033aa:	f000 fa57 	bl	800385c <memchr>
 80033ae:	9a04      	ldr	r2, [sp, #16]
 80033b0:	b9d8      	cbnz	r0, 80033ea <_svfiprintf_r+0xe6>
 80033b2:	06d0      	lsls	r0, r2, #27
 80033b4:	bf44      	itt	mi
 80033b6:	2320      	movmi	r3, #32
 80033b8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80033bc:	0711      	lsls	r1, r2, #28
 80033be:	bf44      	itt	mi
 80033c0:	232b      	movmi	r3, #43	; 0x2b
 80033c2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80033c6:	f89a 3000 	ldrb.w	r3, [sl]
 80033ca:	2b2a      	cmp	r3, #42	; 0x2a
 80033cc:	d015      	beq.n	80033fa <_svfiprintf_r+0xf6>
 80033ce:	4654      	mov	r4, sl
 80033d0:	2000      	movs	r0, #0
 80033d2:	f04f 0c0a 	mov.w	ip, #10
 80033d6:	9a07      	ldr	r2, [sp, #28]
 80033d8:	4621      	mov	r1, r4
 80033da:	f811 3b01 	ldrb.w	r3, [r1], #1
 80033de:	3b30      	subs	r3, #48	; 0x30
 80033e0:	2b09      	cmp	r3, #9
 80033e2:	d94d      	bls.n	8003480 <_svfiprintf_r+0x17c>
 80033e4:	b1b0      	cbz	r0, 8003414 <_svfiprintf_r+0x110>
 80033e6:	9207      	str	r2, [sp, #28]
 80033e8:	e014      	b.n	8003414 <_svfiprintf_r+0x110>
 80033ea:	eba0 0308 	sub.w	r3, r0, r8
 80033ee:	fa09 f303 	lsl.w	r3, r9, r3
 80033f2:	4313      	orrs	r3, r2
 80033f4:	46a2      	mov	sl, r4
 80033f6:	9304      	str	r3, [sp, #16]
 80033f8:	e7d2      	b.n	80033a0 <_svfiprintf_r+0x9c>
 80033fa:	9b03      	ldr	r3, [sp, #12]
 80033fc:	1d19      	adds	r1, r3, #4
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	9103      	str	r1, [sp, #12]
 8003402:	2b00      	cmp	r3, #0
 8003404:	bfbb      	ittet	lt
 8003406:	425b      	neglt	r3, r3
 8003408:	f042 0202 	orrlt.w	r2, r2, #2
 800340c:	9307      	strge	r3, [sp, #28]
 800340e:	9307      	strlt	r3, [sp, #28]
 8003410:	bfb8      	it	lt
 8003412:	9204      	strlt	r2, [sp, #16]
 8003414:	7823      	ldrb	r3, [r4, #0]
 8003416:	2b2e      	cmp	r3, #46	; 0x2e
 8003418:	d10c      	bne.n	8003434 <_svfiprintf_r+0x130>
 800341a:	7863      	ldrb	r3, [r4, #1]
 800341c:	2b2a      	cmp	r3, #42	; 0x2a
 800341e:	d134      	bne.n	800348a <_svfiprintf_r+0x186>
 8003420:	9b03      	ldr	r3, [sp, #12]
 8003422:	3402      	adds	r4, #2
 8003424:	1d1a      	adds	r2, r3, #4
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	9203      	str	r2, [sp, #12]
 800342a:	2b00      	cmp	r3, #0
 800342c:	bfb8      	it	lt
 800342e:	f04f 33ff 	movlt.w	r3, #4294967295
 8003432:	9305      	str	r3, [sp, #20]
 8003434:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 80034f0 <_svfiprintf_r+0x1ec>
 8003438:	2203      	movs	r2, #3
 800343a:	4650      	mov	r0, sl
 800343c:	7821      	ldrb	r1, [r4, #0]
 800343e:	f000 fa0d 	bl	800385c <memchr>
 8003442:	b138      	cbz	r0, 8003454 <_svfiprintf_r+0x150>
 8003444:	2240      	movs	r2, #64	; 0x40
 8003446:	9b04      	ldr	r3, [sp, #16]
 8003448:	eba0 000a 	sub.w	r0, r0, sl
 800344c:	4082      	lsls	r2, r0
 800344e:	4313      	orrs	r3, r2
 8003450:	3401      	adds	r4, #1
 8003452:	9304      	str	r3, [sp, #16]
 8003454:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003458:	2206      	movs	r2, #6
 800345a:	4826      	ldr	r0, [pc, #152]	; (80034f4 <_svfiprintf_r+0x1f0>)
 800345c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003460:	f000 f9fc 	bl	800385c <memchr>
 8003464:	2800      	cmp	r0, #0
 8003466:	d038      	beq.n	80034da <_svfiprintf_r+0x1d6>
 8003468:	4b23      	ldr	r3, [pc, #140]	; (80034f8 <_svfiprintf_r+0x1f4>)
 800346a:	bb1b      	cbnz	r3, 80034b4 <_svfiprintf_r+0x1b0>
 800346c:	9b03      	ldr	r3, [sp, #12]
 800346e:	3307      	adds	r3, #7
 8003470:	f023 0307 	bic.w	r3, r3, #7
 8003474:	3308      	adds	r3, #8
 8003476:	9303      	str	r3, [sp, #12]
 8003478:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800347a:	4433      	add	r3, r6
 800347c:	9309      	str	r3, [sp, #36]	; 0x24
 800347e:	e768      	b.n	8003352 <_svfiprintf_r+0x4e>
 8003480:	460c      	mov	r4, r1
 8003482:	2001      	movs	r0, #1
 8003484:	fb0c 3202 	mla	r2, ip, r2, r3
 8003488:	e7a6      	b.n	80033d8 <_svfiprintf_r+0xd4>
 800348a:	2300      	movs	r3, #0
 800348c:	f04f 0c0a 	mov.w	ip, #10
 8003490:	4619      	mov	r1, r3
 8003492:	3401      	adds	r4, #1
 8003494:	9305      	str	r3, [sp, #20]
 8003496:	4620      	mov	r0, r4
 8003498:	f810 2b01 	ldrb.w	r2, [r0], #1
 800349c:	3a30      	subs	r2, #48	; 0x30
 800349e:	2a09      	cmp	r2, #9
 80034a0:	d903      	bls.n	80034aa <_svfiprintf_r+0x1a6>
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d0c6      	beq.n	8003434 <_svfiprintf_r+0x130>
 80034a6:	9105      	str	r1, [sp, #20]
 80034a8:	e7c4      	b.n	8003434 <_svfiprintf_r+0x130>
 80034aa:	4604      	mov	r4, r0
 80034ac:	2301      	movs	r3, #1
 80034ae:	fb0c 2101 	mla	r1, ip, r1, r2
 80034b2:	e7f0      	b.n	8003496 <_svfiprintf_r+0x192>
 80034b4:	ab03      	add	r3, sp, #12
 80034b6:	9300      	str	r3, [sp, #0]
 80034b8:	462a      	mov	r2, r5
 80034ba:	4638      	mov	r0, r7
 80034bc:	4b0f      	ldr	r3, [pc, #60]	; (80034fc <_svfiprintf_r+0x1f8>)
 80034be:	a904      	add	r1, sp, #16
 80034c0:	f3af 8000 	nop.w
 80034c4:	1c42      	adds	r2, r0, #1
 80034c6:	4606      	mov	r6, r0
 80034c8:	d1d6      	bne.n	8003478 <_svfiprintf_r+0x174>
 80034ca:	89ab      	ldrh	r3, [r5, #12]
 80034cc:	065b      	lsls	r3, r3, #25
 80034ce:	f53f af2d 	bmi.w	800332c <_svfiprintf_r+0x28>
 80034d2:	9809      	ldr	r0, [sp, #36]	; 0x24
 80034d4:	b01d      	add	sp, #116	; 0x74
 80034d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80034da:	ab03      	add	r3, sp, #12
 80034dc:	9300      	str	r3, [sp, #0]
 80034de:	462a      	mov	r2, r5
 80034e0:	4638      	mov	r0, r7
 80034e2:	4b06      	ldr	r3, [pc, #24]	; (80034fc <_svfiprintf_r+0x1f8>)
 80034e4:	a904      	add	r1, sp, #16
 80034e6:	f000 f87d 	bl	80035e4 <_printf_i>
 80034ea:	e7eb      	b.n	80034c4 <_svfiprintf_r+0x1c0>
 80034ec:	08004f3a 	.word	0x08004f3a
 80034f0:	08004f40 	.word	0x08004f40
 80034f4:	08004f44 	.word	0x08004f44
 80034f8:	00000000 	.word	0x00000000
 80034fc:	08003251 	.word	0x08003251

08003500 <_printf_common>:
 8003500:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003504:	4616      	mov	r6, r2
 8003506:	4699      	mov	r9, r3
 8003508:	688a      	ldr	r2, [r1, #8]
 800350a:	690b      	ldr	r3, [r1, #16]
 800350c:	4607      	mov	r7, r0
 800350e:	4293      	cmp	r3, r2
 8003510:	bfb8      	it	lt
 8003512:	4613      	movlt	r3, r2
 8003514:	6033      	str	r3, [r6, #0]
 8003516:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800351a:	460c      	mov	r4, r1
 800351c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003520:	b10a      	cbz	r2, 8003526 <_printf_common+0x26>
 8003522:	3301      	adds	r3, #1
 8003524:	6033      	str	r3, [r6, #0]
 8003526:	6823      	ldr	r3, [r4, #0]
 8003528:	0699      	lsls	r1, r3, #26
 800352a:	bf42      	ittt	mi
 800352c:	6833      	ldrmi	r3, [r6, #0]
 800352e:	3302      	addmi	r3, #2
 8003530:	6033      	strmi	r3, [r6, #0]
 8003532:	6825      	ldr	r5, [r4, #0]
 8003534:	f015 0506 	ands.w	r5, r5, #6
 8003538:	d106      	bne.n	8003548 <_printf_common+0x48>
 800353a:	f104 0a19 	add.w	sl, r4, #25
 800353e:	68e3      	ldr	r3, [r4, #12]
 8003540:	6832      	ldr	r2, [r6, #0]
 8003542:	1a9b      	subs	r3, r3, r2
 8003544:	42ab      	cmp	r3, r5
 8003546:	dc2b      	bgt.n	80035a0 <_printf_common+0xa0>
 8003548:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800354c:	1e13      	subs	r3, r2, #0
 800354e:	6822      	ldr	r2, [r4, #0]
 8003550:	bf18      	it	ne
 8003552:	2301      	movne	r3, #1
 8003554:	0692      	lsls	r2, r2, #26
 8003556:	d430      	bmi.n	80035ba <_printf_common+0xba>
 8003558:	4649      	mov	r1, r9
 800355a:	4638      	mov	r0, r7
 800355c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003560:	47c0      	blx	r8
 8003562:	3001      	adds	r0, #1
 8003564:	d023      	beq.n	80035ae <_printf_common+0xae>
 8003566:	6823      	ldr	r3, [r4, #0]
 8003568:	6922      	ldr	r2, [r4, #16]
 800356a:	f003 0306 	and.w	r3, r3, #6
 800356e:	2b04      	cmp	r3, #4
 8003570:	bf14      	ite	ne
 8003572:	2500      	movne	r5, #0
 8003574:	6833      	ldreq	r3, [r6, #0]
 8003576:	f04f 0600 	mov.w	r6, #0
 800357a:	bf08      	it	eq
 800357c:	68e5      	ldreq	r5, [r4, #12]
 800357e:	f104 041a 	add.w	r4, r4, #26
 8003582:	bf08      	it	eq
 8003584:	1aed      	subeq	r5, r5, r3
 8003586:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800358a:	bf08      	it	eq
 800358c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003590:	4293      	cmp	r3, r2
 8003592:	bfc4      	itt	gt
 8003594:	1a9b      	subgt	r3, r3, r2
 8003596:	18ed      	addgt	r5, r5, r3
 8003598:	42b5      	cmp	r5, r6
 800359a:	d11a      	bne.n	80035d2 <_printf_common+0xd2>
 800359c:	2000      	movs	r0, #0
 800359e:	e008      	b.n	80035b2 <_printf_common+0xb2>
 80035a0:	2301      	movs	r3, #1
 80035a2:	4652      	mov	r2, sl
 80035a4:	4649      	mov	r1, r9
 80035a6:	4638      	mov	r0, r7
 80035a8:	47c0      	blx	r8
 80035aa:	3001      	adds	r0, #1
 80035ac:	d103      	bne.n	80035b6 <_printf_common+0xb6>
 80035ae:	f04f 30ff 	mov.w	r0, #4294967295
 80035b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80035b6:	3501      	adds	r5, #1
 80035b8:	e7c1      	b.n	800353e <_printf_common+0x3e>
 80035ba:	2030      	movs	r0, #48	; 0x30
 80035bc:	18e1      	adds	r1, r4, r3
 80035be:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80035c2:	1c5a      	adds	r2, r3, #1
 80035c4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80035c8:	4422      	add	r2, r4
 80035ca:	3302      	adds	r3, #2
 80035cc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80035d0:	e7c2      	b.n	8003558 <_printf_common+0x58>
 80035d2:	2301      	movs	r3, #1
 80035d4:	4622      	mov	r2, r4
 80035d6:	4649      	mov	r1, r9
 80035d8:	4638      	mov	r0, r7
 80035da:	47c0      	blx	r8
 80035dc:	3001      	adds	r0, #1
 80035de:	d0e6      	beq.n	80035ae <_printf_common+0xae>
 80035e0:	3601      	adds	r6, #1
 80035e2:	e7d9      	b.n	8003598 <_printf_common+0x98>

080035e4 <_printf_i>:
 80035e4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80035e8:	7e0f      	ldrb	r7, [r1, #24]
 80035ea:	4691      	mov	r9, r2
 80035ec:	2f78      	cmp	r7, #120	; 0x78
 80035ee:	4680      	mov	r8, r0
 80035f0:	460c      	mov	r4, r1
 80035f2:	469a      	mov	sl, r3
 80035f4:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80035f6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80035fa:	d807      	bhi.n	800360c <_printf_i+0x28>
 80035fc:	2f62      	cmp	r7, #98	; 0x62
 80035fe:	d80a      	bhi.n	8003616 <_printf_i+0x32>
 8003600:	2f00      	cmp	r7, #0
 8003602:	f000 80d5 	beq.w	80037b0 <_printf_i+0x1cc>
 8003606:	2f58      	cmp	r7, #88	; 0x58
 8003608:	f000 80c1 	beq.w	800378e <_printf_i+0x1aa>
 800360c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003610:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003614:	e03a      	b.n	800368c <_printf_i+0xa8>
 8003616:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800361a:	2b15      	cmp	r3, #21
 800361c:	d8f6      	bhi.n	800360c <_printf_i+0x28>
 800361e:	a101      	add	r1, pc, #4	; (adr r1, 8003624 <_printf_i+0x40>)
 8003620:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003624:	0800367d 	.word	0x0800367d
 8003628:	08003691 	.word	0x08003691
 800362c:	0800360d 	.word	0x0800360d
 8003630:	0800360d 	.word	0x0800360d
 8003634:	0800360d 	.word	0x0800360d
 8003638:	0800360d 	.word	0x0800360d
 800363c:	08003691 	.word	0x08003691
 8003640:	0800360d 	.word	0x0800360d
 8003644:	0800360d 	.word	0x0800360d
 8003648:	0800360d 	.word	0x0800360d
 800364c:	0800360d 	.word	0x0800360d
 8003650:	08003797 	.word	0x08003797
 8003654:	080036bd 	.word	0x080036bd
 8003658:	08003751 	.word	0x08003751
 800365c:	0800360d 	.word	0x0800360d
 8003660:	0800360d 	.word	0x0800360d
 8003664:	080037b9 	.word	0x080037b9
 8003668:	0800360d 	.word	0x0800360d
 800366c:	080036bd 	.word	0x080036bd
 8003670:	0800360d 	.word	0x0800360d
 8003674:	0800360d 	.word	0x0800360d
 8003678:	08003759 	.word	0x08003759
 800367c:	682b      	ldr	r3, [r5, #0]
 800367e:	1d1a      	adds	r2, r3, #4
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	602a      	str	r2, [r5, #0]
 8003684:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003688:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800368c:	2301      	movs	r3, #1
 800368e:	e0a0      	b.n	80037d2 <_printf_i+0x1ee>
 8003690:	6820      	ldr	r0, [r4, #0]
 8003692:	682b      	ldr	r3, [r5, #0]
 8003694:	0607      	lsls	r7, r0, #24
 8003696:	f103 0104 	add.w	r1, r3, #4
 800369a:	6029      	str	r1, [r5, #0]
 800369c:	d501      	bpl.n	80036a2 <_printf_i+0xbe>
 800369e:	681e      	ldr	r6, [r3, #0]
 80036a0:	e003      	b.n	80036aa <_printf_i+0xc6>
 80036a2:	0646      	lsls	r6, r0, #25
 80036a4:	d5fb      	bpl.n	800369e <_printf_i+0xba>
 80036a6:	f9b3 6000 	ldrsh.w	r6, [r3]
 80036aa:	2e00      	cmp	r6, #0
 80036ac:	da03      	bge.n	80036b6 <_printf_i+0xd2>
 80036ae:	232d      	movs	r3, #45	; 0x2d
 80036b0:	4276      	negs	r6, r6
 80036b2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80036b6:	230a      	movs	r3, #10
 80036b8:	4859      	ldr	r0, [pc, #356]	; (8003820 <_printf_i+0x23c>)
 80036ba:	e012      	b.n	80036e2 <_printf_i+0xfe>
 80036bc:	682b      	ldr	r3, [r5, #0]
 80036be:	6820      	ldr	r0, [r4, #0]
 80036c0:	1d19      	adds	r1, r3, #4
 80036c2:	6029      	str	r1, [r5, #0]
 80036c4:	0605      	lsls	r5, r0, #24
 80036c6:	d501      	bpl.n	80036cc <_printf_i+0xe8>
 80036c8:	681e      	ldr	r6, [r3, #0]
 80036ca:	e002      	b.n	80036d2 <_printf_i+0xee>
 80036cc:	0641      	lsls	r1, r0, #25
 80036ce:	d5fb      	bpl.n	80036c8 <_printf_i+0xe4>
 80036d0:	881e      	ldrh	r6, [r3, #0]
 80036d2:	2f6f      	cmp	r7, #111	; 0x6f
 80036d4:	bf0c      	ite	eq
 80036d6:	2308      	moveq	r3, #8
 80036d8:	230a      	movne	r3, #10
 80036da:	4851      	ldr	r0, [pc, #324]	; (8003820 <_printf_i+0x23c>)
 80036dc:	2100      	movs	r1, #0
 80036de:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80036e2:	6865      	ldr	r5, [r4, #4]
 80036e4:	2d00      	cmp	r5, #0
 80036e6:	bfa8      	it	ge
 80036e8:	6821      	ldrge	r1, [r4, #0]
 80036ea:	60a5      	str	r5, [r4, #8]
 80036ec:	bfa4      	itt	ge
 80036ee:	f021 0104 	bicge.w	r1, r1, #4
 80036f2:	6021      	strge	r1, [r4, #0]
 80036f4:	b90e      	cbnz	r6, 80036fa <_printf_i+0x116>
 80036f6:	2d00      	cmp	r5, #0
 80036f8:	d04b      	beq.n	8003792 <_printf_i+0x1ae>
 80036fa:	4615      	mov	r5, r2
 80036fc:	fbb6 f1f3 	udiv	r1, r6, r3
 8003700:	fb03 6711 	mls	r7, r3, r1, r6
 8003704:	5dc7      	ldrb	r7, [r0, r7]
 8003706:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800370a:	4637      	mov	r7, r6
 800370c:	42bb      	cmp	r3, r7
 800370e:	460e      	mov	r6, r1
 8003710:	d9f4      	bls.n	80036fc <_printf_i+0x118>
 8003712:	2b08      	cmp	r3, #8
 8003714:	d10b      	bne.n	800372e <_printf_i+0x14a>
 8003716:	6823      	ldr	r3, [r4, #0]
 8003718:	07de      	lsls	r6, r3, #31
 800371a:	d508      	bpl.n	800372e <_printf_i+0x14a>
 800371c:	6923      	ldr	r3, [r4, #16]
 800371e:	6861      	ldr	r1, [r4, #4]
 8003720:	4299      	cmp	r1, r3
 8003722:	bfde      	ittt	le
 8003724:	2330      	movle	r3, #48	; 0x30
 8003726:	f805 3c01 	strble.w	r3, [r5, #-1]
 800372a:	f105 35ff 	addle.w	r5, r5, #4294967295
 800372e:	1b52      	subs	r2, r2, r5
 8003730:	6122      	str	r2, [r4, #16]
 8003732:	464b      	mov	r3, r9
 8003734:	4621      	mov	r1, r4
 8003736:	4640      	mov	r0, r8
 8003738:	f8cd a000 	str.w	sl, [sp]
 800373c:	aa03      	add	r2, sp, #12
 800373e:	f7ff fedf 	bl	8003500 <_printf_common>
 8003742:	3001      	adds	r0, #1
 8003744:	d14a      	bne.n	80037dc <_printf_i+0x1f8>
 8003746:	f04f 30ff 	mov.w	r0, #4294967295
 800374a:	b004      	add	sp, #16
 800374c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003750:	6823      	ldr	r3, [r4, #0]
 8003752:	f043 0320 	orr.w	r3, r3, #32
 8003756:	6023      	str	r3, [r4, #0]
 8003758:	2778      	movs	r7, #120	; 0x78
 800375a:	4832      	ldr	r0, [pc, #200]	; (8003824 <_printf_i+0x240>)
 800375c:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8003760:	6823      	ldr	r3, [r4, #0]
 8003762:	6829      	ldr	r1, [r5, #0]
 8003764:	061f      	lsls	r7, r3, #24
 8003766:	f851 6b04 	ldr.w	r6, [r1], #4
 800376a:	d402      	bmi.n	8003772 <_printf_i+0x18e>
 800376c:	065f      	lsls	r7, r3, #25
 800376e:	bf48      	it	mi
 8003770:	b2b6      	uxthmi	r6, r6
 8003772:	07df      	lsls	r7, r3, #31
 8003774:	bf48      	it	mi
 8003776:	f043 0320 	orrmi.w	r3, r3, #32
 800377a:	6029      	str	r1, [r5, #0]
 800377c:	bf48      	it	mi
 800377e:	6023      	strmi	r3, [r4, #0]
 8003780:	b91e      	cbnz	r6, 800378a <_printf_i+0x1a6>
 8003782:	6823      	ldr	r3, [r4, #0]
 8003784:	f023 0320 	bic.w	r3, r3, #32
 8003788:	6023      	str	r3, [r4, #0]
 800378a:	2310      	movs	r3, #16
 800378c:	e7a6      	b.n	80036dc <_printf_i+0xf8>
 800378e:	4824      	ldr	r0, [pc, #144]	; (8003820 <_printf_i+0x23c>)
 8003790:	e7e4      	b.n	800375c <_printf_i+0x178>
 8003792:	4615      	mov	r5, r2
 8003794:	e7bd      	b.n	8003712 <_printf_i+0x12e>
 8003796:	682b      	ldr	r3, [r5, #0]
 8003798:	6826      	ldr	r6, [r4, #0]
 800379a:	1d18      	adds	r0, r3, #4
 800379c:	6961      	ldr	r1, [r4, #20]
 800379e:	6028      	str	r0, [r5, #0]
 80037a0:	0635      	lsls	r5, r6, #24
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	d501      	bpl.n	80037aa <_printf_i+0x1c6>
 80037a6:	6019      	str	r1, [r3, #0]
 80037a8:	e002      	b.n	80037b0 <_printf_i+0x1cc>
 80037aa:	0670      	lsls	r0, r6, #25
 80037ac:	d5fb      	bpl.n	80037a6 <_printf_i+0x1c2>
 80037ae:	8019      	strh	r1, [r3, #0]
 80037b0:	2300      	movs	r3, #0
 80037b2:	4615      	mov	r5, r2
 80037b4:	6123      	str	r3, [r4, #16]
 80037b6:	e7bc      	b.n	8003732 <_printf_i+0x14e>
 80037b8:	682b      	ldr	r3, [r5, #0]
 80037ba:	2100      	movs	r1, #0
 80037bc:	1d1a      	adds	r2, r3, #4
 80037be:	602a      	str	r2, [r5, #0]
 80037c0:	681d      	ldr	r5, [r3, #0]
 80037c2:	6862      	ldr	r2, [r4, #4]
 80037c4:	4628      	mov	r0, r5
 80037c6:	f000 f849 	bl	800385c <memchr>
 80037ca:	b108      	cbz	r0, 80037d0 <_printf_i+0x1ec>
 80037cc:	1b40      	subs	r0, r0, r5
 80037ce:	6060      	str	r0, [r4, #4]
 80037d0:	6863      	ldr	r3, [r4, #4]
 80037d2:	6123      	str	r3, [r4, #16]
 80037d4:	2300      	movs	r3, #0
 80037d6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80037da:	e7aa      	b.n	8003732 <_printf_i+0x14e>
 80037dc:	462a      	mov	r2, r5
 80037de:	4649      	mov	r1, r9
 80037e0:	4640      	mov	r0, r8
 80037e2:	6923      	ldr	r3, [r4, #16]
 80037e4:	47d0      	blx	sl
 80037e6:	3001      	adds	r0, #1
 80037e8:	d0ad      	beq.n	8003746 <_printf_i+0x162>
 80037ea:	6823      	ldr	r3, [r4, #0]
 80037ec:	079b      	lsls	r3, r3, #30
 80037ee:	d413      	bmi.n	8003818 <_printf_i+0x234>
 80037f0:	68e0      	ldr	r0, [r4, #12]
 80037f2:	9b03      	ldr	r3, [sp, #12]
 80037f4:	4298      	cmp	r0, r3
 80037f6:	bfb8      	it	lt
 80037f8:	4618      	movlt	r0, r3
 80037fa:	e7a6      	b.n	800374a <_printf_i+0x166>
 80037fc:	2301      	movs	r3, #1
 80037fe:	4632      	mov	r2, r6
 8003800:	4649      	mov	r1, r9
 8003802:	4640      	mov	r0, r8
 8003804:	47d0      	blx	sl
 8003806:	3001      	adds	r0, #1
 8003808:	d09d      	beq.n	8003746 <_printf_i+0x162>
 800380a:	3501      	adds	r5, #1
 800380c:	68e3      	ldr	r3, [r4, #12]
 800380e:	9903      	ldr	r1, [sp, #12]
 8003810:	1a5b      	subs	r3, r3, r1
 8003812:	42ab      	cmp	r3, r5
 8003814:	dcf2      	bgt.n	80037fc <_printf_i+0x218>
 8003816:	e7eb      	b.n	80037f0 <_printf_i+0x20c>
 8003818:	2500      	movs	r5, #0
 800381a:	f104 0619 	add.w	r6, r4, #25
 800381e:	e7f5      	b.n	800380c <_printf_i+0x228>
 8003820:	08004f4b 	.word	0x08004f4b
 8003824:	08004f5c 	.word	0x08004f5c

08003828 <memmove>:
 8003828:	4288      	cmp	r0, r1
 800382a:	b510      	push	{r4, lr}
 800382c:	eb01 0402 	add.w	r4, r1, r2
 8003830:	d902      	bls.n	8003838 <memmove+0x10>
 8003832:	4284      	cmp	r4, r0
 8003834:	4623      	mov	r3, r4
 8003836:	d807      	bhi.n	8003848 <memmove+0x20>
 8003838:	1e43      	subs	r3, r0, #1
 800383a:	42a1      	cmp	r1, r4
 800383c:	d008      	beq.n	8003850 <memmove+0x28>
 800383e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003842:	f803 2f01 	strb.w	r2, [r3, #1]!
 8003846:	e7f8      	b.n	800383a <memmove+0x12>
 8003848:	4601      	mov	r1, r0
 800384a:	4402      	add	r2, r0
 800384c:	428a      	cmp	r2, r1
 800384e:	d100      	bne.n	8003852 <memmove+0x2a>
 8003850:	bd10      	pop	{r4, pc}
 8003852:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8003856:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800385a:	e7f7      	b.n	800384c <memmove+0x24>

0800385c <memchr>:
 800385c:	4603      	mov	r3, r0
 800385e:	b510      	push	{r4, lr}
 8003860:	b2c9      	uxtb	r1, r1
 8003862:	4402      	add	r2, r0
 8003864:	4293      	cmp	r3, r2
 8003866:	4618      	mov	r0, r3
 8003868:	d101      	bne.n	800386e <memchr+0x12>
 800386a:	2000      	movs	r0, #0
 800386c:	e003      	b.n	8003876 <memchr+0x1a>
 800386e:	7804      	ldrb	r4, [r0, #0]
 8003870:	3301      	adds	r3, #1
 8003872:	428c      	cmp	r4, r1
 8003874:	d1f6      	bne.n	8003864 <memchr+0x8>
 8003876:	bd10      	pop	{r4, pc}

08003878 <memcpy>:
 8003878:	440a      	add	r2, r1
 800387a:	4291      	cmp	r1, r2
 800387c:	f100 33ff 	add.w	r3, r0, #4294967295
 8003880:	d100      	bne.n	8003884 <memcpy+0xc>
 8003882:	4770      	bx	lr
 8003884:	b510      	push	{r4, lr}
 8003886:	f811 4b01 	ldrb.w	r4, [r1], #1
 800388a:	4291      	cmp	r1, r2
 800388c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003890:	d1f9      	bne.n	8003886 <memcpy+0xe>
 8003892:	bd10      	pop	{r4, pc}

08003894 <_realloc_r>:
 8003894:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003898:	4680      	mov	r8, r0
 800389a:	4614      	mov	r4, r2
 800389c:	460e      	mov	r6, r1
 800389e:	b921      	cbnz	r1, 80038aa <_realloc_r+0x16>
 80038a0:	4611      	mov	r1, r2
 80038a2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80038a6:	f7ff bb9b 	b.w	8002fe0 <_malloc_r>
 80038aa:	b92a      	cbnz	r2, 80038b8 <_realloc_r+0x24>
 80038ac:	f7ff fc88 	bl	80031c0 <_free_r>
 80038b0:	4625      	mov	r5, r4
 80038b2:	4628      	mov	r0, r5
 80038b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80038b8:	f000 f81b 	bl	80038f2 <_malloc_usable_size_r>
 80038bc:	4284      	cmp	r4, r0
 80038be:	4607      	mov	r7, r0
 80038c0:	d802      	bhi.n	80038c8 <_realloc_r+0x34>
 80038c2:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80038c6:	d812      	bhi.n	80038ee <_realloc_r+0x5a>
 80038c8:	4621      	mov	r1, r4
 80038ca:	4640      	mov	r0, r8
 80038cc:	f7ff fb88 	bl	8002fe0 <_malloc_r>
 80038d0:	4605      	mov	r5, r0
 80038d2:	2800      	cmp	r0, #0
 80038d4:	d0ed      	beq.n	80038b2 <_realloc_r+0x1e>
 80038d6:	42bc      	cmp	r4, r7
 80038d8:	4622      	mov	r2, r4
 80038da:	4631      	mov	r1, r6
 80038dc:	bf28      	it	cs
 80038de:	463a      	movcs	r2, r7
 80038e0:	f7ff ffca 	bl	8003878 <memcpy>
 80038e4:	4631      	mov	r1, r6
 80038e6:	4640      	mov	r0, r8
 80038e8:	f7ff fc6a 	bl	80031c0 <_free_r>
 80038ec:	e7e1      	b.n	80038b2 <_realloc_r+0x1e>
 80038ee:	4635      	mov	r5, r6
 80038f0:	e7df      	b.n	80038b2 <_realloc_r+0x1e>

080038f2 <_malloc_usable_size_r>:
 80038f2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80038f6:	1f18      	subs	r0, r3, #4
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	bfbc      	itt	lt
 80038fc:	580b      	ldrlt	r3, [r1, r0]
 80038fe:	18c0      	addlt	r0, r0, r3
 8003900:	4770      	bx	lr
	...

08003904 <_init>:
 8003904:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003906:	bf00      	nop
 8003908:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800390a:	bc08      	pop	{r3}
 800390c:	469e      	mov	lr, r3
 800390e:	4770      	bx	lr

08003910 <_fini>:
 8003910:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003912:	bf00      	nop
 8003914:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003916:	bc08      	pop	{r3}
 8003918:	469e      	mov	lr, r3
 800391a:	4770      	bx	lr
